[
    {
        "date": "28/5/2019",
        "dbms": "SQLite",
        "links": {
            "email": "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-April/084283.html"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "closed (not a bug)",
        "test": [
            "CREATE TABLE test (c0);",
            "CREATE INDEX index_1 ON test('asdf'); -- Error: no such column: asdf"
        ],
        "title": "String interpreted as a column name when creating an index"
    },
    {
        "comment": "This bug was classified as \"severe\" and had existed since 2013.",
        "date": "28/5/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview/3182d3879020ef3b2e6db56be2470a0266d3c773",
            "email": "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-April/084293.html",
            "fix": "https://www.sqlite.org/src/info/1b1dd4d48cd79a58"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Severe",
        "status": "fixed",
        "test": [
            "CREATE TABLE test (c1 TEXT PRIMARY KEY) WITHOUT ROWID;",
            "CREATE INDEX index_0 ON test(c1 COLLATE NOCASE);",
            "INSERT INTO test(c1) VALUES ('A');",
            "INSERT INTO test(c1) VALUES ('a');",
            "SELECT * FROM test; -- only one row is fetched"
        ],
        "title": "COLLATE nocase index on a WITHOUT ROWID table malfunctions"
    },
    {
        "comment": "The failing test case caused the SQLite developers to realize \"a defect in the design of SQLite, not a defect in the implementation.\" Seven options to address this were outlined. Since it was not very clear how to best address this, the quirk was documented in the documentation and a compile time option to omit the relevant pragma was introduced.",
        "date": "28/5/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/info/a340eef47b0cad5",
            "email": "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-April/084322.html",
            "fix": "https://www.sqlite.org/src/info/eabe7f2d4ff0e0dd"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE test (c0);",
            "CREATE INDEX index_0 ON test(c0 LIKE '');",
            "PRAGMA case_sensitive_like=false;",
            "VACUUM;",
            "SELECT * from test; -- Error: malformed database schema (index_0) - non-deterministic functions prohibited in index expressions"
        ],
        "title": "PRAGMA case_sensitive_like can corrupt some databases"
    },
    {
        "date": "30/5/2019",
        "dbms": "SQLite",
        "links": {
            "email": "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-April/084324.html",
            "fix": "https://www.sqlite.org/src/info/5997d075665faca6"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE TABLE test (c0, c1 REAL);",
            "CREATE UNIQUE INDEX index_1 ON test(c0 GLOB c1);",
            "INSERT INTO test(c0, c1) VALUES ('1', '1');",
            "INSERT INTO test(c0, c1) VALUES ('0', '1');",
            "REINDEX; -- Error: UNIQUE constraint failed"
        ],
        "title": "Unique index that uses GLOB does not detect duplicate due to REAL conversion"
    },
    {
        "date": "28/5/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=a340eef47b",
            "email": "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-April/084299.html"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "closed (duplicate)",
        "test": [
            "PRAGMA case_sensitive_like=false;",
            "CREATE TABLE test (c0);",
            "CREATE INDEX IF NOT EXISTS index_1 ON test(c0 LIKE 'a'); -- Error: non-deterministic functions prohibited in index expressions"
        ],
        "title": "PRAGMA case_sensitive_like conflicts with LIKE operator when creating an index"
    },
    {
        "date": "1/5/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/info/3be1295b264be2fa",
            "email": "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084326.html",
            "fix": "https://www.sqlite.org/src/info/713caa382cf7ddef"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE test (c0, c1 TEXT);",
            "CREATE UNIQUE INDEX IF NOT EXISTS index_0 ON test(c1 == FALSE);",
            "CREATE INDEX IF NOT EXISTS index_1 ON test(c0 || FALSE) WHERE c1;",
            "INSERT OR IGNORE INTO test(c0, c1) VALUES ('a', TRUE);",
            "INSERT OR IGNORE INTO test(c0, c1) VALUES ('a', FALSE);",
            "PRAGMA legacy_file_format=true;",
            "REINDEX; -- Error: UNIQUE constraint failed: index 'index_0'"
        ],
        "title": "Multi-row insert circumvents index check"
    },
    {
        "date": "1/5/2019",
        "dbms": "SQLite",
        "links": {
            "email": "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084334.html",
            "fix": "https://www.sqlite.org/src/info/b043a54c3de54b28"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE test (c0 REAL);",
            "CREATE INDEX index_0 ON test(c0 COLLATE NOCASE);",
            "INSERT INTO test(c0) VALUES ('+/');",
            "SELECT * FROM test WHERE (c0 LIKE '+/'); -- fetches no row"
        ],
        "title": "COLLATE NOCASE index on REAL column malfunctions"
    },
    {
        "comment": "Note that this was not a bug in the code. Rather, the documentation was not very clear on this is.",
        "date": "2/5/2019",
        "dbms": "SQLite",
        "links": {
            "email": "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084347.html"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed (in documentation)",
        "test": [
            "CREATE TABLE test (c0 NOT NULL);",
            "INSERT INTO test(c0) VALUES (NULL) ON CONFLICT DO NOTHING; -- results in an error",
            "INSERT OR IGNORE INTO test(c0) VALUES (NULL); -- does not result in an error"
        ],
        "title": "UPSERT documentation issue"
    },
    {
        "date": "2/5/2019",
        "dbms": "SQLite",
        "links": {
            "email": "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084350.html",
            "fix": "https://www.sqlite.org/src/info/48889530a9de22fe"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE test (c0 REAL);",
            "CREATE UNIQUE INDEX index_0 ON test(TYPEOF(c0));",
            "INSERT OR IGNORE INTO test(c0) VALUES (0.1);",
            "INSERT OR IGNORE INTO test(c0) VALUES (FALSE);",
            "REINDEX; -- UNIQUE constraint failed: index 'index_0'"
        ],
        "title": "TYPEOF index on REAL column malfunctions"
    },
    {
        "date": "2/5/2019",
        "dbms": "SQLite",
        "links": {
            "email": "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084355.html",
            "fix": "https://www.sqlite.org/src/info/5a8a23ee5f60a31d"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "closed (duplicate)",
        "test": [
            "CREATE TABLE test (c0 REAL);",
            "CREATE UNIQUE INDEX index_0 ON test(TRIM(('' * c0)));",
            "INSERT INTO test(c0) VALUES (0.0), (0.1);",
            "REINDEX; -- UNIQUE constraint failed: index 'index_0'"
        ],
        "title": "Index on REAL column malfunctions when multiplying with a string"
    },
    {
        "comment": "As described in one of the commit messages for this fix, addressing this bug required a \"big change\" in the code.",
        "date": "3/5/2019",
        "dbms": "SQLite",
        "links": {
            "email": "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084366.html",
            "fix": "https://www.sqlite.org/src/info/5a8a23ee5f60a31d"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE test (c0 REAL);",
            "CREATE UNIQUE INDEX index_0 ON test(LENGTH(-c0));",
            "INSERT INTO test(c0) VALUES (0.0), ('10:');",
            "REINDEX; -- UNIQUE constraint failed: index 'index_0'"
        ],
        "title": "Problem with REAL values and string functions used in indexes or on expressions"
    },
    {
        "date": "3/5/2019",
        "dbms": "SQLite",
        "links": {
            "email": "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084367.html",
            "fix": "https://www.sqlite.org/src/info/5a8a23ee5f60a31d"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "closed (duplicate)",
        "test": [
            "CREATE TABLE test (c0 REAL);",
            "CREATE UNIQUE INDEX index_0 ON test(('0' GLOB -c0));",
            "INSERT INTO test(c0) VALUES (1.0), (0.0);",
            "REINDEX;"
        ],
        "title": "GLOB and minus in index and real column"
    },
    {
        "comment": "This issue was classified as \"severe\", was since 2013 in SQLite, and was a bug in the theorem prover.",
        "date": "4/5/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=5c6955204c",
            "email": "https://www.mail-archive.com/sqlite-users@mailinglists.sqlite.org/msg115136.html",
            "fix": "https://www.sqlite.org/src/info/c2e439bccc40825e211bf"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Severe",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "CREATE INDEX index_0 ON t0(c0) WHERE (~c0) NOT NULL;",
            "INSERT INTO t0(c0) VALUES (NULL);",
            "SELECT * FROM t0 WHERE (LIKELY(~c0) OR TRUE); -- no row fetched"
        ],
        "title": "Incorrect result on a table scan of a partial index"
    },
    {
        "date": "5/5/2019",
        "dbms": "SQLite",
        "links": {
            "email": "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084409.html"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "closed (duplicate)",
        "test": [
            "CREATE TABLE t1 (c0, c1 REAL, PRIMARY KEY (c1, c0));",
            "INSERT INTO t1(c1) VALUES (0X7ffffffffffffff);",
            "SELECT * FROM t1 WHERE c1 IN (SELECT c1 FROM t1);"
        ],
        "title": "REAL PRIMARY KEY and floating point comparison does not work"
    },
    {
        "date": "6/5/2019",
        "dbms": "SQLite",
        "links": {
            "email": "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084426.html",
            "fix": "https://sqlite.org/src/info/91f701d39852ef1ddb29"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0 (c0 INTEGER, PRIMARY KEY (c0)) WITHOUT ROWID;",
            "ALTER TABLE t0 RENAME COLUMN c0 TO c1; -- no such column: c0"
        ],
        "title": "ALTER TABLE fails when renaming an INTEGER PRIMARY KEY column in a WITHOUT ROWID table"
    },
    {
        "comment": "As described on the mailing list, this bug report exposed two bugs and required two different fixes.",
        "date": "7/5/2019",
        "dbms": "SQLite",
        "links": {
            "email": "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084439.html",
            "fix1": "https://www.sqlite.org/src/info/659c551dcc374a0d",
            "fix2": "https://www.sqlite.org/src/info/3f1c8051648a341d"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "PRAGMA foreign_keys=true;",
            "CREATE TABLE t0 (c0 UNIQUE, c1 UNIQUE, FOREIGN KEY(c0) REFERENCES t0(c1));",
            "INSERT OR FAIL INTO t0(c0, c1) VALUES (0, 1);",
            "INSERT OR FAIL INTO t0(c0, c1) VALUES (0, 2);",
            "SELECT * FROM t0; -- returns no row"
        ],
        "title": "INSERT OR FAIL inserts row although it violates a table constraint"
    },
    {
        "comment": "The bug was classified as \"severe\" and existed in SQLite since 2013.",
        "date": "7/5/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=9cf6c9bb51",
            "email": "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084460.html",
            "fix": "https://www.sqlite.org/src/info/658b84d7"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Severe",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "CREATE TABLE t1(c0 INTEGER PRIMARY KEY);",
            "PRAGMA reverse_unordered_selects=true;",
            "INSERT INTO t1(c0) VALUES (0);",
            "INSERT INTO t0(c0) VALUES ('a');",
            "SELECT * FROM t1, t0 WHERE t1.c0 < t0.c0; -- no row is fetched"
        ],
        "title": "Incorrect result for \"<\" and \"<=\" comparison of rowid and non-numeric text value"
    },
    {
        "date": "8/5/2019",
        "dbms": "SQLite",
        "links": {
            "email": "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084478.html",
            "fix": "https://www.sqlite.org/src/info/740201107ae802c1"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT UNIQUE COLLATE NOCASE);",
            "INSERT INTO t0(c0) VALUES ('./');",
            "SELECT * FROM t0 WHERE t0.c0 LIKE './'; -- fetches no rows"
        ],
        "title": "'./' LIKE './' does not match"
    },
    {
        "date": "9/5/2019",
        "dbms": "SQLite",
        "links": {
            "email": "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084480.html",
            "fix": "https://www.sqlite.org/src/info/ebe4845cd0ffb96b"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INTEGER PRIMARY KEY);",
            "INSERT INTO t0(c0) VALUES (1);",
            "PRAGMA reverse_unordered_selects=true;",
            "SELECT * FROM t0 WHERE ((t0.c0 > 'a') OR (t0.c0 <= 'a')); -- fetches no row",
            "SELECT ((t0.c0 > 'a') OR (t0.c0 <= 'a')) FROM t0; -- returns 1"
        ],
        "title": "Row is not fetched with PRAGMA reverse_unordered_selects=true"
    },
    {
        "comment": "This bug was classified as \"severe\" and existed in SQLite since 2015.",
        "date": "9/5/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview/6c1d3febc00b22d457c7",
            "email": "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084483.html",
            "fix": "https://www.sqlite.org/src/info/9b0915272f4d4052"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Severe",
        "status": "fixed",
        "test": [
            "CREATE TABLE t1 (c0, c1 REAL PRIMARY KEY);",
            "INSERT INTO t1(c0, c1) VALUES (TRUE, 9223372036854775807), (TRUE, 0);",
            "UPDATE t1 SET c0 = NULL;",
            "UPDATE OR REPLACE t1 SET c1 = 1;",
            "SELECT DISTINCT * FROM t1 WHERE (t1.c0 IS NULL); -- database disk image is malformed"
        ],
        "title": "Malformed database image when using a REAL PRIMARY KEY"
    },
    {
        "date": "10/5/2019",
        "dbms": "SQLite",
        "links": {
            "email": "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084497.html",
            "fix": "https://www.sqlite.org/src/info/db9acef14d492121"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SELECT 1e500 >= 1,  CAST(1e500 AS INT) >= CAST(1 AS INT), ROUND(1e500) >= ROUND(1); -- 1|1|0"
        ],
        "title": "Incorrect handling of Infinity by the ROUND function"
    },
    {
        "comment": "This bug was classified as \"critical\" and was in SQLite since 2013.",
        "date": "11/5/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://sqlite.org/src/tktview/80256748471a01",
            "email": "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084499.html",
            "fix": "https://sqlite.org/src/info/0ba6d709"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE TABLE IF NOT EXISTS t0 (c0);",
            "CREATE INDEX IF NOT EXISTS i0 ON t0(1) WHERE c0 NOT NULL;",
            "INSERT INTO t0(c0) VALUES(NULL);",
            "SELECT * FROM t0 WHERE t0.c0 IS NOT 1; -- returns no row"
        ],
        "title": "Partial NOT NULL index malfunctions with IS NOT/!="
    },
    {
        "date": "13/5/2019",
        "dbms": "SQLite",
        "links": {
            "email": "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084515.html"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "closed (not a bug)",
        "test": [
            "PRAGMA foreign_keys=true;",
            "CREATE TABLE t0 (c0 PRIMARY KEY);",
            "CREATE TEMP TABLE t1 (c0, FOREIGN KEY(c0) REFERENCES t0(c0));",
            "INSERT INTO t1(c0) VALUES (1); -- no such table: temp.t0"
        ],
        "title": "Mixing main and temp databases in foreign keys is not supported"
    },
    {
        "comment": "The bug highlights a conceptual issue in SQLite and cannot be fixed without breaking backward compatibility. The issue received its own name, namely the \"WITHOUT ROWID DESC PRIMARY KEY UNIQUE constraint index anomaly\". Nevertheless, as stated in the bug report, it is unlikely that real-world applications are affected.",
        "date": "13/5/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=bba7b69f98",
            "email": "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084528.html",
            "fix": "https://www.sqlite.org/src/info/f7aadfab3bb8eb8e"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0 (c0 PRIMARY KEY DESC, c1 UNIQUE DEFAULT NULL) WITHOUT ROWID;",
            "INSERT INTO t0(c0) VALUES (1), (2), (3), (4), (5);",
            "REINDEX;",
            "SELECT * FROM t0 WHERE t0.c0 IN (SELECT c0 FROM t0) AND t0.c1 ISNULL; -- fetches only one row instead of all five rows"
        ],
        "title": "REINDEX causes rows not to be fetched in a WITHOUT ROWIDs table and PRIMARY KEY DESC"
    },
    {
        "comment": "This bug was introduced while fixing another bug that I had previously found.",
        "date": "14/5/2019",
        "dbms": "SQLite",
        "links": {
            "email": "http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-May/084539.html",
            "fix": "https://www.sqlite.org/src/info/bc7d2c1656396bb4"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "PRAGMA reverse_unordered_selects=true;",
            "CREATE TABLE t1 (c0, c1); CREATE TABLE t2 (c0 INT UNIQUE);",
            "INSERT INTO t1(c0, c1) VALUES (0, 0), (0, NULL);",
            "INSERT INTO t2(c0) VALUES (1);",
            "SELECT 1, NULL INTERSECT SELECT * FROM (SELECT t2.c0, t1.c1 FROM t1, t2 WHERE ((t2.rowid <= 'a')) OR (t1.c0 <= t2.c0) ORDER BY 'a' DESC LIMIT 100); -- no row is fetched"
        ],
        "title": "PRAGMA reverse_unordered_selects=true results in row not being fetched"
    },
    {
        "date": "16/5/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=3c27b97e31",
            "fix": "https://www.sqlite.org/src/info/14c00b1016ba53ab"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0 (c0);",
            "CREATE TABLE t1 (c1 REAL);",
            "INSERT INTO t1(c1) VALUES (8366271098608253588);",
            "INSERT INTO t0(c0) VALUES ('a');",
            "SELECT * FROM t1 WHERE (t1.c1 = CAST(8366271098608253588 AS REAL)); -- fetches row",
            "SELECT * FROM t0, t1 WHERE (t1.c1 = CAST(8366271098608253588 AS REAL)); -- fetches no row",
            "SELECT * FROM t0, t1 WHERE (t1.c1 >= CAST(8366271098608253588 AS REAL) AND t1.c1 <= CAST(8366271098608253588 AS REAL)); -- fetches row"
        ],
        "title": "REAL rounding seems to depend on FROM clause"
    },
    {
        "comment": "Although this was not recognized as a bug, the bug report resulted in a documentation update and change in the default options for SQLite's defensive configuration.",
        "date": "16/5/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=f4ec250930",
            "fix": "https://www.sqlite.org/src/info/a0f5eb5c79cc33b7"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed (in documentation)",
        "test": [
            "PRAGMA journal_mode=OFF;",
            "PRAGMA main.cache_size=0;",
            "CREATE TABLE IF NOT EXISTS t0 (c0);",
            "CREATE INDEX i0 ON t0(1);",
            "DROP INDEX \"i0\";",
            "INSERT OR IGNORE INTO t0(c0) VALUES (1), (2);",
            "CREATE UNIQUE INDEX i0 ON t0(1); -- UNIQUE constraint failed: index 'i0'",
            "CREATE UNIQUE INDEX i0 ON t0(1); -- database disk image is malformed"
        ],
        "title": "Malformed image when using no journal mode, zero cache size, and failing when creating an index"
    },
    {
        "date": "18/5/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://sqlite.org/src/info/787fa716be3a7f650c",
            "fix": "https://sqlite.org/src/info/778b1224a318d013"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Severe",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0 (c0, c1, PRIMARY KEY (c0, c1));",
            "CREATE TABLE t1 (c0);",
            "INSERT INTO t1 VALUES (2);",
            "SELECT * FROM t0, t1 WHERE (t0.c1 >= 1 OR t0.c1 < 1) AND t0.c0 IN (1, t1.c0) ORDER BY 1; -- results in a segfault"
        ],
        "title": "Query results in a SEGFAULT"
    },
    {
        "comment": "This bug report resulted in a change of the accepted SQL dialect, disallowing strings in double quotes when creating indexes.",
        "date": "19/5/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview/9b78184be266fd7084e9e8038ad631a21b37eb9e",
            "fix1": "https://www.sqlite.org/src/info/1685610e",
            "fix2": "https://www.sqlite.org/src/info/3e1b55f3ab85710e"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Cosmetic",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c1, c2);",
            "INSERT INTO t0(c1, c2) VALUES  ('a', 1);",
            "CREATE INDEX i0 ON t0(\"C3\");",
            "ALTER TABLE t0 RENAME COLUMN c1 TO c3;",
            "SELECT DISTINCT * FROM t0; -- fetches C3|1 rather than a|1"
        ],
        "title": "Index on non-existing column results in a fabricated value being fetched"
    },
    {
        "comment": "This bug uncovered that the compiler somtimes confuses x IS TRUE with x IS FALSE, and the other way around.",
        "date": "19/5/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=d3e7f2ba5b",
            "fix": "https://www.sqlite.org/src/info/99eba69b3a64741c"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "INSERT INTO t0(c0) VALUES ('val');",
            "SELECT * FROM t0 WHERE (((0 IS NOT FALSE) OR NOT (0 IS FALSE OR (t0.c0 IN (-1)))) IS 0); -- fetches no row"
        ],
        "title": "Nested boolean formula with IN operator computes an incorrect result"
    },
    {
        "date": "21/5/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview/b5ca442af9fadf5eff5b2bf64839516ab82cfc3d",
            "fix": "https://www.sqlite.org/src/info/b8071d10cba8f6c1"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Cosmetic",
        "status": "fixed",
        "test": [
            "CREATE TABLE IF NOT EXISTS t0(c0);",
            "INSERT INTO t0(c0) VALUES (-9223372036854775808);",
            "BEGIN TRANSACTION;",
            "CREATE INDEX i0 ON t0(ABS(c0)); -- integer overflow (expected)",
            "COMMIT; -- unexpected: the index is still created",
            "CREATE INDEX i0 ON t0(1); -- malformed database schema (i0) - index i0 already exists"
        ],
        "title": "\"Malformed database schema\" when creating a failing index within a transaction"
    },
    {
        "date": "25/5/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=4c2d7639f0",
            "fix": "https://www.sqlite.org/src/info/67a68af5578f08d2"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "SELECT CAST('-' AS NUMERIC); -- unexpected: computes 0.0 rather than 0"
        ],
        "title": "CAST('-' AS NUMERIC) computes 0.0"
    },
    {
        "date": "25/5/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=e8bedb2a18",
            "fix": "https://www.sqlite.org/src/info/67a68af5578f08d2"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "SELECT '' - 2851427734582196970; -- actual: -2851427734582196736, expected: -2851427734582196970"
        ],
        "title": "Incorrect result when subtracting a large integer number from a TEXT value"
    },
    {
        "date": "08/06/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview/dd6bffbfb6e61db9ecc9ea833d586427961ccc9d",
            "fix": "https://www.sqlite.org/src/info/c0c90961b4fa1c11"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0 (c0 TEXT);",
            "INSERT INTO t0(c0) VALUES ('1.0');",
            "SELECT CAST(c0 AS NUMERIC) FROM t0; -- expected: 1, actual: 1.0"
        ],
        "title": "CAST to NUMERIC no longer converts to INTEGER"
    },
    {
        "date": "10/06/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview/fd76310a5e843e074a30ed98b859dd0be11d0276",
            "fix": "https://sqlite.org/src/info/567b13093956185b"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "CREATE INDEX i0 ON t0('1' IN ());",
            "ALTER TABLE t0 RENAME TO t1; -- error in index i0: no such column: 1"
        ],
        "title": "TEXT value interpreted as column name in an index with empty list in an IN expression"
    },
    {
        "date": "10/06/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=b1d8c79314",
            "fix": "https://sqlite.org/src/info/94b58ab059cba977"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT PRIMARY KEY COLLATE NOCASE);",
            "INSERT INTO t0 VALUES (' 1-');",
            "SELECT * FROM t0 WHERE t0.c0 LIKE ' 1-'; -- expected: ' 1-', actual: no row is fetched"
        ],
        "title": "LIKE malfunctions for INT PRIMARY KEY COLLATE NOCASE column"
    },
    {
        "date": "10/06/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=533010b8ca",
            "fix": "https://www.sqlite.org/src/info/71643deb"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE TABLE t1 (c0);",
            "CREATE INDEX i0 ON t1((LIKELIHOOD(c0, 100) IN ())); -- unexpected: no error",
            "ALTER TABLE t1 RENAME COLUMN c0 TO c1; -- error occurs only here: second argument to likelihood() must be a constant between 0.0 and 1.0"
        ],
        "title": "Illegal argument to LIKELIHOOD() does not result in error when combined with \"IN ()\""
    },
    {
        "date": "10/06/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=412bba9b22",
            "fix": "https://www.sqlite.org/src/info/57050162294efec9"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "SELECT -'.'; -- expected: 0, actual: 0.0"
        ],
        "title": "CAST('.' AS NUMERIC) computes 0.0 rather than 0"
    },
    {
        "date": "10/06/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview/d60b3cd7cb0bdff8ff39f76c9faf16ba2efa442f",
            "fix": "https://www.sqlite.org/docsrc/info/722f0828b3074e89"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed (in documentation)",
        "test": [
            "SELECT ((CAST(1 as INT)) COLLATE BINARY) == '1'; -- expected: 0, actual: 1"
        ],
        "title": "COLLATE expression has an affinity"
    },
    {
        "date": "10/06/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview/533010b8cacebe82533a8cd4e230fbb819565115",
            "fix": "https://www.sqlite.org/src/info/04bd5cb73287f926"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "CREATE INDEX i0 ON t0(((LIKELIHOOD(1, 2)) AND ((1 IN ())))); -- unexpected: no error",
            "ALTER TABLE t0 RENAME TO t1; -- -- error occurs only here: second argument to likelihood() must be a constant between 0.0 and 1.0"
        ],
        "title": "Another case of Illegal argument to LIKELIHOOD() does not result in error when combined with \"IN ()\""
    },
    {
        "date": "11/06/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=1819598c09",
            "fix": "https://www.sqlite.org/docsrc/info/e0f700bb6c8142c5"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed (in documentation)",
        "test": [
            "SELECT -'1.0'; -- expected: -1, actual: -1.0"
        ],
        "title": "-'1.0' computes -1.0 rather than -1"
    },
    {
        "date": "11/06/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=57353f8243",
            "fix": "https://www.sqlite.org/src/info/0f748fe58bbbb7ce"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "SELECT (1 IN (CAST('1' as TEXT) COLLATE NOCASE)); -- expected: 0, actual: 1"
        ],
        "title": "COLLATE expression in the right side of an IN operator results in an affinity conversion"
    },
    {
        "date": "11/06/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=afdc5a29dc",
            "fix": "https://www.sqlite.org/docsrc/info/7a51b32537ac7e95"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed (in documentation)",
        "test": [
            "SELECT CAST('8.2250617031974513E18' AS NUMERIC); -- expected: 8225061703197451300, unexpected: 8.22506170319745e+18"
        ],
        "title": "Lossless conversion when casting a large TEXT number to NUMERIC is not performed"
    },
    {
        "date": "11/06/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=0c620df60b",
            "fix": "https://www.sqlite.org/src/info/614ecb0af4703884"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "SELECT LIKELY(CAST(1 AS INT)) = '1'; -- expected: 0, actual: 1",
            "SELECT UNLIKELY(CAST(1 AS INT)) = '1'; -- expected: 0, actual: 1",
            "SELECT LIKELIHOOD(CAST(1 AS INT), 0.5) = '1'; -- expected: 0, actual: 1"
        ],
        "title": "LIKELY(), UNLIKELY() and LIKELIHOOD() have affinities"
    },
    {
        "date": "12/06/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=4d01eda811",
            "fix": "https://www.sqlite.org/src/info/5c6146b56a75a94f"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "SELECT 0.5 IS TRUE COLLATE NOCASE; -- expected: 1, actual: 0",
            "SELECT 0.5 IS TRUE COLLATE RTRIM; -- expected: 1, actual: 0",
            "SELECT 0.5 IS TRUE COLLATE BINARY; -- expected: 1, actual: 0"
        ],
        "title": "IS TRUE operator malfunctions with COLLATE and REAL value"
    },
    {
        "comment": "Opening this bug report also (indirectly) caused a discussion on the mailing list on how -0.0 should be printed by SQLite, with over 50 replies (see http://mailinglists.sqlite.org/cgi-bin/mailman/private/sqlite-users/2019-June/084857.html).",
        "date": "12/06/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview/674385aeba91c774d47736f1aefd259b074dc5d3",
            "fix": "https://www.sqlite.org/src/info/491f0f9bbddb6302"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "SELECT CAST('-0.0' AS NUMERIC); -- expected: 0, unexpected: 0.0"
        ],
        "title": "CAST('-0.0' AS NUMERIC) computes 0.0 rather than 0"
    },
    {
        "date": "12/06/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=b148fa6105",
            "fix": "https://www.sqlite.org/docsrc/info/9f887f15e57978df"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed (in documentation)",
        "test": [
            "CREATE TABLE t0(c0 COLLATE NOCASE);",
            "INSERT INTO t0(c0) VALUES ('a');",
            "SELECT * FROM t0 WHERE CAST(t0.c0 AS TEXT) = 'A'; -- expected: no row is fetched, actual: a"
        ],
        "title": "CAST takes implicit COLLATE of its operand"
    },
    {
        "date": "14/06/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=ce8717f088",
            "fix": "https://www.sqlite.org/src/info/b4a9e09e60213ccf"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Severe",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT UNIQUE COLLATE NOCASE);",
            "INSERT INTO t0(c0) VALUES ('.1%');",
            "SELECT * FROM t0 WHERE t0.c0 LIKE '.1%'; -- expected: '.1%', actual: no row is fetched"
        ],
        "title": "LIKE malfunctions for UNIQUE COLLATE NOCASE column"
    },
    {
        "comment": "This problem has existing in the RTRIM collating sequence since it was first introduced in 2008.",
        "date": "14/06/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=f1580ba1b5",
            "fix": "https://www.sqlite.org/src/info/86fa0087cd1f5c79"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 COLLATE RTRIM, c1 BLOB UNIQUE, PRIMARY KEY (c0, c1)) WITHOUT ROWID;",
            "INSERT INTO t0 VALUES (123, 3), (' ', 1), ('\t', 2), ('', 4);",
            "SELECT * FROM t0 WHERE c1 = 1; -- expected: ' ', 1, actual: no row is fetched"
        ],
        "title": "Built-in RTRIM collating sequence yields incorrect comparisons"
    },
    {
        "date": "15/06/2019",
        "dbms": "MySQL",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95820"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT UNIQUE, c1 INT, c2 INT UNIQUE) ENGINE = MyISAM;",
            "INSERT INTO t0(c0) VALUES(DEFAULT), (\"\");",
            "INSERT IGNORE INTO t0(c2) VALUES(\"a\");",
            "REPLACE INTO t0(c1, c0, c2) VALUES(1, DEFAULT, DEFAULT), (DEFAULT, \"a\", \"a\");",
            "REPAIR TABLE t0 QUICK EXTENDED USE_FRM;",
            "SELECT * FROM t0; -- unexpected: Table 'to' is marked as crashed and last (automatic?) repair failed"
        ],
        "title": "REPAIR TABLE on a functional table marks it as crashed"
    },
    {
        "date": "16/06/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=e1e07ef202",
            "fix": "https://www.sqlite.org/src/info/54110870487f7801"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0 (c3 TEXT);",
            "INSERT INTO t0(c3) VALUES ('0');",
            "SELECT * FROM t0 WHERE (t0.c3 COLLATE NOCASE) BETWEEN 1 AND '5'; -- expected: no row is fetched, actual: row is fetched"
        ],
        "title": "COLLATE in BETWEEN expression is ignored"
    },
    {
        "date": "18/06/2019",
        "dbms": "MySQL",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95856"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT UNIQUE, c1 INT, c2 INT, c3 INT UNIQUE) ENGINE = MyISAM;",
            "INSERT INTO t0(c0) VALUES(DEFAULT), (\"a\");",
            "INSERT IGNORE INTO t0(c3) VALUES(\"a\"), (1);",
            "REPLACE INTO t0(c1, c0, c3) VALUES(1, 2, 3), (1, \"a\", \"a\");",
            "SELECT (NULL) IN (SELECT t0.c3 FROM t0 WHERE t0.c0);"
        ],
        "title": "\"Can't find record\" error in SELECT statement 1 (MyISAM engine)"
    },
    {
        "date": "18/06/2019",
        "dbms": "MySQL",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95866"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT UNIQUE) ENGINE = HEAP;",
            "INSERT INTO t0(c0) VALUES (DEFAULT), (\"a\"), (\"a\");",
            "SELECT (NULL) IN (SELECT t0.c0 FROM t0 WHERE ((t0.c0) OR TRUE) IS NULL); -- unexpected: ERROR 1032 (HY000): Can't find record in 't0'"
        ],
        "title": "\"Can't find record\" error in SELECT statement 2 (HEAP engine)"
    },
    {
        "date": "20/06/2019",
        "dbms": "MySQL",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95889"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT UNSIGNED);",
            "INSERT INTO t0(c0) VALUES(4294967294);",
            "CREATE INDEX i0 ON t0((ABS(t0.c0))); -- unexpected: ERROR 3752 (22003): Value is out of range for functional index 'i0'"
        ],
        "title": "Functional index seems to malfunction with UNSIGNED column"
    },
    {
        "date": "20/06/2019",
        "dbms": "MySQL",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95894"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT PRIMARY KEY UNIQUE);",
            "ALTER TABLE t0 DROP PRIMARY KEY;",
            "select COLUMN_KEY, COLUMN_NAME from information_schema.columns where table_schema = 'a' and TABLE_NAME = 't0'; -- unexpected: c0 is still shown as PRI",
            "ALTER TABLE t0 DROP PRIMARY KEY; -- ERROR 1091 (42000): Can't DROP 'PRIMARY'; check that column/key exists"
        ],
        "title": "DROP PRIMARY KEY on UNIQUE PRIMARY KEY does not update information_schema.column"
    },
    {
        "date": "20/06/2019",
        "dbms": "MySQL",
        "false_positive": "yes",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95897"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "closed (not a bug)",
        "test": [
            "CREATE TABLE t0(c0 INT, c1 INT PRIMARY KEY);",
            "CREATE UNIQUE INDEX i0 ON t0((TRUE)) INVISIBLE;",
            "ALTER TABLE t0 DROP c1; -- unexpected: ERROR 3522 (HY000): A primary key index cannot be invisible"
        ],
        "title": "DROP COLUMN error on INVISIBLE UNIQUE INDEX that refers to constant expression"
    },
    {
        "comment": "We found this bug on the latest public version of MySQL. The bug report was closed, since the bug had already been fixed internally.",
        "date": "20/06/2019",
        "dbms": "MySQL",
        "fix_version": "8.0.17",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95900"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "closed (duplicate)",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0(c0) VALUES(1);",
            "SELECT * FROM t0 WHERE 123 != (NOT (NOT 123)); -- expected: row is fetched, actual: row is not fetched"
        ],
        "title": "Applying NOT twice on an integer results in wrong result in WHERE condition"
    },
    {
        "date": "21/06/2019",
        "dbms": "MySQL",
        "fix_version": "8.0.17",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95908"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 TINYINT);",
            "INSERT INTO t0(c0) VALUES(NULL);",
            "SELECT * FROM t0 WHERE NOT(t0.c0 <=> 2035382037); -- expected: row is fetched, actual: no row is fetched"
        ],
        "title": "The negation of a \"<=>\" comparison malfunctions depending on the column's type"
    },
    {
        "comment": "The bug was fixed in 8.0.17, but not necessarily based on our bug report, since it was not referenced.",
        "date": "22/06/2019",
        "dbms": "MySQL",
        "fix_version": "8.0.17",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95926"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0(c0) VALUES(1);",
            "SELECT * FROM t0 WHERE IF(FALSE, t0.c0, 0.1); -- expected: row is fetched, actual: row is not fetched"
        ],
        "title": "Row is not fetched when using a function expression that should yield TRUE"
    },
    {
        "date": "22/06/2019",
        "dbms": "MySQL",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95927"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SELECT FALSE XOR '0.5'; -- expected: 1, actual: 0"
        ],
        "title": "XOR operator returns incorrect result for strings with a floating-point number"
    },
    {
        "date": "22/06/2019",
        "dbms": "MySQL",
        "fix_version": "8.0.20",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95929"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT) ENGINE = MyISAM;",
            "select * from information_schema.TABLES; -- unexpected (when executed with multiple threads): Duplicate entry 'triggerbug21-t0' for key 'PRIMARY'"
        ],
        "title": "Duplicate entry for key 'PRIMARY' when querying information_schema.TABLES"
    },
    {
        "comment": "This bug report revealed a security vulnerability that was fixed in a Critical Patch Update (CVSSv3.0 Base Score: 4.9)",
        "cve": "CVE-2019-2879",
        "date": "23/06/2019",
        "dbms": "MySQL",
        "fix_version": "8.0.17",
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "DROP DATABASE IF EXISTS test;",
            "CREATE DATABASE test;",
            "USE test;",
            "CREATE TABLE t0(c0 INT);",
            "CREATE INDEX i0 ON t0((t0.c0 || 1));",
            "INSERT INTO t0(c0) VALUES(1);",
            "CHECK TABLE t0 FOR UPGRADE; -- results in a segfault when executed with multiple threads"
        ],
        "title": "CHECK TABLE FOR UPGRADE crashes server (segfault)"
    },
    {
        "date": "24/06/2019",
        "dbms": "MySQL",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95937"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed (in documentation)",
        "test": [
            "SELECT BENCHMARK(NULL, 1); -- expected: 0, actual: NULL",
            "SELECT BENCHMARK(-1, 1); -- expected: 0, actual: NULL"
        ],
        "title": "BENCHMARK() returns NULL in some cases but is documented to always return 0"
    },
    {
        "date": "24/06/2019",
        "dbms": "MySQL",
        "fix_version": "8.0.17",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95938"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 TEXT);",
            "INSERT IGNORE INTO t0(c0) VALUES(\"\\n123\");",
            "SELECT * FROM t0 WHERE COALESCE(t0.c0); -- expected: row is fetched, actual: no row is fetched",
            "SELECT * FROM t0 WHERE IFNULL(t0.c0, 1); -- expected: row is fetched, actual: no row is fetched"
        ],
        "title": "Function return value with newline yields wrong result when used as a boolean"
    },
    {
        "date": "24/06/2019",
        "dbms": "MySQL",
        "fix_version": "8.0.17",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95942"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 TEXT);",
            "INSERT INTO t0(c0) VALUES(0.9);",
            "SELECT * FROM t0 WHERE t0.c0; -- expected: row is fetched, actual: row is not fetched"
        ],
        "title": "TEXT column used as boolean incorrectly evaluates to false"
    },
    {
        "date": "24/06/2019",
        "dbms": "MySQL",
        "fix_version": "8.0.18",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95954"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 BIGINT UNSIGNED);",
            "INSERT INTO t0(c0) VALUES(NULL);",
            "SELECT * FROM t0 WHERE CAST(COALESCE(t0.c0, -1) AS UNSIGNED); -- expected: row is selected, actual: no row is selected",
            "SELECT * FROM t0 WHERE CAST(IFNULL(t0.c0, -1) AS UNSIGNED); -- expected: row is selected, actual: no row is selected"
        ],
        "title": "CAST of negative function return value to UNSIGNED malfunctions with BIGINT"
    },
    {
        "date": "24/06/2019",
        "dbms": "MySQL",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95957"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0(c0) VALUES(-1);",
            "SELECT t0.c0 IN (1, CAST(t0.c0 AS UNSIGNED)) from t0; -- expected: 0, actual: 1"
        ],
        "title": "IN operator issue when comparing signed column and the column cast to unsigned"
    },
    {
        "date": "24/06/2019",
        "dbms": "MySQL",
        "fix_version": "8.0.17",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95958"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 TEXT);",
            "INSERT INTO t0(c0) VALUES(\"0.5\");",
            "SELECT * FROM t0 WHERE t0.c0 AND 1; -- expected: 0.5, actual: no row is fetched",
            "SELECT * FROM t0 WHERE t0.c0 OR 0; -- expected: 0.5, actual: no row is fetched",
            "SELECT * FROM t0 WHERE t0.c0 XOR 0;  -- expected: 0.5, actual: no row is fetched"
        ],
        "title": "AND/OR/XOR compute wrong result for small floating-point numbers in TEXT columns"
    },
    {
        "date": "24/06/2019",
        "dbms": "MySQL",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95960"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SELECT '\\n1' & 1; -- expected: 1, actual: 0",
            "SELECT '\\n1' | 0; -- expected: 1, actual: 0",
            "SELECT '\\n1' ^ 1; -- expected: 0, actual: 1"
        ],
        "title": "The logical operators &, |, and ^ do not ignore newlines in TEXT"
    },
    {
        "date": "25/06/2019",
        "dbms": "MySQL",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95964"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 INT) ENGINE = MEMORY;",
            "INSERT INTO t0(c0) VALUES(0);",
            "INSERT INTO t1(c0) VALUES(-1);",
            "SELECT * FROM t0, t1 WHERE (CAST(t1.c0 AS UNSIGNED)) > (IFNULL(\"u\", t0.c0)); -- expected: row is fetched, actual: no row is fetched"
        ],
        "title": "Compare that uses UNSIGNED cast and function malfunctions in the MEMORY engine"
    },
    {
        "date": "25/06/2019",
        "dbms": "MySQL",
        "fix_version": "8.0.18",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95969"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SET SESSION sort_buffer_size = 18446744073709551615;",
            "CREATE TABLE t0(c0 INT UNIQUE, c1 INT UNIQUE);",
            "INSERT INTO t0(c0) VALUES(1), (2), (3);",
            "SELECT * FROM t0 WHERE NOT((t0.c1 IS NULL) AND ((t0.c0) != (1))); -- unexpected: ERROR 5 (HY000): Out of memory (Needed 24 bytes)"
        ],
        "title": "Setting sort_buffer_size to a large value causes query to go out of memory"
    },
    {
        "date": "25/06/2019",
        "dbms": "MySQL",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95975"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed (in documentation)",
        "test": [
            "SELECT \"a\" IN (0); -- expected: 0, actual: 1"
        ],
        "title": "Unexpected result for IN operator and constants"
    },
    {
        "date": "25/06/2019",
        "dbms": "MySQL",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95983"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT, c1 TEXT);",
            "INSERT INTO t0(c0, c1) VALUES(-1, \"a\");",
            "SELECT * FROM t0 WHERE t0.c1 < (t0.c0 & t0.c0) AND t0.c0 = -1; -- expected: fetches row, actual: does not fetch the row"
        ],
        "title": "Query involving &, <, and AND operators computes incorrect result"
    },
    {
        "date": "25/06/2019",
        "dbms": "MySQL",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95985"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "SET GLOBAL rbr_exec_mode = STRICT; -- unexpected: ERROR 1228 (HY000): Variable 'rbr_exec_mode' is a SESSION variable and can't be used with SET GLOBAL"
        ],
        "title": "SET GLOBAL on rbr_exec_mode fails"
    },
    {
        "date": "26/06/2019",
        "dbms": "MySQL",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95987"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "SET GLOBAL key_cache_division_limit = 100; -- unexpected: fails nondeterministically with ERROR 1210 (HY000): Incorrect arguments to SET"
        ],
        "title": "SET key_cache_* and key_buffer_* variables fails nondeterministically"
    },
    {
        "date": "26/06/2019",
        "dbms": "MySQL",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95997"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "closed (not a bug)",
        "test": [
            "CREATE TABLE t0(c0 VARCHAR(5));",
            "CREATE INDEX i0 ON t0((t0.c0 > 0));",
            "INSERT IGNORE INTO t0(c0) VALUES(\"a\");",
            "DELETE FROM t0; -- unexpected: ERROR 1292 (22007): Truncated incorrect DOUBLE value: 'a'"
        ],
        "title": "Index makes DELETE fail with \"Truncated incorrect DOUBLE value\""
    },
    {
        "date": "26/06/2019",
        "dbms": "MySQL",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=96010"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "closed (duplicate)",
        "test": [
            "CREATE TABLE t0(c3 INT PRIMARY KEY);",
            "CREATE INDEX i0 ON t0((\"a\" | 0));",
            "INSERT IGNORE INTO t0(c3) VALUES(1);",
            "DROP INDEX `PRIMARY` ON t0; -- unexpected: ERROR 1292 (22007): Truncated incorrect INTEGER value: 'a'"
        ],
        "title": "Non-unique functional index prevents PRIMARY KEY from being dropped"
    },
    {
        "date": "26/06/2019",
        "dbms": "MySQL",
        "fix_version": "8.0.18",
        "links": {
            "email": "https://bugs.mysql.com/bug.php?id=96012"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 TEXT);",
            "INSERT INTO t0(c0) VALUES (\"a\");",
            "SELECT * FROM t0 WHERE GREATEST((-1) & (-1), -t0.c0); -- expected: row is fetched, actual: row is not fetched"
        ],
        "title": "Query with GREATEST function malfunctions"
    },
    {
        "date": "29/06/2019",
        "dbms": "PostgreSQL",
        "links": {
            "email": "https://www.postgresql.org/message-id/CA%2Bu7OA6pL%2B7Xm_NXHLenxffe3tCr3gTamVdr7zPjcWqW0RFM-A%40mail.gmail.com"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "closed (not a bug)",
        "test": [
            "VACUUM FULL -- unexpected: ERROR: deadlock detected when executed with multiple threads"
        ],
        "title": "VACUUM FULL results in deadlock"
    },
    {
        "date": "02/06/2019",
        "dbms": "PostgreSQL",
        "links": {
            "email": "https://www.postgresql.org/message-id/CA%2Bu7OA4XYhc-qyCgJqwwgMGZDWAyeH821oa5oMzm_HEifZ4BeA%40mail.gmail.com"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "closed (not a bug)",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0(c0) VALUES(0), (0);",
            "CREATE UNIQUE INDEX CONCURRENTLY i0 ON t0(c0);",
            "ALTER TABLE t0 SET WITH OIDS; -- expected: no error, actual: ERROR:",
            "could not create unique index \"i0\" DETAIL:  Key (c0)=(0) is duplicated."
        ],
        "title": "ALTER TABLE SET WITH OIDS fails after failed CONCURRENTLY index creation"
    },
    {
        "date": "02/07/2019",
        "dbms": "PostgreSQL",
        "links": {
            "email": "https://www.postgresql.org/message-id/CA%2Bu7OA7VLKf_vEr6kLF3MnWSA9LToJYncgpNX2tQ-oWzYCBQAw%40mail.gmail.com",
            "fix": "https://github.com/postgres/postgres/commit/a5be4062f7bf2ae9487c5a31ee337a56425cdc84"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT PRIMARY KEY, c1 INT);",
            "CREATE TABLE t1(c0 INT) INHERITS (t0);",
            "INSERT INTO t0(c0, c1) VALUES(0, 0);",
            "INSERT INTO t1(c0, c1) VALUES(0, 1);",
            "SELECT c0, c1 FROM t0 GROUP BY c0, c1; -- expected: 0|0 and 0|1, actual: 0|0"
        ],
        "title": "GROUP BY and inheritance issue"
    },
    {
        "comment": "This bug was reproduced to occur in \"v11 and quite a large number of branches before that\". The bug was fixed \"somewhat accidentally\" for v12, but backporting the relevant patch was declared to be too invasive.",
        "date": "02/07/2019",
        "dbms": "PostgreSQL",
        "links": {
            "email": "https://www.postgresql.org/message-id/CA%2Bu7OA4CV21mUfwjQj3va7MWvqB2EAdJT31%3Duf_yArBRVzQjYw%40mail.gmail.com"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 boolean UNIQUE);",
            "CREATE INDEX i0 ON t0((nullif(FALSE, TRUE)));",
            "INSERT INTO t0(c0) VALUES(TRUE);",
            "SELECT * FROM t0 WHERE nullif(FALSE, TRUE) OR t0.c0; -- expected: row is fetched, actual: ERROR:  index key does not match expected index column"
        ],
        "title": "SELECT results in \"ERROR: index key does not match expected index column\""
    },
    {
        "date": "4/07/2019",
        "dbms": "PostgreSQL",
        "links": {
            "email": "https://www.postgresql.org/message-id/CA%2Bu7OA4JKCPFrdrAbOs7XBiCyD61XJxeNav4LefkSmBLQ-Vobg%40mail.gmail.com",
            "email 2": "https://www.postgresql.org/message-id/31920.1562526703%40sss.pgh.pa.us",
            "fix": "https://github.com/postgres/postgres/commit/a0555ddab9b672a04681ce0d9f6c94104c01b15f"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TEMP TABLE t0(c0 INT GENERATED ALWAYS AS IDENTITY) PARTITION BY HASH((t0.c0));",
            "VACUUM FULL;",
            "DISCARD TEMP; -- unexpected: ERROR: cache lookup failed for type 0"
        ],
        "title": "DISCARD TEMP results in \"ERROR: cache lookup failed for type 0\""
    },
    {
        "comment": "A fix for this seemed to be non-trivial and it was put on the \"back burner until we have some consensus how to proceed on that\".",
        "date": "4/07/2019",
        "dbms": "PostgreSQL",
        "links": {
            "email": "https://www.postgresql.org/message-id/CA%2Bu7OA4hkFSV_Y%3DsW_vNcYgKFEoq0WL5GtrBWEHUZnCqSqjhAA%40mail.gmail.com"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE UNIQUE INDEX i0 ON t0(c0);",
            "ALTER TABLE t0 ADD PRIMARY KEY USING INDEX i0, ALTER c0 TYPE BIGINT;",
            "-- unexpected: ERROR: could not open relation with OID 43707388"
        ],
        "title": "ALTER TABLE results in \"ERROR: could not open relation with OID 43707388\""
    },
    {
        "date": "07/07/2019",
        "dbms": "PostgreSQL",
        "links": {
            "email": "https://www.postgresql.org/message-id/CA%2Bu7OA7VT2YvyRz1FWXtr%2Bp9ayUxGEqB8xJOsJT%2BsywXVKVvGw%40mail.gmail.com"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "closed (not a bug)",
        "test": [
            "-- thread 1:",
            "\\c db1;",
            "CREATE TABLE t1(c0 int);",
            "INSERT INTO t1(c0) VALUES(2147483647);",
            "UPDATE t1 SET c0 = 0;",
            "CREATE INDEX i0 ON t1((1 + t1.c0));",
            "VACUUM FULL; -- unexpected: ERROR: integer out of range",
            "",
            "-- thread 2:",
            "DROP DATABASE db2;",
            "CREATE DATABASE db2;"
        ],
        "title": "VACUUM FULL results in ERROR: integer out of range"
    },
    {
        "date": "07/07/2019",
        "dbms": "PostgreSQL",
        "links": {
            "email": "https://www.postgresql.org/message-id/CA%2Bu7OA7mwhq7Xu9ZsaYOZ6aeodMiomKX0aMm8bbtYE%3DSyqSs_Q%40mail.gmail.com"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "closed (not a bug)",
        "test": [
            "CREATE TABLE t0(c0 CHAR(2));",
            "INSERT INTO t0(c0) VALUES('a');",
            "SELECT * FROM t0 WHERE c0 LIKE c0; -- expected: fetches the row, actual: does not fetch the row"
        ],
        "title": "Issue with CHAR column and \"column LIKE column\" condition"
    },
    {
        "date": "10/07/2019",
        "dbms": "PostgreSQL",
        "links": {
            "email": "https://www.postgresql.org/message-id/CA%2Bu7OA6AD9OLziFW%2Bio1HgN8q_XH0o1Y5RyufXYO5%3D0fnhG5zQ%40mail.gmail.com"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "closed (not a bug)",
        "test": [
            "CREATE TABLE t0(c0 TEXT GENERATED ALWAYS AS (('abc' || 1)) STORED); -- unexpected: generation expression is not immutable"
        ],
        "title": "Generated column and string concatenation issue"
    },
    {
        "comment": "Tom Lane commented this find with \"nifty\". :-)",
        "date": "10/07/2019",
        "dbms": "PostgreSQL",
        "links": {
            "email": "https://www.postgresql.org/message-id/CA%2Bu7OA7W4NWEhCvftdV6_8bbm2vgypi5nuxfnSEJQqVKFSUoMg%40mail.gmail.com",
            "fix": "https://github.com/postgres/postgres/commit/d3751adcf14d3baacc9738ee9ce869dc1c31d7ad"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "-- requires another open transaction holding a snapshot",
            "CREATE TABLE t0(c0 TEXT);",
            "INSERT INTO t0(c0) VALUES('b'), ('a');",
            "ANALYZE;",
            "INSERT INTO t0(c0) VALUES (NULL);",
            "UPDATE t0 SET c0 = 'a';",
            "CREATE INDEX i0 ON t0(c0);",
            "SELECT * FROM t0 WHERE 'baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' > t0.c0; -- unexpected: ERROR: found unexpected null value in index \"i0\""
        ],
        "title": "ERROR: found unexpected null value in index"
    },
    {
        "comment": "Later on this day, another bug report was opened on this: https://www.postgresql.org/message-id/flat/20190711150822.z7cirna2fjtrfcnu%40development#d05c216fb9f3d27e3b69520666b043c6. Although we reported the bug first, the second bug reporter, rather than us, was credited. Although we asked for a clarification on the mailing list (see https://www.postgresql.org/message-id/CA%2Bu7OA6RsonbT1S06TaO99QDL2H8zS-N2jO%3DwSuqAOJLX5yQSg%40mail.gmail.com), we did not receive any response.",
        "date": "10/07/2019",
        "dbms": "PostgreSQL",
        "links": {
            "email": "https://www.postgresql.org/message-id/CA%2Bu7OA7fmtm3kR%2BY6Mgr9djU3WeOsMzQLWtNPMvoEVSm%3Dr9XaQ%40mail.gmail.com"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 BOOLEAN, c1 BOOLEAN, UNIQUE(c1));",
            "CREATE STATISTICS s1 ON c0, c1 FROM t0;",
            "INSERT INTO t0(c0) VALUES(TRUE);",
            "ANALYZE t0;",
            "SELECT * FROM t0 WHERE (t0.c0 AND t0.c1) >= TRUE; -- ERROR:  negative bitmapset member not allowed"
        ],
        "title": "ERROR: negative bitmapset member not allowed in SELECT",
        "version": "12beta2"
    },
    {
        "comment": "We received a response that this had already been fixed in commit 2322456.",
        "date": "10/07/2019",
        "dbms": "PostgreSQL",
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "closed (duplicate)",
        "test": [
            "-- 16 threads create and drop databases, the other threads execute the following:",
            "CREATE TABLE t0(c1 integer);",
            "INSERT INTO t0(c1) VALUES(0), (0), (0), (0), (0);",
            "BEGIN;",
            "DELETE FROM t0;",
            "INSERT INTO t0(c1) VALUES (0);",
            "ANALYZE;"
        ],
        "title": "SEGFAULT in 12beta2 release",
        "version": "12beta2"
    },
    {
        "comment": "We received a response that this had already been fixed in commit 2322456.",
        "date": "11/07/2019",
        "dbms": "PostgreSQL",
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "closed (duplicate)",
        "test": [
            "CREATE TABLE t0(c0 INTEGER, c1 BIGINT, c2 SERIAL);",
            "INSERT INTO t0(c1, c0) VALUES(-1709938800, 945157321), (9427841, -1121735885), (-462902431, -1516553180), (-1182718924, 567434112), (77957572, -1630604045);",
            "INSERT INTO t0(c1) VALUES(1396592526);",
            "INSERT INTO t0(c2) VALUES(690098393), (1277882261), (1624303238);",
            "CREATE STATISTICS s0 ON c1, c0 FROM t0;",
            "CREATE STATISTICS s1 ON c2, c1 FROM t0;",
            "INSERT INTO t0(c2, c1, c0) VALUES(1047328172, -928052494, -1495150353), (1594411273, -1849045190, -1504843935);",
            "INSERT INTO t0(c0, c1) VALUES(-2024782141, -1507193801), (307326616, 1000588716);",
            "INSERT INTO t0(c0) VALUES(-1390942911);",
            "ANALYZE;",
            "CREATE STATISTICS s2 ON c2, c1 FROM t0;",
            "ANALYZE;",
            "CREATE STATISTICS s3 ON c0, c1 FROM t0;",
            "ANALYZE;",
            "CREATE STATISTICS s4 ON c2, c0 FROM t0;",
            "UPDATE t0 SET c1 = -17924667, c0 = DEFAULT WHERE FALSE;",
            "CREATE STATISTICS s5 ON c0, c1 FROM t0;",
            "TRUNCATE TABLE t0;",
            "CREATE STATISTICS s6 ON c2, c0 FROM t0;",
            "INSERT INTO t0(c1) VALUES(-1891295280), (337846372), (-376532870), (-1428386312), (815718779);",
            "INSERT INTO t0(c1, c0, c2) VALUES(-1750298826, -1400767611, 1631979167), (197446074, -2025988029, 965481790);",
            "INSERT INTO t0(c0, c1, c2) VALUES(-343412265, 1761686185, 478065767), (-1200264761, 1389476944, -848006704);",
            "CREATE STATISTICS s7 ON c0, c1 FROM t0;",
            "ANALYZE;",
            "ANALYZE;",
            "BEGIN;",
            "ANALYZE;"
        ],
        "title": "Stack buffer overflow in 12beta2 release",
        "version": "12beta2"
    },
    {
        "date": "14/07/2019",
        "dbms": "PostgreSQL",
        "links": {
            "email": "https://www.postgresql.org/message-id/CA%2Bu7OA40Fe9%3DA3wQ2PHWy8VZg8%3DGpD6dxQXeXVDx6HAhRSPeRA%40mail.gmail.com"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "closed (duplicate)",
        "test": [
            "CREATE TABLE t0(c0 BOOLEAN, c1 TEXT);",
            "CREATE STATISTICS s1 ON c0, c1 FROM t0;",
            "INSERT INTO t0(c0) VALUES (FALSE);",
            "VACUUM ANALYZE t0;",
            "SELECT * FROM t0 WHERE t0.c0 OR '' >= t0.c1 COLLATE \"C\"; -- unexpected: segfault"
        ],
        "title": "SELECT with COLLATE results in segfault on trunk and 12 Beta 2",
        "version": "12beta2"
    },
    {
        "date": "15/07/2019",
        "dbms": "PostgreSQL",
        "links": {
            "email": "https://www.postgresql.org/message-id/CA%2Bu7OA4XKjVv86MTUHZYzzdQAgPOPJDSuA5HrD8%2BxkNQsnAsAQ%40mail.gmail.com"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "closed (duplicate)",
        "test": [
            "CREATE TABLE t0(c0 TEXT, c1 TEXT, PRIMARY KEY(c0, c1));",
            "CREATE TABLE t1(c0 TEXT, c1 TEXT, FOREIGN KEY (c0, c1) REFERENCES t0(c0, c1));",
            "CREATE STATISTICS s0 ON c0, c1 FROM t0;",
            "INSERT INTO t0(c1, c0) VALUES('a', 'a'), ('b', 'a'), ('c', 'a'), ('d', 'a'), ('e', 'a'), ('f', 'a');",
            "ANALYZE;",
            "UPDATE t0 SET c0 = 'b';"
        ],
        "title": "UPDATE causes segfault on trunk",
        "version": "12beta2"
    },
    {
        "date": "16/07/2019",
        "dbms": "PostgreSQL",
        "links": {
            "email": "https://www.postgresql.org/message-id/CA%2Bu7OA6zYX7qfkGGDfqeFwuh6HbD4B-0fmOfx13Jm4xsp3s%3D-Q%40mail.gmail.com"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "closed (not a bug)",
        "test": [
            "CREATE TABLE t0(c0 TEXT);",
            "CREATE INDEX i0 ON t0(c0) WHERE ((FALSE BETWEEN SYMMETRIC TRUE AND (t0.c0 || t0.c0 IN (t0.c0, t0.c0, '1', t0.c0 || t0.c0, t0.c0 || t0.c0 || t0.c0))) BETWEEN SYMMETRIC TRUE AND TRUE) BETWEEN SYMMETRIC TRUE AND TRUE; -- ERROR:  row is too big: size 8440, maximum size 8160"
        ],
        "title": "BETWEEN SYMMETRIC condition results in \"row is too big: ..., maximum size 8160\"",
        "version": "13trunk"
    },
    {
        "date": "17/07/2019",
        "dbms": "PostgreSQL",
        "links": {
            "email": "https://www.postgresql.org/message-id/CA%2Bu7OA5Hp0ra235F3czPom_FyAd-3%2BXwSJmX95r1%2BsRPOJc9VQ%40mail.gmail.com",
            "fix": "https://github.com/postgres/postgres/commit/a904abe2e284f570168839e52e18ef0b7f26179d"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INTEGER , c1 BOOLEAN);",
            "INSERT INTO t0(c0, c1) VALUES(1369652450, FALSE), (414515746, TRUE), (897778963, FALSE);",
            "CREATE UNIQUE INDEX i0 ON t0((1 / t0.c0)) WHERE ('-H') >= (t0.c1::TEXT) COLLATE \"C\";",
            "REINDEX TABLE CONCURRENTLY t0;",
            "ALTER TABLE t0 ALTER c1 TYPE TEXT; -- could not create unique index \"i0\" DETAIL:  Key ((1 / c0))=(0) is duplicated."
        ],
        "title": "REINDEX CONCURRENTLY causes ALTER TABLE to fail",
        "version": "13trunk"
    },
    {
        "date": "23/07/2019",
        "dbms": "MySQL",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=96294"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "closed (duplicate)",
        "test": [
            "SELECT CAST('\\n1' AS UNSIGNED); -- expected: 1, actual: 0",
            "-- also see the examples below:",
            "-- SELECT CAST('\\n1' AS SIGNED); -- expected: 1, actual: 0",
            "-- SELECT CAST('\\t  1' AS SIGNED); -- 1",
            "-- SELECT CAST('\\n1' AS REAL); -- 1",
            "-- SELECT CAST('\\n1' AS FLOAT); -- 1",
            "-- SELECT CAST('\\n1' AS DECIMAL); -- 1"
        ],
        "title": "CAST of STRING with newlines to SIGNED/UNSIGNED returns unexpected result",
        "version": "8.0.17"
    },
    {
        "date": "23/07/2019",
        "dbms": "MySQL",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=96295"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "closed (duplicate)",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE INDEX i0 ON t0(('a' = t0.c0));",
            "INSERT IGNORE INTO t0(c0) VALUES(1);",
            "ALTER TABLE t0 DISABLE KEYS, DELAY_KEY_WRITE 0; -- ERROR 3751 (01000): Data truncated for functional index 'i0'"
        ],
        "title": "DISABLE KEYS, DELAY_KEY_WRITE results in \"Data truncated for functional index\"",
        "version": "8.0.17"
    },
    {
        "date": "24/07/2019",
        "dbms": "PostgreSQL",
        "links": {
            "bugtracker": "https://www.postgresql.org/message-id/CA%2Bu7OA69sgyCE0VhEpgZLBkR4X0frA2%3Dar8brntoH1vcvi-%2BWA%40mail.gmail.com"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "closed (duplicate)",
        "test": [
            "CREATE TABLE t0(c0 boolean , c1 integer);",
            "CREATE TABLE t1(c0 boolean, c1 integer) INHERITS(t0);",
            "INSERT INTO t0(c1) VALUES (0);",
            "CREATE STATISTICS s0 ON c0, c1 FROM t0;",
            "ANALYZE t0; -- unexpected: ERROR:  tuple already updated by self"
        ],
        "title": "ANALYZE on parent table results in an error \"tuple already updated by self\""
    },
    {
        "date": "24/07/2019",
        "dbms": "PostgreSQL",
        "links": {
            "bugtracker": "https://www.postgresql.org/message-id/flat/CA%2Bu7OA6RmQLwvXGxx0nGt3T79Ka5MkOJs4_qcdx6X5c-rR_yNg%40mail.gmail.com"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "closed (duplicate)",
        "test": [
            "CREATE TABLE t0(c0 VARCHAR(10));",
            "INSERT INTO t0(c0) VALUES('');",
            "ALTER TABLE t0 ALTER c0 SET DATA TYPE TEXT, ADD EXCLUDE (('a' LIKE t0.c0) WITH =); -- unexpected: ERROR:  attribute 1 of type t0 has wrong type"
        ],
        "title": "Attribute has wrong type in ALTER TABLE"
    },
    {
        "date": "24/07/2019",
        "dbms": "PostgreSQL",
        "links": {
            "email": "https://www.postgresql.org/message-id/flat/CA%2Bu7OA6Zs6bZmuakbLv4%3D7VBOYpBsyswpb7A3hN%3Dn%2BKO0_z0pQ%40mail.gmail.com"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "closed (not a bug)",
        "test": [
            "CREATE TABLE t0(c0 boolean);",
            "CREATE TABLE t1(c0 boolean) INHERITS(t0);",
            "ALTER TABLE t0 ADD CHECK(t0.c0); -- unexpected: ERROR:  missing FROM-clause entry for table \"t0\""
        ],
        "title": "ADD CHECK fails for parent table if column used in CHECK is fully-qualified"
    },
    {
        "date": "27/07/2019",
        "dbms": "PostgreSQL",
        "links": {
            "email": "https://www.postgresql.org/message-id/flat/CA%2Bu7OA4qogDv9rz1HAb-ADxttXYPqQdUdPY_yd4kCzywNxRQXA%40mail.gmail.com"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 boolean);",
            "CREATE TABLE t1(c0 boolean);",
            "CREATE TABLE t2(c0 boolean) INHERITS(t0, t1);",
            "ALTER TABLE t0 ALTER c0 TYPE TEXT;",
            "UPDATE t1 SET c0 = TRUE; -- ERROR:  attribute \"c0\" of relation \"t2\"does not match parent's type"
        ],
        "title": "Multiple inheritance and ALTER TABLE issue"
    },
    {
        "date": "29/07/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=18ab5da2c0"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "closed (not a bug)",
        "test": [
            "CREATE TABLE t0(c0 COLLATE RTRIM);",
            "INSERT INTO t0(c0) VALUES (' ');",
            "SELECT DISTINCT(t0.c0) != '' FROM t0; -- expected: 1, actual: 0"
        ],
        "title": "Issue with DISTINCT and COLLATE"
    },
    {
        "date": "29/07/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=ba2f4585cf",
            "fix": "https://www.sqlite.org/src/info/2b221bb15fd2b9f6"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Severe",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0 (c0 REAL, c1);",
            "CREATE UNIQUE INDEX i0 ON t0(c1, 0 | c0);",
            "INSERT INTO t0(c0) VALUES (4750228396194493326), (0);",
            "UPDATE OR REPLACE t0 SET c0 = 'a', c1 = '';",
            "SELECT * FROM t0 ORDER BY t0.c1; -- unexpected: database disk image is malformed"
        ],
        "title": "Query with ORDER BY results in \"database disk image is malformed\" error"
    },
    {
        "date": "29/07/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=ccbe5759fb",
            "fix": "https://www.sqlite.org/src/info/6ac0f822450b26c7"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0 (c0, c1, c2, PRIMARY KEY (c0, c1));",
            "CREATE TABLE t1 (c2);",
            "INSERT INTO t0(c2) VALUES (0), (1), (3), (4), (5), (6), (7), (8), (9), (10), (11);",
            "INSERT INTO t0(c1) VALUES ('a');",
            "INSERT INTO t1(c2) VALUES (0);",
            "ANALYZE;",
            "SELECT DISTINCT t0.c0, t1._rowid_, t0.c1 FROM t1 CROSS JOIN t0 ON TRUE ORDER BY t0.c0; -- expected: |1|, |1|a, actual: |1|"
        ],
        "title": "ANALYZE causes DISTINCT to malfunction in CROSS JOIN"
    },
    {
        "date": "30/07/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=ced41c7c7d",
            "fix": "https://www.sqlite.org/src/info/a871d69c6de65038"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Severe",
        "status": "fixed",
        "test": [
            "CREATE TABLE t1 (c1 , c2, c3, c4 , PRIMARY KEY (c4, c3));",
            "INSERT INTO t1(c3) VALUES (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (NULL), (1), (0);",
            "UPDATE t1 SET c2 = 0;",
            "INSERT INTO t1(c1) VALUES (0), (0), (NULL), (0), (0);",
            "ANALYZE t1;",
            "UPDATE t1 SET c3 = 1;",
            "SELECT DISTINCT * FROM t1 WHERE t1.c3 = 1; -- expected: |0|1|, 0||1|, ||1|, actual: |0|1|"
        ],
        "title": "Query with DISTINCT does not fetch all distinct rows"
    },
    {
        "date": "02/07/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=41866dc373",
            "fix": "https://www.sqlite.org/src/info/faaaae4940b5f4f7"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 UNIQUE, c1);",
            "INSERT INTO t0(c0, c1) VALUES (NULL, 1);",
            "SELECT MIN(t0.c0), t0.c1 FROM t0; -- expected: NULL | 1, actual: NULL | NULL"
        ],
        "title": "MIN() malfunctions for UNIQUE column"
    },
    {
        "comment": "This bug was fixed 11 years after it was introduced.",
        "date": "03/08/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=71e183cab6",
            "fix": "https://www.sqlite.org/src/info/d465c3ee"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0 (c0, c1);",
            "CREATE INDEX i0 ON t0(c1, c1 + 1 DESC);",
            "INSERT INTO t0(c0) VALUES (1);",
            "SELECT MIN(t0.c1), t0.c0 FROM t0 WHERE t0.c1 ISNULL; -- expected: NULL | 1, actual: NULL | NULL"
        ],
        "title": "MIN() malfunctions for a query with ISNULL condition"
    },
    {
        "date": "05/08/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=d52a29a9e6",
            "fix": "https://www.sqlite.org/src/info/9c8c1092a8ce80e1"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0, c1 TEXT);",
            "CREATE VIEW v0(c0) AS SELECT SUM(t0.c1) FROM t0;",
            "INSERT INTO t0(c0, c1) VALUES ('a', 1);",
            "SELECT * FROM v0, t0 WHERE t0.c1 <= v0.c0; -- unexpected: row is not fetched"
        ],
        "title": "Unexpected affinity conversion in view"
    },
    {
        "date": "05/08/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=61c853857f",
            "fix1": "https://www.sqlite.org/src/info/09cd0c0c6e6c963e",
            "fix2": "https://www.sqlite.org/src/info/470ac8d50ce2f7cc",
            "fix3": "https://www.sqlite.org/src/info/e15a0977ddfad3d0"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 TEXT, c1);",
            "INSERT INTO t0(c0, c1) VALUES (-1, 0);",
            "CREATE VIEW v0(c0, c1) AS SELECT t0.c0, AVG(t0.c1) FROM t0;",
            "SELECT * FROM v0 WHERE v0.c1 < v0.c0; -- unexpected: row is not fetched"
        ],
        "title": "Row is not fetched in SELECT from VIEW"
    },
    {
        "date": "06/08/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=0a5e2c1dcb",
            "fix": "https://www.sqlite.org/src/info/17b3d2218c02a400"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 TEXT);",
            "CREATE VIEW v0(c0) AS SELECT t0.c0 FROM t0;",
            "INSERT INTO t0(c0) VALUES ('0');",
            "SELECT 0 IN (c0) FROM v0; -- expected: 0, actual: 1"
        ],
        "title": "Unexpected affinity conversion for view column in IN operator"
    },
    {
        "date": "07/08/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=f8a7060ece",
            "fix": "https://www.sqlite.org/src/info/94085fb3"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 UNIQUE, c1);",
            "INSERT INTO t0(c1) VALUES (0);",
            "INSERT INTO t0(c0) VALUES (0);",
            "CREATE VIEW v0(c0, c1) AS SELECT t0.c1, t0.c0 FROM t0 WHERE CAST(t0.rowid AS INT) = 1;",
            "SELECT v0.c0, MIN(v0.c1) FROM v0; -- expected: 0|, actual: |"
        ],
        "title": "Incorrect result for query that uses MIN() and a CAST on rowid"
    },
    {
        "date": "10/08/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=9080b6227f",
            "fix": "https://www.sqlite.org/src/info/da01ba4fa47c6508"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "INSERT INTO t0(c0) VALUES (0);",
            "CREATE INDEX i0 ON t0(NULL > c0) WHERE (NULL NOT NULL);",
            "SELECT * FROM t0 WHERE ((NULL IS FALSE) IS FALSE); -- expected: row is fetched: actual: row is not fetched"
        ],
        "title": "Constant expression in partial index results in row not being fetched"
    },
    {
        "date": "14/08/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=17db54d744"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "closed (not a bug)",
        "test": [
            "CREATE TABLE t0(c0);",
            "CREATE TRIGGER tr0 AFTER DELETE ON t0 WHEN c0 BEGIN DELETE FROM t0; END;",
            "DELETE FROM t0; -- unexpected: no such column: c0"
        ],
        "title": "Unexpected error in DELETE with existing trigger"
    },
    {
        "date": "15/08/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=256741a16b",
            "fix": "https://www.sqlite.org/src/info/4f5b2d938194fab7"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "INSERT INTO t0(c0) VALUES (0);",
            "SELECT * FROM t0 WHERE EXISTS (SELECT MIN(c0)  OVER (), CUME_DIST() OVER () FROM t0) BETWEEN 1 AND 1;"
        ],
        "title": "Null pointer dereference caused by window functions in result-set of EXISTS(SELECT ...)"
    },
    {
        "date": "17/08/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=6710d2f7a1",
            "fix": "https://www.sqlite.org/src/info/500c9152daaf11cf"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "CREATE VIEW v0(c0) AS SELECT TYPEOF(1) FROM t0;",
            "INSERT INTO t0(c0) VALUES (0), (1);",
            "SELECT * FROM t0 LEFT JOIN v0 ON t0.c0 WHERE NOT(v0.c0 = 'a'); -- unexpected: fetches no row"
        ],
        "title": "LEFT JOIN fails to fetch row"
    },
    {
        "date": "17/08/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=c7a1171907",
            "fix": "https://www.sqlite.org/src/info/43e8b143"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "CREATE VIEW v0(c0) AS SELECT LOWER(CAST('1e500' AS TEXT)) FROM t0;",
            "INSERT INTO t0(c0) VALUES (NULL);",
            "SELECT v0.c0 FROM v0, t0 WHERE t0.rowid NOT IN (0, 0, v0.c0); -- expected: '1e500', actual: Inf"
        ],
        "title": "WHERE clause erroneously influences value of fetched column from view"
    },
    {
        "date": "20/08/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=f043b1130b",
            "fix": "https://www.sqlite.org/src/info/511da081"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0 (c0, c1);",
            "CREATE INDEX i0 ON t0(CAST(c0 AS NUMERIC));",
            "INSERT INTO t0(c0, c1) VALUES ('a', -1);",
            "SELECT * FROM t0 INDEXED BY i0 WHERE CAST(t0.c0 AS NUMERIC) > LOWER(t0.c1) GROUP BY t0.rowid; -- expected: row is fetched, actual: no row is fetched"
        ],
        "title": "INDEXED BY results in row not being fetched"
    },
    {
        "date": "21/08/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=b86894020e",
            "fix": "https://www.sqlite.org/src/info/d02490a2"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0 (c0, c1 NOT NULL DEFAULT 1, c2, PRIMARY KEY (c0, c1));",
            "INSERT INTO t0(c2) VALUES (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL);",
            "INSERT INTO t0(c2) VALUES ('a');",
            "ANALYZE t0;",
            "SELECT DISTINCT * FROM t0 WHERE NULL IS t0.c0; -- unexpected: |1|a is not part of the result set"
        ],
        "title": "DISTINCT malfunctions for IS NULL"
    },
    {
        "date": "22/08/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=d9f584e936",
            "fix": "https://www.sqlite.org/src/info/81b9f0f55042777b"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1 TEXT);",
            "INSERT INTO t0(c0, c1) VALUES (1, 'a');",
            "SELECT * FROM t0 WHERE '-1' BETWEEN 0 AND t0.c0; -- expected: 1|a, actual: no row is fetched"
        ],
        "title": "Row is not fetched in table with INTEGER PRIMARY KEY"
    },
    {
        "date": "22/08/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=ac184eb571",
            "fix": "https://www.sqlite.org/src/info/e62eddbb048cbc2c"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 TEXT UNIQUE, c1);",
            "INSERT INTO t0(c0) VALUES (-1);",
            "SELECT * FROM t0 WHERE - x'ce' >= t0.c0; -- unexpected: row is not fetched"
        ],
        "title": "Row with comparison on TEXT UNIQUE column is not fetched"
    },
    {
        "date": "22/08/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=7e07a3dbf5",
            "fix": "https://www.sqlite.org/src/info/44578865fa7baf97"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0 (c0);",
            "INSERT INTO t0(c0) VALUES ('a');",
            "SELECT * FROM t0 WHERE LIKELY(t0.rowid) <= '0'; -- unexpected: row is not fetched"
        ],
        "title": "LIKELY() seems to cause unexpected affinity conversion for rowid"
    },
    {
        "date": "27/08/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=dbaf8a6820",
            "fix": "https://www.sqlite.org/src/info/7f5168a76a400fc2"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT UNIQUE);",
            "INSERT INTO t0(c0) VALUES (1);",
            "SELECT * FROM t0 WHERE '1' IN (t0.c0); -- unexpected: fetches row"
        ],
        "title": "Unexpected affinity conversion is performed for the IN operator"
    },
    {
        "date": "28/08/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=51f5b6e427"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "status": "closed (not a bug)",
        "test": [
            "CREATE TABLE t0 (c0);",
            "INSERT INTO t0(c0) VALUES (-9223372036854775808);",
            "SELECT FALSE AND ABS(t0.c0) FROM t0; -- unexpected: integer overflow"
        ],
        "title": "Short-circuit evaluation issue"
    },
    {
        "date": "30/08/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=a6408d42b9",
            "fix": "https://www.sqlite.org/src/info/45ff2b1f2693bb02"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "INSERT INTO t0(c0) VALUES (NULL);",
            "CREATE INDEX i0 ON t0(1) WHERE c0 NOT NULL;",
            "SELECT * FROM t0 WHERE (t0.c0 IS FALSE) IS FALSE; -- unexpected: row is not fetched"
        ],
        "title": "Partial index causes row to not be fetched"
    },
    {
        "date": "30/08/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=fba33c8b1d",
            "fix": "https://www.sqlite.org/src/info/057fb8b1809b8b9c"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c1);",
            "CREATE INDEX i0 ON t0(1) WHERE c1 NOTNULL;",
            "INSERT INTO t0(c1) VALUES (NULL);",
            "SELECT * FROM t0 WHERE t0.c1 IS FALSE BETWEEN FALSE AND TRUE; -- unexpected: row is not fetched"
        ],
        "title": "Partial index causes row to not be fetched in BETWEEN expression"
    },
    {
        "date": "30/08/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=f8f472cbc7",
            "fix": "https://www.sqlite.org/src/info/057fb8b1809b8b9c"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0 (c0);",
            "CREATE INDEX i0 ON t0(1) WHERE c0 NOT NULL;",
            "INSERT INTO t0(c0) VALUES (NULL);",
            "SELECT * FROM t0 WHERE '' BETWEEN t0.c0 AND 1 IN (FALSE); -- unexpected: row is not fetched"
        ],
        "title": "Partial index and BETWEEN issue"
    },
    {
        "date": "30/08/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=5a3dba8104",
            "fix": "https://www.sqlite.org/src/info/67381dadede98a55"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 REAL UNIQUE, c1);",
            "CREATE UNIQUE INDEX i0 ON t0(0 || c1);",
            "INSERT INTO t0(c0, c1) VALUES (1, 2),  (2, 1);",
            "INSERT INTO t0(c0) VALUES (1) ON CONFLICT(c0) DO UPDATE SET c1=excluded.c0;",
            "REINDEX; -- unexpected: UNIQUE constraint failed: index 'i0'"
        ],
        "title": "REINDEX causes \"UNIQUE constraint failed\" error"
    },
    {
        "date": "02/09/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=57af00b664",
            "fix": "https://www.sqlite.org/src/info/0658c16e311393c8"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 REAL, c1 TEXT);",
            "CREATE INDEX i0 ON t0(+c0, c0);",
            "INSERT INTO t0(c0) VALUES(0);",
            "SELECT CAST(+ t0.c0 AS BLOB) LIKE 0 FROM t0; -- expected: 0, actual: 1"
        ],
        "title": "Expression computed on row yields incorrect result"
    },
    {
        "date": "02/09/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=2841e99d10",
            "fix": "https://www.sqlite.org/src/info/88833a9c2849c959"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 REAL UNIQUE);",
            "INSERT INTO t0(c0) VALUES(2.07093491255203046E18);",
            "SELECT * FROM t0 WHERE c0 IN ('2070934912552030444'); -- unexpected: row is fetched"
        ],
        "title": "Different rounding when converting TEXT to REAL"
    },
    {
        "date": "03/09/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=29f635e0af",
            "fix": "https://www.sqlite.org/src/info/6e7b4527d32cc1be"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 TEXT, c1 REAL, c2, PRIMARY KEY(c2, c0, c1));",
            "CREATE INDEX i0 ON t0(c1 IN (c0));",
            "INSERT INTO t0(c0, c2) VALUES (0, NULL) ON CONFLICT(c2, c1, c0) DO NOTHING;",
            "UPDATE t0 SET c2 = x'';",
            "SELECT * FROM t0 WHERE t0.c2 IS NULL; -- unexpected: row is fetched"
        ],
        "title": "IS NULL unexpectedly evaluates to TRUE"
    },
    {
        "date": "03/09/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=767a8cbc6d",
            "fix": "https://www.sqlite.org/src/info/5351e920f489562f"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 COLLATE NOCASE, c1);",
            "CREATE INDEX i0 ON t0(0) WHERE c0 >= c1;",
            "REPLACE INTO t0 VALUES('a', 'B');",
            "SELECT * FROM t0 WHERE t0.c1 <= t0.c0; -- unexpected: row is not fetched"
        ],
        "title": "COLLATE NOCASE string comparison yields incorrect result"
    },
    {
        "date": "09/09/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=a7debbe0ad",
            "fix": "https://www.sqlite.org/src/info/b9ec72203c19c2b9"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "INSERT INTO t0(c0) VALUES('');",
            "CREATE VIEW v2(c0, c1) AS SELECT 'B' COLLATE NOCASE, 'a' FROM t0 ORDER BY t0.c0;",
            "SELECT SUM(count) FROM (SELECT v2.c1 BETWEEN v2.c0 AND v2.c1 as count FROM v2); -- expected: 0, actual: 1"
        ],
        "title": "BETWEEN issue in view"
    },
    {
        "date": "10/09/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=c4130c33be"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "status": "closed (not a bug)",
        "test": [
            "CREATE TABLE t0(c0);",
            "INSERT INTO t0(c0) VALUES (0.0), (0);",
            "CREATE VIEW v0(c0) AS SELECT DISTINCT c0 FROM t0;",
            "SELECT * FROM v0; -- expected: 0.0, 0, actual: 0.0"
        ],
        "title": "DISTINCT malfunctions for VIEW"
    },
    {
        "date": "11/09/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=18458b1ad6",
            "fix": "https://www.sqlite.org/src/info/36997c4ade2ef3a2"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 COLLATE NOCASE);",
            "INSERT INTO t0(c0) VALUES ('B');",
            "CREATE VIEW v0(c0, c1) AS SELECT DISTINCT t0.c0, 'a' FROM t0;",
            "SELECT v0.c1 >= v0.c0 FROM v0; -- actual: 1, expected: 0"
        ],
        "title": "COLLATE issue in view"
    },
    {
        "date": "16/09/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=0f0428096f",
            "fix": "https://www.sqlite.org/src/info/6fe0367f9a337b7c"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 UNIQUE);",
            "INSERT INTO t0 VALUES (-1);",
            "SELECT * FROM t0 WHERE t0.c0 GLOB '-*'; -- unexpected: row is not fetched"
        ],
        "title": "GLOB unexpectedly does not match"
    },
    {
        "date": "17/09/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=587791f926",
            "fix": "https://www.sqlite.org/src/info/3fb40f518086c1e8"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 PRIMARY KEY, c1);",
            "INSERT INTO t0(c0) VALUES (x'bb'), (0);",
            "SELECT COUNT(*) FROM t0 WHERE INSTR(x'aabb', t0.c0) ORDER BY t0.c0, t0.c1; -- 1",
            "SELECT * FROM t0 WHERE INSTR(x'aabb', t0.c0) ORDER BY t0.c0, t0.c1; -- no row is fetched"
        ],
        "title": "Row is not fetched when using WHERE clause with INSTR()"
    },
    {
        "comment": "We reported this bug on the security mailing list where it was stated that \"next week it'd have been a security issue [since a new PostgreSQL version would have been released], perhaps, but since v12 isn't formally released yet I don't think we need to treat it as one.",
        "date": "24/09/2019",
        "dbms": "PostgreSQL",
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 integer, c1 integer GENERATED ALWAYS AS (t0.c0) STORED);",
            "CREATE TABLE t1(LIKE t0 INCLUDING DEFAULTS);",
            "INSERT INTO t1(c0) VALUES(NULL);"
        ],
        "title": "INSERT INTO causes segfault on trunk"
    },
    {
        "date": "07/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=b2d4edaffd",
            "fix": "https://www.sqlite.org/src/info/3cde82c86b963fa7"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "INSERT INTO t0(c0) VALUES (0);",
            "CREATE VIEW v0(c0) AS SELECT t0.rowid FROM t0 ORDER BY 1;",
            "SELECT COUNT(*) FROM v0 WHERE ABS('1') = v0.c0; -- expected: 1, actual: 0"
        ],
        "title": "Comparison on view malfunctions"
    },
    {
        "comment": "After we reported this bug, a test case for the same bug was found using a fuzzer and reported on the SQLite mailing list",
        "date": "07/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=8fe768e9c9",
            "fix": "https://www.sqlite.org/src/info/31e85fbbc4cfd09a"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
            "BEGIN TRANSACTION;",
            "INSERT INTO vt0(c0) VALUES (NULL);",
            "ALTER TABLE t0 ADD COLUMN c5 REAL;",
            "INSERT INTO vt0(vt0) VALUES('integrity-check'); -- unexpected: database disk image is malformed"
        ],
        "title": "FTS integrity-check malfunctions"
    },
    {
        "date": "07/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=265e935b26",
            "fix": "https://www.sqlite.org/src/info/8ab0aebdb3c2d6fb"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE VIRTUAL TABLE vt0 USING fts5(a);",
            "PRAGMA reverse_unordered_selects = true;",
            "INSERT INTO vt0 VALUES('365062398'), (0), (0);",
            "INSERT INTO vt1(vt1, rank) VALUES('pgsz', '38');",
            "UPDATE vt0 SET a = 399905135; -- unexpected: database disk image is malformed",
            "INSERT INTO vt1(vt1) VALUES('integrity-check');"
        ],
        "title": "FTS pgsz option results in \"database disk image is malformed\" error"
    },
    {
        "date": "07/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=e258f008ce",
            "fix": "https://www.sqlite.org/src/info/238e0835714696ab"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
            "INSERT INTO vt0(c0) VALUES (NULL);",
            "BEGIN TRANSACTION;",
            "INSERT INTO vt0(vt0) VALUES('rebuild');",
            "INSERT INTO vt0(vt0) VALUES('rebuild');",
            "INSERT INTO vt0(vt0) VALUES('integrity-check'); -- database disk image is malformed"
        ],
        "title": "FTS rebuild in transaction causes integrity-check to fail"
    },
    {
        "date": "01/10/2019",
        "dbms": "TDEngine",
        "links": {
            "bugtracker": "https://github.com/taosdata/TDengine/issues/586"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE DATABASE db tables 1;",
            "USE db;",
            "CREATE TABLE t0(c0 TIMESTAMP, c1 int);",
            "CREATE TABLE t1(c0 TIMESTAMP, c1 int);",
            "DROP DATABASE db;",
            "CREATE DATABASE db;",
            "USE db;",
            "CREATE TABLE t0(c0 TIMESTAMP, c1 int);",
            "CREATE TABLE t1(c0 TIMESTAMP, c1 int);"
        ],
        "title": "DROP DATABASE seems to leave behind a table when using the \"tables\" configuration option"
    },
    {
        "date": "02/10/2019",
        "dbms": "TDEngine",
        "links": {
            "bugtracker": "https://github.com/taosdata/TDengine/issues/589"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 TIMESTAMP, c1 BINARY(1));",
            "INSERT INTO t0(c0, c1) VALUES (0, \"-\");"
        ],
        "title": "Inserting the \"+\" and \"-\" strings fails"
    },
    {
        "date": "03/10/2019",
        "dbms": "TDEngine",
        "links": {
            "bugtracker": "https://github.com/taosdata/TDengine/issues/590"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "open",
        "test": [
            "CREATE TABLE t0(c0 TIMESTAMP, c1 NCHAR(1));",
            "INSERT INTO t0(c0, c1) VALUES(0, \"a\");",
            "SELECT * FROM t0 WHERE c1 = \"a\";"
        ],
        "title": "The \"<>\" and \"=\" operators do not work for NCHAR columns"
    },
    {
        "date": "03/10/2019",
        "dbms": "TDEngine",
        "links": {
            "bugtracker": "https://github.com/taosdata/TDengine/issues/591"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "open",
        "test": [
            "CREATE TABLE t0(c0 TIMESTAMP, c1 INT);",
            "INSERT INTO t0 VALUES(0, 1);",
            "SELECT * FROM t0 WHERE c1=(c1*1);"
        ],
        "title": "Unexpected result when using arithmetic expressions in WHERE clause"
    },
    {
        "date": "09/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=81a7f7b9e2",
            "fix": "https://www.sqlite.org/src/info/75775c5ab44e497c"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE VIRTUAL TABLE vt0 USING fts5(c0, c1);",
            "INSERT INTO vt0(vt0, rank) VALUES('pgsz', '70000');",
            "INSERT INTO vt0(c0) VALUES (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0);",
            "UPDATE vt0 SET c1 = 'T,D&p^y/7#3*v<b<4j7|f';",
            "INSERT INTO vt0(vt0) VALUES('integrity-check'); -- database disk image is malformed"
        ],
        "title": "FTS integrity-check indicates that the database disk image is malformed"
    },
    {
        "date": "09/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=d392017c8e",
            "fix": "https://www.sqlite.org/src/info/86e497209217abb7"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "PRAGMA reverse_unordered_selects = true;",
            "CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
            "INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 2000);",
            "INSERT INTO vt0(vt0, rank) VALUES('automerge', 0);",
            "INSERT INTO vt0(c0) VALUES (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0),(0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0);",
            "INSERT INTO vt0(vt0) VALUES('rebuild'); -- database or disk is full"
        ],
        "title": "FTS rebuild in combination with crisismerge results in error \"database or disk is full\""
    },
    {
        "date": "09/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=a976c487d1",
            "fix": "https://www.sqlite.org/src/info/eb7ed90b8a65748f"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c1);",
            "CREATE TABLE t1(c0);",
            "CREATE VIEW v0 AS SELECT c1 FROM t1 LEFT JOIN t0;",
            "INSERT INTO t1 VALUES (1);",
            "SELECT * FROM v0 WHERE NOT(v0.c1 IS FALSE); -- expected: row is fetched, actual: no row is fetched"
        ],
        "title": "LEFT JOIN in view malfunctions"
    },
    {
        "date": "10/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=c31034044b",
            "fix": "https://www.sqlite.org/src/info/7833feecfe745e23"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "CREATE TABLE t1(c1);",
            "INSERT INTO t0(c0) VALUES(0);",
            "CREATE VIEW v0(c0) AS SELECT t1.c1 FROM t0 LEFT JOIN t1;",
            "SELECT * FROM v0 WHERE v0.c0 NOTNULL NOTNULL; -- expected: row is fetched, actual: no row is fetched"
        ],
        "title": "LEFT JOIN in view malfunctions with NOTNULL"
    },
    {
        "date": "11/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=8a6fa2bb22",
            "fix": "https://www.sqlite.org/src/info/5863546df99abd1a"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE VIRTUAL TABLE vt0 USING fts4(c0, order=DESC);",
            "INSERT INTO vt0(c0) VALUES (0), (0);",
            "INSERT INTO vt0(vt0) VALUES('integrity-check'); --database disk image is malformed"
        ],
        "title": "FTS order=DESC results into integrity-check failing"
    },
    {
        "date": "11/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=745f1abcdc",
            "fix": "https://www.sqlite.org/src/info/4ed905b18847d4db"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE VIRTUAL TABLE vt0 USING fts4(c0, prefix=1);",
            "BEGIN;",
            "INSERT INTO vt0 VALUES (0);",
            "INSERT INTO vt0(vt0) VALUES('optimize');",
            "INSERT INTO vt0(vt0) VALUES('integrity-check'); -- database disk image is malformed"
        ],
        "title": "FTS integrity-check malfunctions for transaction and the prefix option"
    },
    {
        "date": "11/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=278ac14262",
            "fix": "https://www.sqlite.org/src/info/629e20c9880acc2c"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "minor",
        "status": "fixed",
        "test": [
            "CREATE VIRTUAL TABLE vt0 USING fts4(c0);",
            "INSERT INTO vt0 VALUES (x'00');",
            "INSERT INTO vt0(vt0) VALUES('integrity-check'); -- database disk image is malformed"
        ],
        "title": "FTS integrity_check fails when inserting x'00'"
    },
    {
        "date": "16/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=a8a4847a2d",
            "fix": "https://www.sqlite.org/src/info/eea1e7aa57e74c43"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "PRAGMA recursive_triggers = true;",
            "CREATE TABLE t0(c0 UNIQUE);",
            "CREATE TRIGGER tr0 AFTER DELETE ON t0 BEGIN INSERT INTO t0 VALUES(0); END;",
            "INSERT OR REPLACE INTO t0(c0) VALUES(0), (0);",
            "REINDEX; -- UNIQUE constraint failed: t0.c0"
        ],
        "title": "Trigger inserts duplicate value in UNIQUE column"
    },
    {
        "date": "17/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=bf1aab8978",
            "fix": "https://www.sqlite.org/src/info/35beaee059a6ccce"
        },
        "oracle": "hang",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE VIRTUAL TABLE vt0 USING fts4(c0, order=DESC);",
            "INSERT INTO vt0(c0) VALUES (0);",
            "INSERT INTO vt0(c0) VALUES (0);",
            "UPDATE vt0 SET c0 = NULL;",
            "INSERT INTO vt0(vt0) VALUES('merge=1,4'); -- unexpected: does not terminate"
        ],
        "title": "FTS merge does not terminate"
    },
    {
        "date": "21/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=7fc8e5ff25"
        },
        "oracle": "hang",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "closed (not a bug)",
        "test": [
            "CREATE TABLE t0(c0, c1, PRIMARY KEY (c0, c1));",
            "INSERT INTO t0(c0) VALUES (0), (1), (2), (3), (4), (5);",
            "CREATE TRIGGER tr1 BEFORE DELETE ON t0 FOR EACH ROW BEGIN",
            "\tDELETE FROM t0 WHERE t0.c1;",
            "\tINSERT INTO t0(c0) VALUES (6), (7), (8), (9), (10);",
            "END;",
            "CREATE TRIGGER tr0 BEFORE INSERT ON t0 BEGIN",
            "\tDELETE FROM t0;",
            "\tDELETE FROM t0;",
            "\tDELETE FROM t0;",
            "END;",
            "INSERT INTO t0(c1) VALUES (0), (1), (2); -- unexpected: does not terminate"
        ],
        "title": "INSERT into table with two triggers does not terminate"
    },
    {
        "date": "22/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=b47e3627ec",
            "fix": "https://www.sqlite.org/src/info/90f7c477354d67d2"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 COLLATE NOCASE, c1);",
            "INSERT INTO t0 VALUES('a', 'A');",
            "SELECT * FROM t0 WHERE (+ t0.c1, 1) >= (t0.c0, 1); -- expected: row is not fetched, actual: row is fetched"
        ],
        "title": "Comparison of row values results in incorrect result"
    },
    {
        "date": "22/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=b47e3627ec",
            "fix": "https://www.sqlite.org/src/info/c7da1c01f1f239e6"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 COLLATE NOCASE, c1);",
            "INSERT INTO t0 VALUES('a', 'A');",
            "SELECT * FROM t0 WHERE (+ t0.c1, 1) >= (t0.c0, 1); -- expected: row is not fetched, actual: row is fetched"
        ],
        "title": "Comparison of row values results in incorrect result (incomplete fix)"
    },
    {
        "date": "22/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=6ef984af89",
            "fix": "https://www.sqlite.org/src/info/5c118617cf08e17a"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 TEXT PRIMARY KEY);",
            "INSERT INTO t0(c0) VALUES ('');",
            "SELECT * FROM t0 WHERE (t0.c0, TRUE) > (CAST('' AS REAL), FALSE); -- unexpected: row is not fetched"
        ],
        "title": "Row value comparison yields incorrect result"
    },
    {
        "date": "23/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=135c9da751",
            "fix": "https://www.sqlite.org/src/info/978b2d20cf95d0b7"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 UNIQUE);",
            "INSERT INTO t0(c0) VALUES('a');",
            "SELECT * FROM t0 WHERE (t0.c0, 0) < ('B' COLLATE NOCASE, 0); -- unexpected: row is not fetched"
        ],
        "title": "Comparison of row values with COLLATE NOCASE yields incorrect result"
    },
    {
        "date": "24/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=50c09fc2cf",
            "fix": "https://www.sqlite.org/src/info/521f1d3628254948"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Severe",
        "status": "fixed",
        "test": [
            "PRAGMA recursive_triggers = true;",
            "CREATE TABLE t0(c0, c1, c2 UNIQUE);",
            "CREATE UNIQUE INDEX i0 ON t0(c1) WHERE c0;",
            "CREATE TRIGGER tr0 AFTER DELETE ON t0 BEGIN DELETE FROM t0; END;",
            "INSERT INTO t0(c2) VALUES(-1572226132);",
            "INSERT INTO t0(c0) VALUES(1), (1);",
            "REPLACE INTO t0(c0, c1, c2) VALUES(2, 0, 0xffffffffa249bbac); -- unexpected: SEGFAULT"
        ],
        "title": "Crash on REPLACE INTO of a table with an AFTER DELETE trigger"
    },
    {
        "date": "24/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=dd1f67bf25",
            "fix": "https://www.sqlite.org/src/info/8d964e1c21d4cea6"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "minor",
        "status": "fixed",
        "test": [
            "CREATE VIRTUAL TABLE vt0 USING fts5(c0, tokenize = \"ascii\", prefix = 1);",
            "INSERT INTO vt0(c0) VALUES (x'd1');",
            "INSERT INTO vt0(vt0) VALUES('integrity-check'); -- unexpected error: database disk image is malformed"
        ],
        "title": "FTS integrity-check malfunctions nondeterministically with tokenize=\"ascii\""
    },
    {
        "date": "25/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=c1e19e1204",
            "fix": "https://www.sqlite.org/src/info/fbac0c65d8464b12"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Severe",
        "status": "fixed",
        "test": [
            "PRAGMA temp.recursive_triggers = true;",
            "CREATE TABLE t0(c0, c1 UNIQUE);",
            "CREATE TRIGGER c BEFORE DELETE ON t0;",
            "BEGIN INSERT INTO t0(c1) VALUES(1);",
            "END;",
            "INSERT INTO t0(c1) VALUES(0);",
            "REPLACE INTO t0(c1) VALUES (0);",
            "SELECT t0.c1 BETWEEN 0 AND (CASE WHEN 1 THEN 1 ELSE t0.c0 END NOT NULL) FROM t0; -- expected: 1 and 1, actual: 1"
        ],
        "title": "Trigger causes query to compute incorrect result"
    },
    {
        "date": "26/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=3ea1755124",
            "fix": "https://www.sqlite.org/src/info/5b4c0f2ddc6f324e"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0, c1 TEXT GENERATED ALWAYS AS (1) UNIQUE);",
            "INSERT INTO t0(c0) VALUES (1);",
            "REINDEX;",
            "INSERT INTO t0(c0) VALUES (0);",
            "REINDEX; -- unexpected: UNIQUE constraint failed"
        ],
        "title": "REINDEX causes \"UNIQUE constraint failed\" error for generated column"
    },
    {
        "date": "27/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=91e8695101",
            "fix": "https://www.sqlite.org/src/info/6d1bbba9a004a249"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INTEGER PRIMARY KEY GENERATED ALWAYS AS(1), c1 UNIQUE GENERATED ALWAYS AS(1), c2 UNIQUE);",
            "INSERT INTO t0 VALUES(NULL); -- Segmentation fault"
        ],
        "title": "Segfault in table with generated columns"
    },
    {
        "date": "29/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://sqlite.org/src/tktview?name=9621dd78a0",
            "fix": "https://sqlite.org/src/info/361ea81ae8a13e7d"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "PRAGMA temp_store = MEMORY;",
            "CREATE TEMP TABLE t0(c0, c1 AS(1) CHECK(NULL) UNIQUE NOT NULL, c2 CHECK(1.0) PRIMARY KEY) WITHOUT ROWID;",
            "CREATE UNIQUE INDEX e ON t0(CAST(0.0 AS INT)) WHERE 0;",
            "REINDEX;",
            "INSERT INTO t0(c2) VALUES (0), (1);",
            "REPLACE INTO t0(c2, c0) VALUES (0, 0), (x'9b', NULL);",
            "UPDATE t0 SET c2 = 0; -- Segmentation fault"
        ],
        "title": "Segfault when updating table with generated columns"
    },
    {
        "date": "29/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://sqlite.org/src/tktview?name=166347c6fc",
            "fix": "https://sqlite.org/src/info/4fba090e678ef184"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 AS(1));",
            "CREATE INDEX i0 ON t0(0 DESC);",
            "PRAGMA legacy_file_format = true;",
            "VACUUM; -- table vacuum_db.t0 has 0 columns but 1 values were supplied"
        ],
        "title": "VACUUM issue on table with generated column"
    },
    {
        "comment": "This bug report made the SQLite developers remove the PRAGMA legacy_file_format option.",
        "date": "29/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://sqlite.org/src/tktview?name=6484e6ce67",
            "fix": "https://sqlite.org/src/info/4d424f3047b48fc4"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 AS(1), c1);",
            "PRAGMA legacy_file_format = true;",
            "CREATE INDEX i0 ON t0(0 DESC);",
            "VACUUM; -- table vacuum_db.t0 has 1 columns but 2 values were supplied"
        ],
        "title": "VACUUM on table with generated column results in an error"
    },
    {
        "date": "31/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://sqlite.org/src/tktview?name=1d2a8efc6c",
            "fix": "https://sqlite.org/src/info/329820673a12ff6a"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 AS(TYPEOF(c1)), c1);",
            "INSERT INTO t0(c1) VALUES(0);",
            "VACUUM; -- table vacuum_db.t0 has 1 columns but 2 values were supplied"
        ],
        "title": "VACUUM on table with generated column that uses TYPEOF results in an error"
    },
    {
        "date": "31/10/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://sqlite.org/src/tktview?name=b9befa4b83",
            "fix": "https://sqlite.org/src/info/40d3282ec285d9f7"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0, c1, c2 AS(1), PRIMARY KEY(c0) FOREIGN KEY(c2) REFERENCES t0);",
            "CREATE VIRTUAL TABLE vt0 USING fts4;",
            "CREATE INDEX i0 ON t0(c2, 0 BETWEEN '' AND c1 COLLATE BINARY, CASE '' WHEN c3 THEN 0 WHEN 0 THEN 0 WHEN '' THEN 0 WHEN 0 THEN c0 ELSE c1 END);",
            "INSERT INTO t0 VALUES (0, 0), ('', 0);",
            "PRAGMA foreign_keys = true;",
            "ANALYZE;",
            "UPDATE t0 SET c1 = c0; -- unexpected: Segmentation fault"
        ],
        "title": "Segfault in table with generated column and foreign key"
    },
    {
        "date": "1/11/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://sqlite.org/src/tktview?name=c28a01da72",
            "fix": "https://sqlite.org/src/info/bc6a43e7ee6353b9"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0 (c0, c1 a UNIQUE AS (1), c2, c3, FOREIGN KEY(c3) REFERENCES t0(c1));",
            "CREATE VIRTUAL TABLE vt0 USING fts4(c0);",
            "PRAGMA foreign_keys = true;",
            "INSERT INTO vt0 VALUES (0);",
            "REPLACE INTO t0(c3, c2, c0) VALUES (0, 0, 0), (0, 0, 0); -- Segmentation fault"
        ],
        "title": "REPLACE causes segfault in table with generated column and foreign key"
    },
    {
        "date": "2/11/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://sqlite.org/src/tktview?name=a9efb42811",
            "fix": "https://sqlite.org/src/info/17e9f65814264de9"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Severe",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "CREATE INDEX i0 ON t0(0) WHERE c0 GLOB c0;",
            "INSERT INTO t0 VALUES (0);",
            "CREATE UNIQUE INDEX i1 ON t0(0);",
            "CREATE UNIQUE INDEX i2 ON t0(0);",
            "REPLACE INTO t0 VALUES(0);",
            "SELECT COUNT(*) FROM t0 WHERE t0.c0 GLOB t0.c0; -- expected: 1, actual: 2"
        ],
        "title": "Incorrect result for GLOB operator"
    },
    {
        "date": "3/11/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://sqlite.org/src/tktview?name=623eff57e7",
            "fix": "https://sqlite.org/src/info/3be19e1151af1850"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "CREATE TABLE t1(c0);",
            "INSERT INTO t1(c0) VALUES (0);",
            "CREATE INDEX i0 ON t0(0) WHERE NULL IN (c0);",
            "CREATE VIEW v0(c0) AS SELECT t0.c0 FROM t1 LEFT JOIN t0;",
            "SELECT COUNT(*) FROM v0 WHERE NULL IN (v0.c0); -- expected: 0, actual: 1"
        ],
        "title": "LEFT JOIN in view malfunctions with partial index on table"
    },
    {
        "date": "3/11/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://sqlite.org/src/tktview?name=3c9eadd2a6",
            "fix": "https://www.sqlite.org/src/info/c5f96a085db9688a"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 CHECK(ABS(-9223372036854775808)));",
            "PRAGMA integrity_check; -- unexpected: integer overflow"
        ],
        "title": "PRAGMA integrity_check fails due to CHECK constraint even without records"
    },
    {
        "date": "4/11/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://sqlite.org/src/tktview?name=02aa2bd02f",
            "fix": "https://sqlite.org/src/info/ea20068e6d97c934"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "CREATE TABLE t1(c0);",
            "CREATE VIEW v0(c0) AS SELECT t0.c0 FROM t1 LEFT JOIN t0;",
            "INSERT INTO t1(c0) VALUES (0);",
            "SELECT * FROM v0 WHERE (v0.c0, x'') != (NULL, 0); -- unexpected: row is not fetched"
        ],
        "title": "Row value comparison malfunctions on view with left join"
    },
    {
        "date": "5/11/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://sqlite.org/src/tktview?name=1cda8f4b54"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "closed (not a bug)",
        "test": [
            "CREATE TABLE t0(c0, c1, c2, PRIMARY KEY(c2)) WITHOUT ROWID;",
            "CREATE INDEX i0 ON t0(CAST(c1 AS INT));",
            "CREATE VIEW v0 AS SELECT 0, c0 FROM t0 GROUP BY 1 HAVING c2;",
            "INSERT INTO t0(c2) VALUES('');",
            "INSERT INTO t0(c1, c2) VALUES(1, 1);",
            "SELECT * FROM v0 WHERE UNLIKELY(1); -- unexpected: no row is fetched"
        ],
        "title": "UNLIKELY in query causes row to not be fetched"
    },
    {
        "date": "6/11/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://sqlite.org/src/tktview?name=2399f59861",
            "fix": "https://sqlite.org/src/info/77b1c90add514050"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 NOT NULL AS(c1), c1);",
            "REPLACE INTO t0(c1) VALUES(NULL); -- Segmentation fault"
        ],
        "title": "REPLACE on table with generated NOT NULL column results in segfault"
    },
    {
        "date": "6/11/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://sqlite.org/src/tktview?name=ce22a07731",
            "fix": "https://sqlite.org/src/info/36c11ad51fe9ab1b"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0 (c0 GENERATED ALWAYS AS (1), c1 UNIQUE, c2 UNIQUE);",
            "INSERT INTO t0(c1) VALUES (1);",
            "SELECT * FROM t0 WHERE 0 = t0.c2 OR t0.c1 BETWEEN t0.c2 AND 1; -- unexpected: row is fetched"
        ],
        "title": "NULL WHERE condition unexpectedly results in row being fetched"
    },
    {
        "date": "6/11/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://sqlite.org/src/tktview?name=4fc08501f4",
            "fix": "https://www.sqlite.org/src/info/9e07b48934e9a972"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 AS ((c4, 9, c4) < ('a', c1, 1)), c1 AS (1) NOT NULL, c2, c3 CHECK  ((x'56', 0) = (c1, 0)), c4 NOT NULL);",
            "PRAGMA integrity_check;",
            "INSERT INTO t0 VALUES (0, 0, 0), (0, 0, 0); -- unexpected: Segmentation fault"
        ],
        "title": "Segfault when inserting into table with generated columns"
    },
    {
        "date": "7/11/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=299b50ba81",
            "fix": "https://www.sqlite.org/src/info/104a2beb57037f93"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0, c1 AS(c0 + c2), c2 AS(c1) CHECK(c2));",
            "UPDATE t0 SET c0 = NULL; -- Segmentation fault"
        ],
        "title": "UPDATE on table with two generated columns and CHECK clause results in segfault"
    },
    {
        "date": "7/11/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=302027baf1",
            "fix": "https://www.sqlite.org/src/info/34f64f11ca481996"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0, c1 UNIQUE COLLATE NOCASE, PRIMARY KEY(c1, c1)) WITHOUT ROWID;",
            "INSERT INTO t0(c1) VALUES(0);",
            "VACUUM; -- unexpected: database disk image is malformed"
        ],
        "title": "VACUUM results in \"database disk image is malformed\" for PRIMARY KEY with duplicate column"
    },
    {
        "date": "7/11/2019",
        "dbms": "SQLite",
        "links": {
            "bugtracker": "https://www.sqlite.org/src/tktview?name=7e59041f9c",
            "fix": "https://www.sqlite.org/src/info/b59f94e4da9b1653"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Severe",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
            "INSERT INTO t0(c0) VALUES (1), (0);",
            "INSERT INTO vt0(c0) VALUES (0), (0);",
            "CREATE VIEW v0 AS SELECT DISTINCT t0.c0 FROM vt0, t0 ORDER BY vt0.rowid;",
            "SELECT * FROM v0; -- unexpected: 4 rows are fetched"
        ],
        "title": "DISTINCT malfunctions for VIEW with virtual table"
    },
    {
        "date": "13/11/2019",
        "dbms": "PostgreSQL",
        "links": {
            "email": "https://www.postgresql.org/message-id/flat/CA%2Bu7OA6gP7YAeCguyseusYcc%3DuR8%2BypjCcgDDCTzjQ%2Bk6S9ksQ%40mail.gmail.com"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TEMP TABLE t0(c1 INT PRIMARY KEY) ON COMMIT DELETE ROWS;",
            "REINDEX TABLE CONCURRENTLY t0; -- unexpected: ERROR:  index \"t0_pkey_ccnew\" already contains data"
        ],
        "title": "REINDEX CONCURRENTLY unexpectedly fails"
    },
    {
        "date": "13/11/2019",
        "dbms": "PostgreSQL",
        "links": {
            "email": "https://www.postgresql.org/message-id/flat/CA%2Bu7OA4HOjtymxAbuGNh4-X_2R0Lw5n01tzvP8E5-i-2gQXYWA%40mail.gmail.com",
            "fix": "https://github.com/postgres/postgres/commit/d57d61533a2b5b27b60cc9024c54688390871bf6"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 CHAR(2) COLLATE \"C\", c1 CHAR(2) COLLATE \"POSIX\");",
            "INSERT INTO t0 VALUES('', '');",
            "SELECT * FROM t0 WHERE t0.c1 NOT IN (t0.c0); -- unexpected: cache lookup failed for collation 0"
        ],
        "title": "Unexpected \"cache lookup failed for collation 0\" failure"
    },
    {
        "date": "16/11/2019",
        "dbms": "PostgreSQL",
        "links": {
            "email": "https://www.postgresql.org/message-id/flat/CA%2Bu7OA4n2Q8G1DD5MEp%2Bmu08ayB%2BULRFrG4s_v3LhOj8f4bX-g%40mail.gmail.com"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "open",
        "test": [
            "CREATE TABLE t0(c0 int4range UNIQUE, FOREIGN KEY (c0) REFERENCES t0(c0));",
            "ALTER TABLE t0 ALTER c0 SET DATA TYPE int4range; -- ERROR:  could not find cast from 3904 to 3831"
        ],
        "title": "ALTER TABLE results in \"could not find cast from 3904 to 3831\""
    },
    {
        "date": "19/11/2019",
        "dbms": "PostgreSQL",
        "links": {
            "email": "https://www.postgresql.org/message-id/flat/CA%2Bu7OA7H5rcE2%3D8f263w4NZD6ipO_XOrYB816nuLXbmSTH9pQQ%40mail.gmail.com",
            "fix": "https://github.com/postgres/postgres/commit/c676e659b246f94d571b57b559f80cb2dc03e73b"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 boolean, c1 boolean, c2 boolean);",
            "INSERT INTO t0 VALUES(FALSE, FALSE, FALSE);",
            "CREATE STATISTICS s0 ON c0, c2 FROM t0;",
            "ANALYZE;",
            "SELECT * FROM t0 WHERE t0.c2 OR t0.c1 OR t0.c0; -- TRAP: FailedAssertion(\"clauses != NIL\", File: \"mcv.c\", Line: 1551)"
        ],
        "title": "Failed assertion clauses != NIL"
    },
    {
        "date": "19/11/2019",
        "dbms": "PostgreSQL",
        "links": {
            "email": "https://www.postgresql.org/message-id/flat/CA%2Bu7OA7nnGYy8rY0vdTe811NuA%2BFrr9nbcBO9u2Z%2BJxqNaud%2Bg%40mail.gmail.com",
            "fix": "https://github.com/postgres/postgres/commit/b3c265d7be42484bd0ab4a9c0a920289e8f5c995",
            "improvement 1": "https://github.com/postgres/postgres/commit/2ddedcafca116c99e08c777ab2ab3a4de6f00c7e",
            "improvement 2": "https://github.com/postgres/postgres/commit/9ff5b699ed3e2d922ff6f5660e53b51bb5db983c"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 TEXT);",
            "CREATE INDEX i0 ON t0(c0 bpchar_ops);",
            "SELECT * FROM t0 WHERE t0.c0 LIKE ''; -- ERROR:  no = operator for opfamily 426"
        ],
        "title": "No = operator for opfamily 426"
    },
    {
        "date": "20/11/2019",
        "dbms": "PostgreSQL",
        "links": {
            "email": "https://www.postgresql.org/message-id/flat/CA%2Bu7OA4%3Dvs9LjjP_643kgLRENv2eW%2B8v%2B5M8QGsY3Sg1K_18fg%40mail.gmail.com"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "closed (not a bug)",
        "test": [
            "CREATE TABLE t0(c0 BIT VARYING(1));",
            "CREATE INDEX i0 ON t0(c0 bit_ops);",
            "ALTER TABLE t0 ALTER c0 TYPE TEXT; -- ERROR:  operator class \"bit_ops\" does not accept data type text"
        ],
        "title": "ALTER TABLE fails when changing column type due to index with bit_ops opclass"
    },
    {
        "date": "20/11/2019",
        "dbms": "PostgreSQL",
        "links": {
            "fix": "https://github.com/postgres/postgres/commit/4a0aab14dcb35550b55e623a3c194442c5666084"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 int);",
            "CREATE VIEW v0 AS SELECT * FROM t0;",
            "CREATE OR REPLACE VIEW v0 AS SELECT * FROM v0;",
            "SELECT * FROM information_schema.tables; -- server process (PID 2461) was terminated by signal 11: Segmentation fault"
        ],
        "title": "Fetching from information_schema.tables results in segfault"
    },
    {
        "date": "11/11/2019",
        "dbms": "MariaDB",
        "links": {
            "bugtracker": "https://jira.mariadb.org/browse/MDEV-21029"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0 VALUES (1);",
            "SELECT (c0 > (NULL <=> 0)) IS NULL FROM t0; -- expected: 0, actual: 1"
        ],
        "title": "Incorrect result for expression with the <=> operator and IS NULL"
    },
    {
        "date": "11/11/2019",
        "dbms": "MariaDB",
        "links": {
            "bugtracker": "https://jira.mariadb.org/browse/MDEV-21032"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0 VALUES (1);",
            "CREATE INDEX i0 ON t0(c0);",
            "SELECT * FROM t0 WHERE 0.5 = c0; -- unexpected: row is fetched"
        ],
        "title": "Index causes incorrect result when comparing float-point number with INT"
    },
    {
        "date": "11/11/2019",
        "dbms": "MariaDB",
        "links": {
            "bugtracker": "https://jira.mariadb.org/browse/MDEV-21034"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0 VALUES (1);",
            "SELECT * FROM t0 WHERE GREATEST(c0, NULL); -- unexpected: row is fetched"
        ],
        "title": "GREATEST() and LEAST() malfunction for NULL"
    },
    {
        "date": "14/11/2019",
        "dbms": "MariaDB",
        "links": {
            "bugtracker": "https://jira.mariadb.org/browse/MDEV-21057"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "closed (duplicate)",
        "test": [
            "CREATE TABLE t0(c0 INT) engine=Aria;",
            "CREATE UNIQUE INDEX i0 USING HASH ON t0(c0); -- Key/Index cannot be defined on a virtual generated column"
        ],
        "title": "CREATE UNIQUE INDEX USING HASH malfunctions for engine=Aria table"
    },
    {
        "date": "14/11/2019",
        "dbms": "MariaDB",
        "links": {
            "bugtracker": "https://jira.mariadb.org/browse/MDEV-21058"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT AS(('' RLIKE '['))); -- segfault"
        ],
        "title": "CREATE TABLE with generated column and RLIKE results in segfault"
    },
    {
        "date": "15/11/2019",
        "dbms": "MariaDB",
        "links": {
            "bugtracker": "https://jira.mariadb.org/browse/MDEV-21065",
            "fix": "https://github.com/mariadb/server/commit/fc860d3fa3bc854fbe6aab9179d7a4aaf6eb9edf"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT UNIQUE);",
            "INSERT INTO t0 VALUES (NULL), (NULL), (NULL), (NULL), (1), (0);",
            "SELECT * FROM t0 WHERE c0 < '\\n2'; -- expected rows with c0=0 and c0=1, actual: only row with c0=0 is fetched"
        ],
        "title": "UNIQUE constraint causes a query with string comparison to omit a row in the result set"
    },
    {
        "date": "18/11/2019",
        "dbms": "MariaDB",
        "links": {
            "bugtracker": "https://jira.mariadb.org/browse/MDEV-21076"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT NOT NULL, c1 CHAR UNIQUE);",
            "INSERT INTO t0 VALUES (0, 1);",
            "INSERT INTO t0 VALUES (0, '');",
            "SELECT SUM(a.t) FROM (SELECT (c1 RLIKE c1) = (c0 IS NULL) as t FROM t0) as a; -- expected: 1, actual: 0"
        ],
        "title": "NOT NULL and UNIQUE constraints cause SUM() to yield an incorrect result"
    },
    {
        "date": "22/11/2019",
        "dbms": "PostgreSQL",
        "links": {
            "fix": "https://github.com/postgres/postgres/commit/c35b714caff008c875b484656de7d168a7bc45f9"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TEMP TABLE t0(c0 int) ON COMMIT DELETE ROWS;",
            "CREATE INDEX i0 ON t0(bit_length('')); -- Segmentation fault"
        ],
        "title": "Segfault when creating constant bit_length() index on TEMP table"
    },
    {
        "date": "30/11/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=7f39060a24",
            "fix": "https://www.sqlite.org/src/info/4066a34da7bcdcec"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "CREATE TABLE t1(c0);",
            "CREATE INDEX i0 ON t0(1) WHERE c0 ISNULL;",
            "INSERT INTO t0(c0) VALUES (1);",
            "INSERT INTO t1(c0) VALUES (1);",
            "SELECT * FROM t1 LEFT JOIN t0 WHERE t0.c0 ISNULL; -- unexpected: row is fetched"
        ],
        "title": "LEFT JOIN malfunctions with partial ISNULL index"
    },
    {
        "date": "02/12/2019",
        "dbms": "PostgreSQL",
        "links": {
            "email": "https://www.postgresql.org/message-id/flat/CA%2Bu7OA5TwqWTrvRoFOF1Vipf5WpfcbQYwtLGzNVXGwa6Ptor9w%40mail.gmail.com"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 TEXT COLLATE \"POSIX\");",
            "CREATE VIEW v0(c0) AS (SELECT (t0.c0 COLLATE \"C\")::INT FROM t0); -- FailedAssertion(\"!OidIsValid(def->collOid)\", File: \"view.c\", Line: 89)"
        ],
        "title": "FailedAssertion(\"!OidIsValid(def->collOid)\", File: \"view.c\", Line: 89)"
    },
    {
        "date": "04/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=a55ab6d97d",
            "fix": "https://www.sqlite.org/src/info/f898d04cf272ef01"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2);",
            "INSERT INTO rt0(c2) VALUES(NULL);",
            "SELECT * FROM rt0 WHERE rt0.c2 >= 'a'; -- unexpected: fetches row"
        ],
        "title": "Incorrect result for TEXT comparison on rtree table"
    },
    {
        "date": "05/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=30e2c183b6",
            "fix": "https://www.sqlite.org/src/info/d43e0efb9642037d"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2);",
            "INSERT INTO rt0(c0) VALUES(0);",
            "SELECT * FROM rt0 WHERE rt0.c0 = NULL; -- unexpected: row is fetched"
        ],
        "title": "column = NULL predicate evaluates to TRUE for rtree table"
    },
    {
        "date": "05/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=9fe487ba3c",
            "fix": "https://www.sqlite.org/src/info/7ae8c0d52f6aa7f2"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE VIRTUAL TABLE rt0 USING rtree(c0, a, b);",
            "CREATE VIRTUAL TABLE rt1 USING rtree(c0, a, b);",
            "INSERT INTO rt1(c0) VALUES (x'00');",
            "INSERT INTO rt0(c0) VALUES ('a');",
            "SELECT * FROM rt1, rt0 WHERE rt0.c0 = CAST(rt1.c0 AS TEXT); -- unexpected: row is fetched"
        ],
        "title": "Join on two rtree tables malfunctions"
    },
    {
        "date": "05/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=f096d191b6",
            "fix": "https://www.sqlite.org/src/info/b7810062ec2489e1"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2);",
            "INSERT INTO rt0(c2) VALUES(NULL);",
            "INSERT INTO t0 VALUES(0);",
            "SELECT * FROM rt0, t0 WHERE (t0.c0, 0) > (rt0.c2, 0); -- unexpected: row is fetched"
        ],
        "title": "Row value comparison malfunctions with rtree table"
    },
    {
        "date": "06/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=aa573a787b",
            "fix": "https://www.sqlite.org/src/info/32772dfd50b602c0"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2 INT);",
            "INSERT INTO rt0(c2) VALUES(0);",
            "SELECT * FROM rt0 WHERE '0' = rt0.c2; -- unexpected: row is not fetched"
        ],
        "title": "Comparison on INT column in rtree table malfunctions"
    },
    {
        "date": "06/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=367a86e288",
            "docs fix": "https://www.sqlite.org/docsrc/info/8199b59a39c017c7",
            "fix": "https://www.sqlite.org/src/info/97fb5a72f91a44d5"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2);",
            "INSERT INTO rt0(c1) VALUES(0);",
            "SELECT * FROM rt0 WHERE rt0.c1 > '-1'; -- unexpected: row is fetched"
        ],
        "title": "Incorrect result for predicate on rtree table"
    },
    {
        "date": "06/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=8bf76328ac",
            "docs fix": "https://www.sqlite.org/docsrc/info/c3ab325994a8f495"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Cosmetic",
        "status": "fixed (in documentation)",
        "test": [
            "CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2, +c3 NOT NULL);",
            "INSERT INTO rt0(c3) VALUES(NULL); -- unexpected: inserting NULL succeeds",
            "SELECT 0 in (rt0.c3) ISNULL FROM rt0; -- expected: 1, actual: 0"
        ],
        "title": "NOT NULL auxiliary column in rtree table malfunctions"
    },
    {
        "comment": "We reported this bug via a private email.",
        "date": "06/12/2019",
        "dbms": "SQLite",
        "links": {
            "fix": "https://www.sqlite.org/src/info/ef73107f475e40e6"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE VIRTUAL TABLE vt0 USING rtree;"
        ],
        "title": "CREATE VIRTUAL TABLE causes segfault"
    },
    {
        "date": "06/12/2019",
        "dbms": "SQLite",
        "links": {
            "fix": "https://www.sqlite.org/src/info/27c0fdab1ba4d499"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "PRAGMA cache_size = 100000;",
            "PRAGMA foreign_keys = true;",
            "CREATE TEMP TABLE t0(c0, c1 INTEGER PRIMARY KEY AUTOINCREMENT CHECK (c0), c2 BLOB NOT NULL CHECK (LTRIM(1)) UNIQUE DEFAULT '0000000000000');",
            "COLLATE BINARY, c3 BLOB UNIQUE NOT NULL ON CONFLICT ABORT CHECK ((''IN (c0, NULL, c1))) GENERATED ALWAYS AS (1), FOREIGN KEY(c1) REFERENCES t0(c2) ON DELETE CASCADE);",
            "CREATE UNIQUE INDEX i0 ON t0(0, 0, 0);",
            "CREATE UNIQUE INDEX i1 ON t0(0, 0, 0);",
            "CREATE UNIQUE INDEX i2 ON t0(0, 0, c1);",
            "CREATE UNIQUE INDEX i3 ON t0(0, 0, c1);",
            "CREATE UNIQUE INDEX i4 ON t0(c0, 0, c2);",
            "CREATE INDEX i5 ON t0(0, CASE WHEN 1 THEN 1 WHEN c2 THEN c1 END, 0);",
            "VACUUM;",
            "INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0); -- segfault"
        ],
        "title": "Generated column and foreign key causes a segfault"
    },
    {
        "date": "08/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=b92e5e8ec2",
            "fix": "https://www.sqlite.org/src/info/9d75e1ccc72e9f53"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 AS (1), c1);",
            "CREATE TABLE t1(c0);",
            "SELECT * FROM t0, t1 WHERE t0.c0 == 0; -- out of memory"
        ],
        "title": "Query on table without rows and generated column results in \"out of memory\" error"
    },
    {
        "date": "09/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=bd8c280671",
            "fix": "https://www.sqlite.org/src/info/f3b39c71b88cb672"
        },
        "oracle": "hang",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0 (c0, c1 NOT NULL GENERATED ALWAYS AS (c0 = 0));",
            "INSERT INTO t0(c0) VALUES (0);",
            "PRAGMA integrity_check; -- hangs"
        ],
        "title": "PRAGMA integrity_check does not terminate on table with generated column"
    },
    {
        "date": "11/12/2019",
        "dbms": "SQLite",
        "links": {
            "fix": "https://www.sqlite.org/src/info/840de36df1aaeb4b"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "CREATE VIRTUAL TABLE vt0 USING rtree(c0, c1, c2);",
            "INSERT INTO t0(c0) VALUES(0);",
            "SELECT * FROM t0 LEFT JOIN vt0 ON c2 IN (0) WHERE c1 IN (NULL);"
        ],
        "title": "LEFT JOIN segfault on rtree table"
    },
    {
        "date": "10/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=d7c3f125c9",
            "fix": "https://www.sqlite.org/src/info/d47d66e3d360d8aa"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 AS (0 = UNLIKELY(c1)) UNIQUE, c1 TEXT);",
            "INSERT INTO t0(c1) VALUES (1), (0);",
            "REINDEX; -- UNIQUE constraint failed: t0.c0"
        ],
        "title": "REINDEX results in \"UNIQUE constraint failed\" for generated column"
    },
    {
        "date": "11/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=cf36cb4e02",
            "commit": "https://www.sqlite.org/src/info/c16305eba0eb1436"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "PRAGMA encoding = 'UTF-16';",
            "CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
            "INSERT INTO vt0 VALUES (x'46f0');",
            "UPDATE vt0 SET c0=NULL;",
            "INSERT INTO vt0(vt0) VALUES('integrity-check'); -- database disk image is malformed"
        ],
        "title": "FTS database disk image is malformed for UTF-16 encoding after update"
    },
    {
        "date": "14/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=b439bfcfb7",
            "fix": "https://www.sqlite.org/src/info/2401e04730a156aa"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 AS(1 >= 1), c1 UNIQUE AS(TYPEOF(c0)), c2);",
            "CREATE VIRTUAL TABLE t1 USING fts4;",
            "INSERT INTO t0 VALUES(0);",
            "REINDEX; -- segfault"
        ],
        "title": "REINDEX segfaults on table with generated columns"
    },
    {
        "date": "16/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=3b84b42943",
            "fix": "https://www.sqlite.org/src/info/0271491438ad2a98"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "CREATE TABLE t1(c0, c1 AS(1));",
            "INSERT INTO t0 VALUES(0);",
            "SELECT t1.c1 IS TRUE FROM t0 LEFT JOIN t1; -- expected: 0, actual: 1"
        ],
        "title": "LEFT JOIN malfunctions with generated column"
    },
    {
        "date": "19/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=56a74875be",
            "fix": "https://www.sqlite.org/src/info/eb95dac7f6482c36"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE VIRTUAL TABLE t0 USING rtree(c0, c1, c2);",
            "INSERT INTO t0(c1) VALUES(0), (0);",
            "UPDATE t0 SET c0 = (SELECT 1 FROM t0); -- unexpected: database table is locked"
        ],
        "title": "UPDATE causes \"database table is locked\" for rtree table"
    },
    {
        "date": "20/12/2019",
        "dbms": "SQLite",
        "links": {
            "fix": "https://www.sqlite.org/src/info/3cc2b5709e66ef60"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "CREATE TABLE t1(c0, c1 UNIQUE);",
            "INSERT INTO t0(c0) VALUES(NULL);",
            "SELECT COUNT(*) FROM t0, t1 WHERE (SELECT AVG(0) FILTER(WHERE t1.c1)); -- segmentation fault"
        ],
        "title": "FILTER clause in window function causes a segfault"
    },
    {
        "date": "20/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=e0a8120553",
            "fix": "https://sqlite.org/src/info/728ad39e3bd07a25"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 REAL AS(1) UNIQUE, c1 INT);",
            "INSERT INTO t0 VALUES('');",
            "SELECT * FROM t0 WHERE (1 BETWEEN CAST(t0.c0 AS TEXT) AND t0.c0); -- unexpected: row is fetched"
        ],
        "title": "Incorrect result for BETWEEN and generated column"
    },
    {
        "date": "20/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://sqlite.org/src/tktview?name=e431c35542",
            "commit": "https://sqlite.org/src/info/a1ba9a37d7a68a6d"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "PRAGMA encoding = 'UTF-16';",
            "CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
            "INSERT INTO vt0 VALUES (x'3078');",
            "INSERT INTO vt0(vt0) VALUES('integrity-check'); -- database disk image is malformed"
        ],
        "title": "FTS database disk image is malformed for UTF-16 encoding"
    },
    {
        "date": "21/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://sqlite.org/src/tktview?name=cd3311e323",
            "commit": "https://sqlite.org/src/info/70815e273f511481"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE VIRTUAL TABLE vt0 USING fts4(c0, languageid=\"lid\");",
            "INSERT INTO vt0 VALUES (0), (1);",
            "BEGIN;",
            "UPDATE vt0 SET lid = 1;",
            "INSERT INTO vt0(vt0) VALUES('integrity-check'); -- unexpected: database disk image is malformed"
        ],
        "title": "FTS database disk image is malformed for update on languageid"
    },
    {
        "date": "22/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://sqlite.org/src/tktview?name=5ad2aa6921",
            "fix": "https://www.sqlite.org/src/info/89a9dad6330270a4"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "PRAGMA encoding = 'UTF16';",
            "CREATE TABLE t0(c0 REAL, c1);",
            "INSERT INTO t0(c0) VALUES (''), (0);",
            "CREATE INDEX i0 ON t0(c1) WHERE c0 GLOB 3;",
            "UPDATE t0 SET c1=0; -- sqlite3.c:75871: sqlite3VdbeMemAboutToChange: Assertion `(mFlags&MEM_Str)==0 || (pMem->n==pX->n && pMem->z==pX->z)' failed."
        ],
        "title": "Debug assertion sqlite3VdbeMemAboutToChange: Assertion `(mFlags&MEM_Str)==0 || (pMem->n==pX->n && pMem->z==pX->z)' failed"
    },
    {
        "date": "22/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://sqlite.org/src/tktview?name=9cb7d0ef44",
            "fix": "https://sqlite.org/src/info/45748e2db028ffbd"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "PRAGMA locking_mode = EXCLUSIVE;",
            "PRAGMA journal_mode = PERSIST;",
            "CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
            "INSERT INTO vt0(vt0) VALUES('integrity-check');",
            "INSERT INTO vt0(vt0, rank) VALUES('usermerge', 2); -- sqlite3.c:213961: fts5StructureRead: Assertion `p->iStructVersion!=0' failed."
        ],
        "title": "Debug assertion fts5StructureRead: Assertion `p->iStructVersion!=0' failed"
    },
    {
        "date": "22/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://sqlite.org/src/tktview?name=f00d096cae",
            "fix": "https://sqlite.org/src/info/8c856404b4e98d29"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 UNIQUE);",
            "INSERT INTO t0 VALUES(0);",
            "SELECT * FROM t0 WHERE (0, t0.c0) IN(SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t0); -- sqlite3.c:87244: sqlite3VdbeExec: Assertion `memIsValid(pRec)' failed."
        ],
        "title": "Debug assertion sqlite3VdbeExec: Assertion `memIsValid(pRec)' failed"
    },
    {
        "date": "22/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://sqlite.org/src/tktview?name=d9ed4ebef1",
            "fix": "https://www.sqlite.org/src/info/0b1dbd60f5db3abe"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 UNIQUE);",
            "SELECT * FROM t0 WHERE(c0, 0) IN(SELECT FIRST_VALUE(0) OVER(), 0); -- Segmentation fault"
        ],
        "title": "SELECT on window function causes a segfault"
    },
    {
        "date": "22/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://sqlite.org/src/tktview?name=1b06916e01",
            "fix": "https://sqlite.org/src/info/ddb17d92df194337"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 CHECK(c1 IN(c1)), c1 INT);",
            "INSERT INTO t0(c1) VALUES('0'); -- sqlite3.c:86300: sqlite3VdbeExec: Assertion `flags3==pIn3->flags' failed."
        ],
        "title": "Debug assertion sqlite3VdbeExec: Assertion `flags3==pIn3->flags' failed"
    },
    {
        "date": "22/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://sqlite.org/src/tktview?name=b0cb8aff56",
            "fix": "https://sqlite.org/src/info/56539e1c132632c0"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "CREATE INDEX i0 ON t0((c0 NOTNULL) COLLATE BINARY);",
            "SELECT * FROM t0 WHERE(c0 NOTNULL) COLLATE BINARY BETWEEN 0 AND c0; -- sqlite3.c:98025: sqlite3ExprSkipCollateAndLikely: Assertion `pExpr->op==TK_COLLATE' failed."
        ],
        "title": "Debug assertion sqlite3ExprSkipCollateAndLikely: Assertion `pExpr->op==TK_COLLATE' failed"
    },
    {
        "date": "22/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://sqlite.org/src/tktview?name=7929c1efb2",
            "fix": "https://sqlite.org/src/info/ef604882a275d3d5"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
            "CREATE TABLE t0(c0);",
            "CREATE VIEW v0(c0) AS SELECT 0 GROUP BY 1;",
            "SELECT * FROM v0, t0 LEFT JOIN vt0 ON vt0.c0 MATCH 1 WHERE v0.c0 == 0; -- sqlite3.c:143296: constructAutomaticIndex: Assertion `!ExprHasProperty(pExpr, EP_FromJoin) || pExpr->iRightJoinTable!=pSrc->iCursor || pLoop->prereq!=0' failed."
        ],
        "title": "Debug assertion constructAutomaticIndex: Assertion `!ExprHasProperty(pExpr, EP_FromJoin) || pExpr->iRightJoinTable!=pSrc->iCursor || pLoop->prereq!=0' failed"
    },
    {
        "date": "22/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=188f912b51",
            "fix": "https://sqlite.org/src/info/9ab985a9c8160b90"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 TEXT, CHECK(c0 IN (c0)));",
            "INSERT INTO t0 VALUES(0);",
            "UPDATE t0 SET c0 = 0; -- sqlite3.c:86323: sqlite3VdbeExec: Assertion `pIn1!=pIn3' failed."
        ],
        "title": "Debug assertion sqlite3VdbeExec: Assertion `pIn1!=pIn3' failed"
    },
    {
        "date": "23/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=9d708e4742",
            "fix": "https://www.sqlite.org/src/info/2c44c73499154bc5"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT, CHECK(CASE c0 WHEN c0 THEN 0 END));",
            "INSERT INTO t0 VALUES('0'); -- sqlite3.c:86300: sqlite3VdbeExec: Assertion `flags3==pIn3->flags' failed."
        ],
        "title": "Debug assertion sqlite3VdbeExec: Assertion `flags3==pIn3->flags' failed (2)"
    },
    {
        "date": "23/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=0911b5d161",
            "fix": "https://www.sqlite.org/src/info/f347744e0d576f02"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "PRAGMA encoding = 'UTF16';",
            "CREATE VIRTUAL TABLE t0 USING fts5(c0);",
            "INSERT INTO t0(c0) VALUES (x'00');",
            "SELECT * FROM t0 WHERE CAST(SUBSTR(c0, 0) AS TEXT) > 0; -- sqlite3.c:81076: sqlite3MemCompare: Assertion `pMem1->enc==pMem2->enc || pMem1->db->mallocFailed' failed."
        ],
        "title": "Debug assertion sqlite3MemCompare: Assertion `pMem1->enc==pMem2->enc || pMem1->db->mallocFailed' failed"
    },
    {
        "date": "23/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=c62c5e5852",
            "fix": "https://www.sqlite.org/src/info/36fdeb4f0a66970a"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "PRAGMA encoding = 'UTF16';",
            "CREATE TABLE t0(c0 TEXT);",
            "CREATE INDEX i0 ON t0(0 LIKE COALESCE(c0, 0));",
            "INSERT INTO t0(c0) VALUES (0), (0); -- sqlite3.c:75871: sqlite3VdbeMemAboutToChange: Assertion `(mFlags&MEM_Str)==0 || (pMem->n==pX->n && pMem->z==pX->z)' failed."
        ],
        "title": "Debug assertion sqlite3VdbeMemAboutToChange: Assertion `(mFlags&MEM_Str)==0 || (pMem->n==pX->n && pMem->z==pX->z)' failed (2)"
    },
    {
        "date": "23/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=3ab4a9f02c",
            "fix": "https://www.sqlite.org/src/info/0b1dbd60"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 UNIQUE);",
            "SELECT * FROM t0 WHERE (t0.c0, 1) IN(SELECT NTILE(1) OVER(), 0 FROM t0); -- sqlite3.c:90197: sqlite3VdbeExec: Assertion `pC!=0' failed."
        ],
        "title": "Debug assertion sqlite3VdbeExec: Assertion `pC!=0' failed"
    },
    {
        "date": "23/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://sqlite.org/src/tktview?name=dfd66334cf",
            "fix": "https://sqlite.org/src/info/2f17974912ec5e99"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "CREATE TABLE t1(c0);",
            "SELECT * FROM t0 LEFT JOIN t1 WHERE (t1.c0 BETWEEN 0 AND 0) > ('' AND t0.c0); -- sqlite3.c:103271: impliesNotNullRow: Assertion `pWalker->eCode==0' failed."
        ],
        "title": "Debug assertion impliesNotNullRow: Assertion `pWalker->eCode==0' failed"
    },
    {
        "date": "23/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://sqlite.org/src/tktview?name=5eadca17c4",
            "fix": "https://sqlite.org/src/info/4c50afafce841636"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2);",
            "CREATE TABLE t0(c0);",
            "INSERT INTO t0 VALUES (0), (1);",
            "INSERT INTO rt0(c0) VALUES (0), (1);",
            "CREATE VIEW v0 AS SELECT 0 LIMIT 0;",
            "SELECT * FROM t0 LEFT JOIN rt0 INNER JOIN v0; -- sqlite3.c:185720: rtreeRelease: Assertion `pRtree->nNodeRef==0 || pRtree->bCorrupt' failed."
        ],
        "title": "Debug assertion rtreeRelease: Assertion `pRtree->nNodeRef==0 || pRtree->bCorrupt' failed"
    },
    {
        "date": "23/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://sqlite.org/src/tktview?name=d62981b76d",
            "fix": "https://www.sqlite.org/src/info/a11b393dc2c882cf"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE VIRTUAL TABLE vt1 USING fts5(c1, c2, prefix = 1, tokenize = \"porter ascii\");",
            "INSERT INTO vt1 VALUES (x'e4', '+\u452c+');",
            "INSERT INTO vt1(vt1) VALUES('integrity-check'); -- database disk image is malformed"
        ],
        "title": "FTS database disk image is malformed for special characters in table"
    },
    {
        "date": "23/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=b383b90278",
            "fix": "https://sqlite.org/src/info/401c9d30e06191d9"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 TEXT, CHECK(c0 BETWEEN 0 AND +c0));",
            "INSERT INTO t0 VALUES (0);",
            "UPDATE t0 SET c0 = 0; -- sqlite3.c:86402: sqlite3VdbeExec: Assertion `pIn1!=pIn3' failed."
        ],
        "title": "Debug assertion sqlite3VdbeExec: Assertion `pIn1!=pIn3' failed (2)"
    },
    {
        "comment": "This was not considered a bug. However, to clarify, a section \"Reading And Writing At The Same Time\" was added to the rtree documentation.",
        "date": "23/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=cafeafe605"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed (in documentation)",
        "test": [
            "CREATE VIRTUAL TABLE rt0 USING rtree(c0, c1, c2);",
            "INSERT INTO rt0(c0) VALUES (0), (1), (2);",
            "UPDATE rt0 SET c0 = 0 WHERE(SELECT ROW_NUMBER() OVER() FROM rt0); -- database table is locked"
        ],
        "title": "UPDATE with complex WHERE condition on rtree results in \"database table is locked\" error"
    },
    {
        "date": "24/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=df46a6f38e",
            "fix": "https://www.sqlite.org/src/info/1c0a05b09a97e6e2"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE VIRTUAL TABLE vt0 USING fts5(c0, prefix = 71, tokenize = \"porter ascii\", prefix = 9);",
            "BEGIN;",
            "INSERT INTO vt0(c0) VALUES (x'e9');",
            "INSERT INTO vt0(vt0) VALUES('integrity-check'); -- sqlite3.c:213028: sqlite3Fts5HashScanNext: Assertion `!sqlite3Fts5HashScanEof(p)' failed"
        ],
        "title": "Debug assertion sqlite3Fts5HashScanNext: Assertion `!sqlite3Fts5HashScanEof(p)' failed"
    },
    {
        "date": "24/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://sqlite.org/src/tktview?name=752fdbf6e7",
            "fix": "https://sqlite.org/src/info/bae060f382e4386c"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "PRAGMA encoding = 'UTF-16';",
            "CREATE VIRTUAL TABLE vt0 USING fts5(c0, c1);",
            "INSERT INTO vt0(vt0, rank) VALUES('pgsz', '37');",
            "INSERT INTO vt0(c0, c1) VALUES (0.66077, 1957391816);",
            "INSERT INTO vt0(vt0) VALUES('integrity-check'); -- unexpected: database disk image is malformed"
        ],
        "title": "FTS database disk image is malformed for UTF-16 encoding and integrity check"
    },
    {
        "date": "25/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=167b2aac34",
            "fix": "https://www.sqlite.org/src/info/a5d7f5d24a239f72"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
            "CREATE VIRTUAL TABLE vt1 USING fts4(c0);",
            "INSERT INTO vt1(c0) VALUES(0);",
            "BEGIN;",
            "UPDATE vt1 SET c0 = 0;",
            "INSERT INTO vt1(c0) VALUES (0), (0);",
            "UPDATE vt0 SET c0 = 0;",
            "INSERT INTO vt1(c0) VALUES (0);",
            "UPDATE vt1 SET c0 = 0;",
            "INSERT INTO vt1(vt1) VALUES('automerge=1');",
            "UPDATE vt1 SET c0 = 0;",
            "DROP TABLE vt1; -- sqlite3.c:219981: fts5CheckTransactionState: Assertion `iSavepoint<=p->ts.iSavepoint' failed"
        ],
        "title": "Debug assertion fts5CheckTransactionState: Assertion `iSavepoint<=p->ts.iSavepoint' failed"
    },
    {
        "date": "25/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=d87336c81c",
            "fix": "https://www.sqlite.org/src/info/fa58aad48a788802"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE VIRTUAL TABLE t0 USING rtree(c0, c1, c2);",
            "SELECT * FROM t0 WHERE ((0, 0) IN (SELECT COUNT(*), LAG(5) OVER(PARTITION BY 0) FROM t0), 0) <= (t0.c1, 0); -- sqlite3.c:98053: sqlite3TableColumnAffinity: Assertion `iCol<pTab->nCol' failed."
        ],
        "title": "Debug assertion sqlite3TableColumnAffinity: Assertion `iCol<pTab->nCol' failed."
    },
    {
        "date": "26/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=ec8abb025e",
            "fix": "https://www.sqlite.org/src/info/e54560495926fbb8"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 UNIQUE AS(0), c1, c2);",
            "INSERT INTO t0(c1) VALUES(0);",
            "UPDATE t0 SET c1 = 0, c2 = 0 WHERE(c0) >= 0; -- sqlite3.c:72305: sqlite3BtreeInsert: Assertion `pCur->curFlags & BTCF_ValidNKey' failed."
        ],
        "title": "Debug assertion sqlite3BtreeInsert: Assertion `pCur->curFlags & BTCF_ValidNKey' failed"
    },
    {
        "date": "26/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=7c13db5c3b",
            "fix": "https://www.sqlite.org/src/info/f14ce948662f3445"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 PRIMARY KEY, c1, c2 UNIQUE) WITHOUT ROWID;",
            "INSERT OR FAIL INTO t0(c2) VALUES (0), (NULL) ON CONFLICT(c2) DO UPDATE SET c1 = c0; -- sqlite3.c:108474: sqlite3FinishCoding: Assertion `!pParse->isMultiWrite || sqlite3VdbeAssertMayAbort(v, pParse->mayAbort)' failed."
        ],
        "title": "Debug assertion sqlite3FinishCoding: Assertion `!pParse->isMultiWrite || sqlite3VdbeAssertMayAbort(v, pParse->mayAbort)' failed"
    },
    {
        "date": "27/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://sqlite.org/src/tktview?name=fb3b3024ea",
            "fix": "https://sqlite.org/src/info/846b1de6e5a9e418"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "PRAGMA locking_mode = EXCLUSIVE;",
            "PRAGMA journal_mode = WAL;",
            "PRAGMA locking_mode = NORMAL;",
            "PRAGMA integrity_check;",
            "PRAGMA journal_mode = MEMORY; -- sqlite3.c:51926: assert_pager_state: Assertion `pPager->changeCountDone==0 || pPager->eLock>=RESERVED_LOCK' failed."
        ],
        "title": "Debug assertion assert_pager_state: Assertion `pPager->changeCountDone==0 || pPager->eLock>=RESERVED_LOCK' failed"
    },
    {
        "date": "27/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=1dc432db3b",
            "documentation": "https://www.sqlite.org/fts3.html#_utf_16_byte_order_mark_problem_"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed (in documentation)",
        "test": [
            "PRAGMA encoding = 'UTF-16';",
            "CREATE VIRTUAL TABLE vt0 USING fts4(c0);",
            "INSERT INTO vt0 VALUES ('\ufeff');",
            "INSERT INTO vt0(vt0) VALUES('integrity-check'); -- database disk image is malformed"
        ],
        "title": "FTS4 integrity-check results in \"database disk image is malformed\" for UTF-16 encoding"
    },
    {
        "date": "28/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=37823501c6",
            "fix": "https://www.sqlite.org/src/info/4cc12c18860bc480"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 NOT NULL DEFAULT '', c1 AS(c0) NOT NULL);",
            "REPLACE INTO t0(c0) VALUES(NULL); -- sqlite3.c:85112: sqlite3VdbeExec: Assertion `memIsValid(&aMem[pOp->p1])' failed."
        ],
        "title": "Debug assertion sqlite3VdbeExec: Assertion `memIsValid(&aMem[pOp->p1])' failed."
    },
    {
        "date": "28/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://sqlite.org/src/tktview?name=36ffedcb9a",
            "fix": "https://sqlite.org/src/info/597896ed0ae9e296"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "SELECT (0, 0) IN(SELECT MIN(c0), NTILE(0) OVER()) FROM t0; -- sqlite3.c:103486: exprSrcCount: Assertion `0' failed."
        ],
        "title": "Debug assertion exprSrcCount: Assertion `0' failed"
    },
    {
        "comment": "According to the SQLite developers, this bug report revealed a subtle problem n the new (unreleased) generated columns feature.",
        "date": "28/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://sqlite.org/src/tktview?name=5fbc159eeb",
            "fix": "https://sqlite.org/src/info/4cc12c18860bc480"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 NOT NULL DEFAULT 1, c1 AS(c0) UNIQUE);",
            "REPLACE INTO t0 VALUES(NULL); -- sqlite3.c:87334: sqlite3VdbeExec: Assertion `memIsValid(pRec)' failed."
        ],
        "title": "Debug assertion sqlite3VdbeExec: Assertion `memIsValid(pRec)' failed"
    },
    {
        "date": "28/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://sqlite.org/src/tktview?name=de4b04149b",
            "fix": "https://sqlite.org/src/info/6afadd3b3a40b0ef"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "PRAGMA foreign_keys = true;",
            "CREATE TABLE t0(c0 INT AS(2) UNIQUE, c1 TEXT UNIQUE, FOREIGN KEY(c0) REFERENCES t0(c1));",
            "INSERT INTO t0(c1) VALUES(0.16334143182538696), (0); -- sqlite3.c:75926: sqlite3VdbeMemAboutToChange: Assertion `(mFlags&MEM_Real)==0 || pMem->u.r==pX->u.r' failed."
        ],
        "title": "Debug assertion sqlite3VdbeMemAboutToChange: Assertion `(mFlags&MEM_Real)==0 || pMem->u.r==pX->u.r' failed"
    },
    {
        "date": "29/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=314cc133e5",
            "fix": "https://www.sqlite.org/src/info/db4b7e1dc399c1f1"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "PRAGMA recursive_triggers = true;",
            "CREATE TABLE t0(c0 UNIQUE ON CONFLICT REPLACE, c1, c2);",
            "CREATE INDEX i0 ON t0(c2);",
            "INSERT INTO t0(c0) VALUES (0);",
            "CREATE TRIGGER tr0 DELETE ON t0 BEGIN",
            "UPDATE t0 SET c2 = c0;",
            "END;",
            "INSERT INTO t0(c0, c2) VALUES(4, 0), (9, 0);",
            "UPDATE t0 SET c0 = 0;",
            "SELECT * FROM t0 WHERE x'' > t0.c2 GROUP BY c1; -- database disk image is malformed"
        ],
        "title": "Trigger on normal table causes the database disk image to become malformed"
    },
    {
        "date": "30/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www3.sqlite.org/src/tktview?name=7c0e06b162",
            "fix": "https://www3.sqlite.org/src/info/ab09ef427181130b"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "Critical",
        "status": "fixed",
        "test": [
            "CREATE VIRTUAL TABLE vt0 USING fts5(c0, c1);",
            "CREATE VIRTUAL TABLE vt1 USING fts5(c0);",
            "INSERT INTO vt1(c0) VALUES ('');",
            "SELECT * FROM vt1 NATURAL JOIN vt0 WHERE vt0.c1 MATCH 'a'; -- parse error in rank function:"
        ],
        "title": "NATURAL JOIN on virtual table results in \"parse error in rank function\""
    },
    {
        "comment": "Since we reported this bug 18 minutes after it was introduced, Richard Hipp sent a post titled '18 minutes 41 seconds' to the SQLite mailing list (see https://www.sqlite.org/src/info/f481636f1a0333c6)",
        "date": "30/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=892575cdba",
            "fix": "https://www.sqlite.org/src/info/f481636f1a0333c6"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 CHECK(((0, 0) > (0, c0))));",
            "INSERT INTO t0(c0) VALUES(0) ON CONFLICT(c0) DO UPDATE SET c0 = 3; -- sqlite3.c:98717: codeVectorCompare: Assertion `0' failed."
        ],
        "title": "Debug assertion codeVectorCompare: Assertion `0' failed"
    },
    {
        "date": "30/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=a0e88d8d7a"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "closed (not a bug)",
        "test": [
            "CREATE TABLE t0(c0);",
            "CREATE INDEX i0 ON t0((0 AND (SELECT 1))); -- unexpected: no error",
            "ALTER TABLE t0 RENAME COLUMN c0 TO c1; -- error in index i0: subqueries prohibited in index expressions"
        ],
        "title": "Inconsistent handling of subqueries in index expressions"
    },
    {
        "date": "31/12/2019",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=46fcd700b8",
            "fix": "https://www.sqlite.org/src/info/eca7ec9cda4606c4"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "PRAGMA foreign_keys = true;",
            "CREATE TABLE t0(c0 TEXT PRIMARY KEY, c1 INT UNIQUE REFERENCES t0 CHECK(CAST(c1 AS INT) BETWEEN 0 AND CASE WHEN 1 THEN c0 END));",
            "REPLACE INTO t0(c0, c1) VALUES(0.7675826647230917, 0), (0, x''); -- sqlite3.c:75952: sqlite3VdbeMemAboutToChange: Assertion `(mFlags&MEM_Real)==0 || pMem->u.r==pX->u.r' failed."
        ],
        "title": "Debug assertion sqlite3VdbeMemAboutToChange: Assertion `(mFlags&MEM_Real)==0 || pMem->u.r==pX->u.r' failed (2)"
    },
    {
        "date": "02/01/2020",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=771fe61761",
            "fix": "https://www.sqlite.org/src/info/e782096aa06fcf41"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "PRAGMA encoding = 'UTF16';",
            "CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
            "INSERT INTO vt0 VALUES (SUBSTR(x'37', ''));",
            "INSERT INTO vt0(vt0) VALUES('integrity-check'); -- database disk image is malformed"
        ],
        "title": "FTS5 integrity-check results in \"database disk image is malformed\" for UTF-16 encoding and SUBSTR"
    },
    {
        "date": "04/01/2020",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=727074e2ae",
            "fix": "https://www.sqlite.org/src/info/74ef6f2b6d9f50ff"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE VIRTUAL TABLE stat USING dbstat;",
            "SELECT * FROM stat WHERE stat.aggregate == NULL; -- unexpected: row is fetched"
        ],
        "title": "DBSTAT query computes incorrect result for aggregate column"
    },
    {
        "date": "04/01/2020",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=74a4c3860c",
            "fix": "https://www.sqlite.org/src/info/cfff5cb2279088aa"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "CREATE VIRTUAL TABLE stat USING dbstat;",
            "SELECT * FROM stat WHERE stat.name = NULL; -- unexpected: row is fetched"
        ],
        "title": "DBSTAT query computes incorrect result for name column"
    },
    {
        "date": "04/01/2020",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=a3713a5fca"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "status": "closed (not a bug)",
        "test": [
            "CREATE VIRTUAL TABLE stat USING dbstat;",
            "SELECT * FROM stat WHERE stat.aggregate = 1; -- unexpected: fetches one record"
        ],
        "title": "DBSTAT query computes incorrect result for stat.aggregate = 1 condition"
    },
    {
        "date": "08/01/2020",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=82ac75ba00",
            "fix": "https://www.sqlite.org/src/info/6db1c3498f6bfa01"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Important",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0);",
            "INSERT INTO t0 VALUES('0');",
            "CREATE VIEW v0(c0) AS SELECT CAST(0 AS INT) FROM t0;",
            "SELECT * FROM t0, v0 WHERE 0 >= t0.c0 AND t0.c0 = v0.c0; -- unexpected: fetches row"
        ],
        "title": "Incorrect result for query with 0 >= t0.c0 AND t0.c0 = v0.c0 condition"
    },
    {
        "date": "08/01/2020",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=9eda2697f5",
            "fix": "https://www.sqlite.org/src/info/1c76f1d8ec0937a2"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "severity": "Minor",
        "status": "fixed",
        "test": [
            "PRAGMA encoding = 'UTF16be';",
            "CREATE TABLE t0(c0, c1);",
            "INSERT INTO t0(c0) VALUES (x'00');",
            "CREATE INDEX i0 ON t0(c0 COLLATE BINARY);",
            "INSERT INTO t0(c0) VALUES (1);",
            "SELECT COUNT(*) FROM t0 WHERE SUBSTR(t0.c0, ','); -- expected: 1, actual: 2"
        ],
        "title": "Incorrect result for COUNT(), UTF16be encoding and SUBSTR"
    },
    {
        "date": "18/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44123"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 STRING UNIQUE);",
            "INSERT INTO t0 (c0) VALUES ('\\a');",
            "SELECT * FROM t0 WHERE c0 LIKE '\\a'; -- unexpected: row is fetched"
        ],
        "title": "Incorrect result for LIKE query"
    },
    {
        "date": "19/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44132",
            "fix": "https://github.com/cockroachdb/cockroach/pull/44728"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 BOOL UNIQUE, c1 INT AS (NULL) STORED);",
            "INSERT INTO t0 (c0) VALUES (true);",
            "SELECT * FROM t0 WHERE c0; -- expected: row is fetched, actual: row is not fetched"
        ],
        "title": "Generated column causes query to omit a record in the result set"
    },
    {
        "date": "19/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44133",
            "fix": "https://github.com/cockroachdb/cockroach/pull/44144"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SET SESSION VECTORIZE=experimental_on;",
            "CREATE TABLE t0(c0 STRING);",
            "CREATE TABLE t1(c0 STRING UNIQUE NOT NULL);",
            "SELECT * FROM t0, t1 WHERE t0.c0 NOT BETWEEN t1.c0 AND '' AND (t1.c0 IS NULL); -- crash"
        ],
        "title": "Crash when using VECTORIZE=experimental_on"
    },
    {
        "date": "20/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44137"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "SELECT * FROM t0 WHERE 1 > -(('1a' COLLATE en)::INT); -- internal error"
        ],
        "title": "Internal error in expression that uses a CAST and COLLATE"
    },
    {
        "date": "20/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44142",
            "fix": "https://github.com/cockroachdb/cockroach/pull/45260"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 STRING UNIQUE, c1 STRING COLLATE en PRIMARY KEY);",
            "EXPERIMENTAL SCRUB TABLE t0; -- ERROR: scrub-index: unsupported comparison operator: <collatedstring{en}> IS NOT DISTINCT FROM <unknown>"
        ],
        "title": "Unexpected error when using EXPERIMENTAL SCRUB"
    },
    {
        "date": "20/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44148",
            "fix": "https://github.com/cockroachdb/cockroach/pull/44775"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 BOOL DEFAULT (NULL BETWEEN ('' COLLATE en) AND ''));",
            "INSERT INTO t0(c0) VALUES(DEFAULT); -- ERROR: at or near \"collate\": syntax error"
        ],
        "title": "DEFAULT value causes unexpected syntax error when executing INSERT"
    },
    {
        "date": "21/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44152",
            "fix": "https://github.com/cockroachdb/cockroach/pull/44251"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SELECT TO_ENGLISH(-9223372036854775808); -- internal error: runtime error: index out of range"
        ],
        "title": "TO_ENGLISH(-9223372036854775808) results in an internal error"
    },
    {
        "date": "21/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44154",
            "fix1": "https://github.com/cockroachdb/cockroach/pull/44500",
            "fix2": "https://github.com/cockroachdb/cockroach/pull/44668"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 BOOL UNIQUE, c1 BOOL CHECK (true));",
            "INSERT INTO t0(c0) VALUES (true);",
            "SELECT * FROM t0 WHERE t0.c0 AND (false NOT BETWEEN SYMMETRIC t0.c0 AND NULL AND true); -- unexpected: row is fetched"
        ],
        "title": "Incorrect result for BETWEEN SYMMETRIC query"
    },
    {
        "date": "21/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44181",
            "fix": "https://github.com/cockroachdb/cockroach/pull/44216"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SELECT '' BETWEEN ''::BYTES AND ''; -- ERROR: internal error: lookup for ComparisonExpr ((@1)[bytes] > ('')[string])[bool]'s CmpOp failed"
        ],
        "title": "Internal error for BETWEEN operator and CAST to BYTES"
    },
    {
        "date": "22/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44203",
            "fix": "https://github.com/cockroachdb/cockroach/pull/44307"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 BOOL);",
            "INSERT INTO t0(c0) VALUES (false);",
            "CREATE VIEW v0(c0) AS SELECT c0 FROM t0 WHERE t0.c0 OFFSET NULL;",
            "SELECT * FROM v0 WHERE CURRENT_USER() != ''; -- unexpected: a row is fetched"
        ],
        "title": "Query on VIEW with OFFSET NULL and WHERE condition involving CURRENT_USER() unexpectedly fetches a row"
    },
    {
        "date": "22/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44207",
            "fix": "https://github.com/cockroachdb/cockroach/pull/44219"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SET SESSION VECTORIZE=experimental_on;",
            "CREATE TABLE t1(c0 INT);",
            "CREATE TABLE t0(c0 INT UNIQUE);",
            "INSERT INTO t1(c0) VALUES (0);",
            "INSERT INTO t0(c0) VALUES (NULL), (NULL);",
            "SELECT * FROM t0, t1 WHERE t0.c0 IS NULL; -- expected: two rows are fetched, actual: one row is fetched"
        ],
        "title": "Incorrect result for query with IS NULL condition on UNIQUE column and VECTORIZE=experimental_on"
    },
    {
        "date": "22/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44237"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 STRING);",
            "INSERT INTO t0(c0) VALUES ('\\n');",
            "SHOW EXPERIMENTAL_FINGERPRINTS FROM TABLE t0; -- ERROR: hash-fingerprint: could not parse \"",
            "\" as type bytes: bytea encoded value ends with incomplete escape sequence"
        ],
        "title": "SHOW EXPERIMENTAL_FINGERPRINTS error for STRING columns and character escapes"
    },
    {
        "date": "23/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44244",
            "fix": "https://github.com/cockroachdb/cockroach/commit/6f7239ba84b5988951d6148f8feba6344cd40c9d"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SET SESSION tracing=true; -- ERROR: internal error: expected string for set tracing argument, not *tree.DBool"
        ],
        "title": "Internal error setting tracing=true"
    },
    {
        "comment": "After we reported this bug, the CockroachDB developers added additional random testing to detect similar bugs.",
        "date": "23/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44296",
            "fix": "https://github.com/cockroachdb/cockroach/pull/44386"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT UNIQUE);",
            "CREATE VIEW v0(c0) AS SELECT DISTINCT t0.c0 FROM t0;",
            "INSERT INTO t0 (c0) VALUES (NULL), (NULL);",
            "SELECT * FROM v0 WHERE v0.c0 IS NULL; -- expected: {NULL}, actual: {NULL, NULL}"
        ],
        "title": "Incorrect result for IS NULL query on VIEW using SELECT DISTINCT"
    },
    {
        "date": "23/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44304",
            "fix": "https://github.com/cockroachdb/cockroach/pull/44346"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SET SESSION VECTORIZE=experimental_on;",
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0 (c0) VALUES (0);",
            "SELECT * FROM t0 WHERE CASE WHEN t0.c0 > 0 THEN NULL END; --  internal error: unexpected error from the vectorized runtime: Vec is of unknown type and should not be accessed"
        ],
        "title": "Internal error for CASE expression and VECTORIZE=experimental_on"
    },
    {
        "date": "26/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44385",
            "fix": "https://github.com/cockroachdb/cockroach/pull/46384"
        },
        "oracle": "hang",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "--thread 1",
            "DROP DATABASE IF EXISTS db0;",
            "CREATE DATABASE db0;",
            "USE db0;",
            "CREATE TABLE t0(c0 INT);",
            "--thread2",
            "SHOW TABLES;"
        ],
        "title": "Deadlock in SHOW TABLES"
    },
    {
        "date": "27/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44418",
            "fix": "https://github.com/cockroachdb/cockroach/pull/44430"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0(rowid) VALUES (0), (1), (2);",
            "CREATE VIEW v0(c0) AS SELECT CASE WHEN t0.c0 > 0 THEN 1 ELSE t0.rowid END FROM t0;",
            "CREATE STATISTICS s0 FROM t0;",
            "DELETE FROM t0;",
            "INSERT INTO t0(rowid) VALUES (3);",
            "INSERT INTO t0(rowid) VALUES (4);",
            "CREATE STATISTICS s1 ON rowid FROM t0;",
            "SELECT * FROM v0 WHERE v0.c0 > 0; -- internal error: estimated distinct count must be non-zero"
        ],
        "title": "Internal error \"estimated distinct count must be non-zero\""
    },
    {
        "date": "29/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44466",
            "fix": "https://github.com/cockroachdb/cockroach/pull/45372"
        },
        "oracle": "NoREC",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT PRIMARY KEY, c1 BOOL, c2 INT UNIQUE);",
            "INSERT INTO t0(c0) VALUES (0);",
            "UPSERT INTO t0(c2, c0) VALUES (0, 0), (1, 0);",
            "SELECT * FROM t0; -- {0 | NULL | 1}"
        ],
        "title": "Multi-record UPSERT inserts duplicate values in PRIMARY KEY, resulting in inconsistent results"
    },
    {
        "date": "30/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44547",
            "fix": "https://github.com/cockroachdb/cockroach/pull/44796"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SET SESSION VECTORIZE='experimental_on';",
            "CREATE TABLE t0(c0 INT4);",
            "CREATE TABLE t1(c0 INT8);",
            "INSERT INTO t0(c0) VALUES(0);",
            "INSERT INTO t1(c0) VALUES(0);",
            "SELECT * FROM t0 NATURAL JOIN t1; -- internal error: unexpected error from the vectorized runtime: interface conversion: coldata.column is []int32, not []int64"
        ],
        "title": "Internal error for NATURAL JOIN and VECTORIZE='experimental_on'"
    },
    {
        "date": "30/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44565",
            "fix": "https://github.com/cockroachdb/cockroach/pull/44590"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 INT);",
            "SELECT * FROM t0 LEFT JOIN t1 ON true LIMIT -1; -- causes server to exit"
        ],
        "title": "Server exits on query with LEFT JOIN"
    },
    {
        "date": "01/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44621",
            "fix": "https://github.com/cockroachdb/cockroach/pull/44633"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SELECT ILIKE_ESCAPE('a', '\ua9d5', '\ufffd'); -- internal error: runtime error: index out of range [2] with length 1"
        ],
        "title": "Internal error for ILIKE_ESCAPE and special characters"
    },
    {
        "date": "01/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44624",
            "fix": "https://github.com/cockroachdb/cockroach/pull/44660"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SET SESSION VECTORIZE=experimental_on;",
            "CREATE TABLE t0(c0 STRING, c1 BOOL, c2 INT);",
            "INSERT INTO t0(c0) VALUES('');",
            "INSERT INTO t0(rowid, c1, c0) VALUES(0, true, '');",
            "SELECT * FROM t0 ORDER BY CASE WHEN t0.c1 IS NULL THEN t0.c0 WHEN true THEN t0.c0 END; -- unexpected error from the vectorized runtime: cannot overwrite value on flat Bytes: maxSetIndex=1, setIndex=0, consider using Reset"
        ],
        "title": "Complex ORDER BY clause results in internal error with VECTORIZE=experimental_on"
    },
    {
        "date": "02/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44625"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SET SESSION VECTORIZE=experimental_on;",
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0(c0) VALUES(0);",
            "SELECT * FROM t0 WHERE SUBSTRING('', 0, -1) = ''; -- unexpected error from the vectorized runtime: negative substring length -1 not allowed"
        ],
        "title": "Internal error for SUBSTRING with negative length and VECTORIZE=experimental_on"
    },
    {
        "date": "03/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44632",
            "fix": "https://github.com/cockroachdb/cockroach/pull/44718"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SELECT NULLIF(NULL, 0) + NULLIF(NULL, 0); -- internal error: could not find overload for binary expression plus"
        ],
        "title": "Internal error for arithmetic operators and NULLIF"
    },
    {
        "date": "04/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44683",
            "fix": "https://github.com/cockroachdb/cockroach/pull/45009"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE VIEW v0(c0) AS SELECT 1 FROM t0 LIMIT -1;",
            "SELECT DISTINCT t0.c0 FROM t0, v0 LIMIT -1; -- internal error: runtime error: invalid memory address or nil pointer dereference"
        ],
        "title": "Internal error for query with negative LIMIT on view with negative LIMIT"
    },
    {
        "date": "04/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44726",
            "fix": "https://github.com/cockroachdb/cockroach/pull/44756"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SET SESSION VECTORIZE=experimental_on;",
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0(c0) VALUES (0);",
            "SELECT * FROM t0 WHERE 0 > (CASE WHEN NULLIF(NULL, ILIKE_ESCAPE('', CURRENT_USER(), '')) THEN 0 ELSE t0.c0 END);"
        ],
        "title": "Internal error for case expression involving NULLIF and VECTORIZE=experimental_on"
    },
    {
        "date": "05/01/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44746",
            "fix": "https://github.com/cockroachdb/cockroach/pull/44788"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c1 INT);",
            "SELECT * FROM t0 FULL JOIN t1 ON (SUBSTRING('', ')') = '') = (t1.c1 > 0); -- cannot map variable 3 to an indexed var"
        ],
        "title": "FULL JOIN with an SUBSTRING ON clause results in an internal error"
    },
    {
        "date": "05/02/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44757"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "SELECT MIN(1), MAX(NULL AND true) FROM t0; -- ERROR: no builtin aggregate for MAX on [{InternalType:{Family:UnknownFamily Width:0 Precision:0 ArrayDimensions:[] Locale:0x6fcee60 VisibleType:0 ArrayElemType:<nil> TupleContents:[] TupleLabels:[] Oid:705 ArrayContents:<nil> TimePrecisionIsSet:false IntervalDurationField:<nil>}}]"
        ],
        "title": "Unexpected error for aggregate functions"
    },
    {
        "date": "06/02/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44822",
            "fix": "https://github.com/cockroachdb/cockroach/pull/44829"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SET SESSION VECTORIZE=experimental_on;",
            "CREATE TABLE t0(c0 BYTES);",
            "CREATE VIEW v0(c0) AS SELECT MIN(t0.c0) FROM t0;",
            "SELECT * FROM v0 WHERE v0.c0 NOT BETWEEN v0.c0 AND v0.c0; -- ERROR: internal error: unexpected error from the vectorized runtime: runtime error: index out of range [2047] with length 1024"
        ],
        "title": "NOT BETWEEN query on VIEW results in an internal error with VECTORIZE=experimental_on"
    },
    {
        "date": "07/02/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44881",
            "fix": "https://github.com/cockroachdb/cockroach/pull/44887"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SET SESSION VECTORIZE=experimental_on;",
            "CREATE TABLE t0(c0 BOOL);",
            "INSERT INTO t0(c0) VALUES(true);",
            "SELECT * FROM t0 WHERE SUBSTRING('', 0, t0.c0::INT4) > ''; -- ERROR: internal error: unexpected error from the vectorized runtime: interface conversion: coldata.column is []int32, not []int64"
        ],
        "title": "Internal error for SUBSTRING, INT4 cast, and VECTORIZE=experimental_on"
    },
    {
        "date": "08/02/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44891"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INTERVAL, c1 BOOL CHECK (INTERVAL '9999 y' NOT BETWEEN c0 AND c0));",
            "CREATE INDEX ON t0(c0);",
            "EXPERIMENTAL SCRUB TABLE t0; -- ERROR: check-constraint: overflow during Encode"
        ],
        "title": "EXPERIMENTAL SCRUB TABLE results in an \"overflow during Encode\" error"
    },
    {
        "date": "09/02/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44904",
            "fix": "https://github.com/cockroachdb/cockroach/pull/44930"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SET VECTORIZE = experimental_on;",
            "SET DEFAULT_INT_SIZE = 4;",
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0 VALUES(0);",
            "SELECT CAST(0 BETWEEN(CASE NULL WHEN t0.c0 = 0 THEN NULL END) AND 0 IS TRUE AS INT) FROM t0; -- ERROR: internal error: unexpected error from the vectorized runtime: interface conversion: coldata.column is []int64, not []int32"
        ],
        "title": "Internal error when setting VECTORIZE = experimental_on and DEFAULT_INT_SIZE = 4"
    },
    {
        "date": "11/02/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44982",
            "fix": "https://github.com/cockroachdb/cockroach/pull/44942"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "closed (duplicate)",
        "test": [
            "SET SESSION VECTORIZE=experimental_on;",
            "CREATE TABLE t0(c0 INT UNIQUE);",
            "CREATE TABLE t1(c0 INT4 UNIQUE);",
            "INSERT INTO t0(c0) VALUES(0);",
            "INSERT INTO t1(c0) VALUES(0);",
            "SELECT * FROM t0 NATURAL JOIN t1; -- ERROR: internal error: unexpected error from the vectorized runtime: interface conversion: coldata.column is []int64, not []int32"
        ],
        "title": "Internal error for NATURAL JOIN on INT and INT4 column for VECTORIZE=experimental_on"
    },
    {
        "date": "12/02/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/44992",
            "fix": "https://github.com/cockroachdb/cockroach/pull/45410"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 TIMESTAMP UNIQUE);",
            "INSERT INTO t0(c0) VALUES(TIMESTAMP '1969-1-1');",
            "INSERT INTO t0(c0) VALUES(TIMESTAMP '1969-1-2');",
            "EXPERIMENTAL SCRUB TABLE t0; -- crashes server"
        ],
        "title": "EXPERIMENTAL SCRUB TABLE crashes server for table with TIMESTAMP column"
    },
    {
        "date": "12/02/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/45038",
            "fix": "https://github.com/cockroachdb/cockroach/pull/45042"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SET VECTORIZE=experimental_on;",
            "SET DEFAULT_INT_SIZE=4;",
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0 VALUES(NULL);",
            "SELECT SUM(c) FROM (SELECT CAST((IF(IF(false, false, c0 IS NULL), NULL, NULL)) BETWEEN 0 AND 0 IS TRUE AS INT) c FROM t0); -- internal error: unexpected error from the vectorized runtime: interface conversion: coldata.column is []int64, not []int32"
        ],
        "title": "Internal error for VECTORIZE=experimental_on, DEFAULT_INT_SIZE=4, and aggregate query"
    },
    {
        "date": "17/02/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/45142"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 STRING COLLATE en);",
            "SELECT * FROM t0 WHERE t0.c0 < SOME ('' COLLATE en, CASE WHEN true THEN NULL END); -- ERROR: at or near \")\": syntax error"
        ],
        "title": "Syntax error for multi-valued comparison and COLLATE"
    },
    {
        "date": "26/02/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/45453",
            "fix": "https://github.com/cockroachdb/cockroach/pull/46879"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE VIEW v0(c0) AS SELECT COUNT_ROWS() FROM t0 GROUP BY 0+0;",
            "SELECT * FROM v0; -- expected: {}, actual: {0}"
        ],
        "title": "COUNT_ROWS() malfunctions for GROUP BY"
    },
    {
        "date": "14/03/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/46122",
            "fix": "https://github.com/cockroachdb/cockroach/pull/46204"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 STRING);",
            "CREATE TABLE t1(c0 STRING);",
            "EXPLAIN (VEC) SELECT t0.c0 FROM t0, t1; -- unexpected error from the vectorized runtime: zero length schema unsupported"
        ],
        "title": "EXPLAIN (VEC) SELECT results in an internal error \"zero length schema unsupported\""
    },
    {
        "date": "14/03/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/46123",
            "fix": "https://github.com/cockroachdb/cockroach/pull/46200"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "EXPLAIN (VEC) SELECT STDDEV(0) FROM t0 WHERE ('' COLLATE en)::BOOL; -- internal error: unexpected error from the vectorized runtime: "
        ],
        "title": "EXPLAIN (VEC) SELECT results in an internal error \"input to aggregatorBase is not an execinfra.OpNode\""
    },
    {
        "date": "16/03/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/46140",
            "fix": "https://github.com/cockroachdb/cockroach/pull/46494"
        },
        "oracle": "TLP (aggregate)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SET vectorize=experimental_on;",
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 BOOL) INTERLEAVE IN PARENT t0(rowid);",
            "INSERT INTO t0(c0) VALUES (0);",
            "INSERT INTO t1(rowid, c0) VALUES(0, TRUE);",
            "SELECT MAX(t1.rowid) FROM t1 WHERE t1.c0; -- { NULL }"
        ],
        "title": "Incorrect result for MAX, INTERLEAVE IN PARENT, and vectorize=experimental_on"
    },
    {
        "date": "17/03/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/46187",
            "fix": "https://github.com/cockroachdb/cockroach/pull/46440"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT UNIQUE);",
            "CREATE TABLE t1(c0 INT);",
            "CREATE VIEW v0(c0) AS SELECT 0 FROM t1 LIMIT -1;",
            "SELECT * FROM v0, t0 NATURAL JOIN t1 LIMIT -1; -- internal error: node lookup-join with MaxCost added to the memo"
        ],
        "title": "Query with negative LIMIT results in an internal error \"node lookup-join with MaxCost added to the memo\""
    },
    {
        "date": "21/03/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/46393",
            "fix": "https://github.com/cockroachdb/cockroach/pull/46422"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE DATABASE db11;",
            "USE db11;",
            "SET experimental_enable_temp_tables = 'on';",
            "CREATE TEMP TABLE t0(c0 INT); -- end session",
            "DROP DATABASE db11 CASCADE; -- cannot access temporary tables of other sessions"
        ],
        "title": "DROP DATABASE issue with TEMP tables"
    },
    {
        "comment": "https://github.com/cockroachdb/cockroach/pull/46570#pullrequestreview-381413671",
        "date": "21/03/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/46394",
            "fix": "https://github.com/cockroachdb/cockroach/pull/46570"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 BOOL, c1 STRING COLLATE en);",
            "CREATE INDEX ON t0(rowid, c1 DESC);",
            "INSERT INTO t0(c1, rowid) VALUES('' COLLATE en, 0);",
            "UPSERT INTO t0(rowid) VALUES (0), (1); -- error decoding 11 bytes: did not find marker 0x12 in buffer 0x13ff00ff00ff00ff00fffe"
        ],
        "title": "UPSERT causes a decoding error in collated string column"
    },
    {
        "date": "21/03/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/46395",
            "fix": "https://github.com/cockroachdb/cockroach/pull/46408"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT UNIQUE DEFAULT 0);",
            "INSERT INTO t0(rowid) VALUES (0), (1) ON CONFLICT (c0) DO NOTHING; -- UPSERT or INSERT...ON CONFLICT command cannot affect row a second time"
        ],
        "title": "INSERT ... DO NOTHING results in an error \"UPSERT or INSERT...ON CONFLICT command cannot affect row a second time\""
    },
    {
        "date": "21/03/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/46397",
            "fix": "https://github.com/cockroachdb/cockroach/pull/46409"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 BOOL, c1 SERIAL2 CHECK (FALSE), FOREIGN KEY (c1) REFERENCES t0(rowid));",
            "UPSERT INTO t1(c0) VALUES (false); -- internal error: cannot convert int to type bool"
        ],
        "title": "UPSERT on table with FOREIGN KEY constraint results in an internal error \"cannot convert int to type bool\""
    },
    {
        "date": "21/03/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/46401"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 INT UNIQUE, FOREIGN KEY (c0) REFERENCES t0(rowid));",
            "EXPERIMENTAL SCRUB table t1; -- scrub-fk: column \"t.rowid\" does not exist"
        ],
        "title": "SCRUB fails for table that has a FOREIGN KEY constraint on a rowid column"
    },
    {
        "date": "21/03/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/46403",
            "fix": "https://github.com/cockroachdb/cockroach/pull/47099"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE VIEW v0(c0, c1) AS SELECT DISTINCT c0, c0 FROM t0;",
            "SELECT * FROM v0 NATURAL JOIN t0; -- duplicate column name: \"c1\""
        ],
        "title": "NATURAL JOIN fails with \"duplicate column name\" on view"
    },
    {
        "date": "21/03/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/46404",
            "fix": "https://github.com/cockroachdb/cockroach/pull/46439"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 INT);",
            "EXPLAIN (VEC) SELECT STDDEV((t1.c0 > ANY (0, 0))::INT) FROM t0, t1 GROUP BY t0.rowid; -- unexpected error from the vectorized runtime: input to aggregatorBase is not an execinfra.OpNode"
        ],
        "title": "EXPLAIN (VEC) results in an internal error \"input to aggregatorBase is not an execinfra.OpNode\""
    },
    {
        "date": "22/03/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/46412",
            "fix": "https://github.com/cockroachdb/cockroach/pull/46436"
        },
        "oracle": "TLP (HAVING)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0(c0) VALUES(0);",
            "SELECT t0.c0 FROM t0 GROUP BY t0.c0 HAVING NOT (VARIANCE(0) IS NULL); -- expected: {}, actual: {0}"
        ],
        "title": "HAVING clause incorrectly evaluates to TRUE for VARIANCE(0) IS NOT NULL predicate"
    },
    {
        "date": "10/03/2020",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=e0c2ad1aa8",
            "fix": "https://www.sqlite.org/src/info/101f7dea75a203f1"
        },
        "oracle": "TLP (aggregate)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 REAL, c1 REAL GENERATED ALWAYS AS (c0));",
            "INSERT INTO t0(c0) VALUES (1);",
            "SELECT * FROM t0 GROUP BY c0; -- expected: 1.0|1.0, actual: 1.0|1",
            "SELECT * FROM t0; -- 1.0|1.0"
        ],
        "title": "GROUP BY causes unexpected conversion"
    },
    {
        "date": "04/03/2020",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=1b8d726456",
            "fix": "https://www.sqlite.org/src/info/4a5851893c3d71cc"
        },
        "oracle": "TLP (aggregate)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "PRAGMA encoding = 'UTF-16';",
            "CREATE TABLE t0(c0 TEXT);",
            "INSERT INTO t0(c0) VALUES ('\uc706'), (1);",
            "SELECT MAX(CASE 1 WHEN 1 THEN t0.c0 END) FROM t0; -- \uc706",
            "SELECT MAX(t0.c0) FROM t0; -- 1"
        ],
        "title": "MAX yields unexpected result for UTF-16"
    },
    {
        "date": "05/03/2020",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=fa146dcfe6",
            "fix": "https://www.sqlite.org/docsrc/info/e751b0c91a80dd31"
        },
        "oracle": "TLP (aggregate)",
        "reporter": "Manuel Rigger",
        "status": "fixed (in documentation)",
        "test": [
            "SELECT HEX(MIN(a)) FROM (SELECT CHAR(0, 1) COLLATE NOCASE as a UNION SELECT CHAR(0, 0) as a); -- 0000",
            "SELECT HEX(MIN(a)) FROM (SELECT CHAR(0, 0) COLLATE NOCASE as a UNION SELECT CHAR(0, 1) as a); -- 0001"
        ],
        "title": "Unexpected result for MIN on string that contains a null character"
    },
    {
        "date": "24/03/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/46503"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "SET SESSION DISTSQL=off;",
            "SET vectorize=on;",
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0(c0) VALUES(0);",
            "SELECT * FROM t0 GROUP BY t0.c0 HAVING MAX(CASE WHEN NULL THEN t0.c0::SMALLINT ELSE 0 END)::BOOL IS NULL; -- internal error: unexpected error from the vectorized runtime: interface conversion: coldata.column is []int64, not []int16"
        ],
        "title": "Query with HAVING clause, DISTSQL=off, and vectorize=on results in an internal error"
    },
    {
        "date": "26/03/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/15725",
            "fix": "https://github.com/pingcap/tidb/pull/16108"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0(c0) VALUES (2);",
            "SELECT t0.c0 FROM t0 WHERE (NOT NOT t0.c0) = t0.c0; -- expected: {}, actual: {2}"
        ],
        "title": "Double negation causes incorrect result"
    },
    {
        "date": "26/03/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/15733"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT, c1 TEXT AS (0.9));",
            "INSERT INTO t0(c0) VALUES (0);",
            "SELECT 0 FROM t0 WHERE false UNION SELECT 0 FROM t0 WHERE NOT t0.c1; -- expected: {0}, actual: {}"
        ],
        "title": "Incorrect result for an UNION query and a generated column"
    },
    {
        "date": "26/03/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/15743"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 BOOL);",
            "INSERT INTO t0 VALUES (0);",
            "SELECT * FROM t0 WHERE 1 AND 0.4; -- expected: {0}, actual: {}"
        ],
        "title": "Incorrect result for query that uses an AND operator on floats"
    },
    {
        "date": "26/03/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/15746",
            "fix": "https://github.com/pingcap/tidb/pull/15765"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT UNIQUE, c2 INT UNIQUE);",
            "REPLACE INTO t0(c0, c2) VALUES (0, 0), (0, 0), (0, 1);",
            "ANALYZE TABLE t0; -- SIGSEGV"
        ],
        "title": "ANALYZE TABLE causes SIGSEGV on latest trunk"
    },
    {
        "date": "26/03/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/15751",
            "fix": "https://github.com/pingcap/tidb/pull/15845"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "set @@tidb_enable_fast_analyze=1;",
            "CREATE TABLE t0(c0 INT, c1 INT, PRIMARY KEY(c0, c1));",
            "INSERT INTO t0 VALUES (0, 0);",
            "ANALYZE TABLE t0; -- analyze worker panic"
        ],
        "title": "ANALYZE TABLE results in \"analyze worker panic\" with tidb_enable_fast_analyze=1"
    },
    {
        "date": "26/03/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/15752",
            "fix": "https://github.com/pingcap/tidb/pull/15889"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "set @@tidb_enable_fast_analyze=1;",
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0 VALUES (0);",
            "CREATE INDEX i0 ON t0(c0);",
            "ANALYZE TABLE t0 INDEX i0; -- invalid encoded key"
        ],
        "title": "ANALYZE TABLE results in \"invalid encoded key\" with tidb_enable_fast_analyze=1"
    },
    {
        "date": "27/03/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/15789",
            "fix": "https://github.com/pingcap/tidb/pull/15971"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT, c1 CHAR);",
            "CREATE INDEX i0 ON t0(c1, c0);",
            "INSERT INTO t0(c1) VALUES (0);",
            "SELECT t0.c0 FROM t0 WHERE t0.c1 = CHAR(1 COLLATE 'latin1_bin'); -- expected: {}, actual: {NULL}"
        ],
        "title": "COLLATE causes an incorrect result in the presence of an index"
    },
    {
        "date": "27/03/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/15790",
            "fix": "https://github.com/pingcap/tidb/pull/16073"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0(c0) VALUES (0);",
            "SELECT * FROM t0 WHERE -10000000000000000000 | t0.c0 UNION SELECT * FROM t0; -- unexpected: %s value is out of range in '%s'"
        ],
        "title": "Unexpected \"Data truncation: %s value is out of range in '%s'\" error in UNION query"
    },
    {
        "date": "29/03/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/46714",
            "fix": "https://github.com/cockroachdb/cockroach/pull/46712"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SET vectorize=on;",
            "CREATE TABLE t0(c0 INT4);",
            "CREATE TABLE t1(c0 INT4);",
            "INSERT INTO t0(c0) VALUES(0);",
            "INSERT INTO t1(c0) VALUES (0);",
            "SELECT 1 FROM t0, t1 GROUP BY t0.c0 * t1.c0; -- unexpected error from the vectorized runtime: interface conversion: coldata.column is []int32, not []int64"
        ],
        "title": "Internal error for vectorize=on and multiplication of INT4 values"
    },
    {
        "date": "29/03/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/15810",
            "fix": "https://github.com/pingcap/tidb/pull/16600"
        },
        "oracle": "TLP (GROUP BY)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT, c1 INT);",
            "CREATE TABLE t1(c0 INT, c1 INT);",
            "CREATE TABLE t2(c0 INT, c1 INT );",
            "INSERT INTO t1(c0) VALUES (8, 58), (19, 79);",
            "INSERT INTO t1 VALUES (22, 19), (91, 69);",
            "INSERT INTO t0 VALUES (29, 5), (11, NULL);",
            "INSERT INTO t1 VALUES (NULL, 60), (0, 49), (23, NULL);",
            "INSERT INTO t1(c1, c0) VALUES (58, 33), (11, 82);",
            "INSERT INTO t1 VALUES (18, 65), (33, 10), (31, 13), (98, 30);",
            "INSERT INTO t1(c0, c1) VALUES (NULL, 8), (17, 99), (70, 63), (22, 28);",
            "INSERT INTO t2(c0, c1) VALUES (90, NULL), (88, 89), (11, 26);",
            "INSERT INTO t0 VALUES (75, 68);",
            "INSERT INTO t0(c0, c1) VALUES (54, 19);",
            "INSERT INTO t1 VALUES (14, 53);",
            "INSERT INTO t1 VALUES (72, NULL);",
            "INSERT INTO t0 VALUES (29, 94), (48, 3);",
            "INSERT INTO t0(c0, c1) VALUES (29, 9), (66, 39);",
            "INSERT INTO t2 VALUES (92, 75);",
            "INSERT INTO t2(c1) VALUES (23), (67);",
            "INSERT INTO t1 VALUES (69, NULL), (NULL, 78);",
            "INSERT INTO t0(c0) VALUES (71), (59);",
            "INSERT INTO t2 VALUES (97, 8), (92, 45);",
            "INSERT INTO t1 VALUES (37, 57), (46, 89);",
            "INSERT INTO t1(c1) VALUES (51);",
            "INSERT INTO t0 VALUES (24, 70), (14, 87);",
            "INSERT INTO t2 VALUES (33, NULL), (77, 68);",
            "INSERT INTO t1 VALUES (48, 44);",
            "INSERT INTO t2(c0, c1) VALUES (56, 51), (80, NULL), (NULL, 27);",
            "INSERT INTO t0(c0) VALUES (88), (90), (58);",
            "INSERT INTO t2 VALUES (43, 16);",
            "ANALYZE TABLE t1, t2;",
            "SELECT t1.c0 LIKE t1.c0 FROM t1, t2, t0 GROUP BY t1.c0 LIKE t1.c0; -- non-deterministic result or \"runtime error: index out of range [1] with length 1\""
        ],
        "title": "GROUP BY clause nondeterministically results in an incorrect result or error"
    },
    {
        "date": "29/03/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/15812",
            "fix": "https://github.com/pingcap/tidb/pull/15837"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 FLOAT);",
            "CREATE TABLE t1(c0 FLOAT);",
            "INSERT INTO t1(c0) VALUES (0);",
            "INSERT INTO t0(c0) VALUES (0);",
            "SELECT t1.c0 FROM t1, t0 WHERE t0.c0=-t1.c0; -- expected: {0}, actual: {}"
        ],
        "title": "A predicate column1 = -column2 incorrectly evaluates to false for 0 values"
    },
    {
        "date": "29/03/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/15813",
            "fix": "https://github.com/pingcap/tidb/pull/15840"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT PRIMARY KEY);",
            "CREATE TABLE t1(c0 INT PRIMARY KEY);",
            "CREATE INDEX i0 ON t1(c0);",
            "CREATE INDEX i0 ON t0(c0);",
            "SELECT * FROM t0, t1 WHERE t1.c0=t0.c0;"
        ],
        "title": "Join on tables with redundant indexes causes a server panic"
    },
    {
        "date": "30/03/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/15844"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 INT);",
            "SELECT t0.c0 FROM t0 NATURAL RIGHT JOIN t1 WHERE t1.c0; -- Unknown column 't0.c0' in 'field list'"
        ],
        "title": "NATURAL RIGHT JOIN results in an unexpected \"Unknown column\" error"
    },
    {
        "date": "30/03/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/15846",
            "fix": "https://github.com/pingcap/tidb/pull/15894"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(t0 INT UNIQUE);",
            "CREATE TABLE t1(c0 FLOAT);",
            "INSERT INTO t1(c0) VALUES (0);",
            "INSERT INTO t0(t0) VALUES (NULL), (NULL);",
            "SELECT t1.c0 FROM t1 LEFT JOIN t0 ON 1; -- expected: {0, 0}, actual: {0}"
        ],
        "title": "Incorrect result for LEFT JOIN and NULL values"
    },
    {
        "date": "30/03/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/15847"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE VIEW v0(c0) AS SELECT NULL;",
            "SELECT * FROM v0 WHERE (NOT (IF(v0.c0, NULL, NULL))); -- baseBuiltinFunc.vecEvalString() should never be called, please contact the TiDB team for help"
        ],
        "title": "Query results in \"baseBuiltinFunc.vecEvalString() should never be called\" error"
    },
    {
        "date": "30/03/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/15850",
            "fix": "https://github.com/pingcap/tidb/pull/15984"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 TEXT);",
            "CREATE VIEW v0(c0) AS SELECT NULL;",
            "SELECT * FROM v0 NATURAL LEFT JOIN t0; -- unsupport column type for encode 6"
        ],
        "title": "Query with a NATURAL LEFT JOIN unexpectedly results in an error"
    },
    {
        "date": "30/03/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/15858",
            "fix": "https://github.com/pingcap/tidb/pull/15947"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE VIEW v0(c0) AS SELECT 0 FROM t0 ORDER BY -t0.c0;",
            "SELECT * FROM v0 RIGHT JOIN t0 ON false; -- connection running loop panic"
        ],
        "title": "Query with RIGHT JOIN causes a server panic"
    },
    {
        "date": "31/03/2020",
        "dbms": "MySQL",
        "links": {
            "bugreport": "https://bugs.mysql.com/bug.php?id=99120"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "closed (not a bug)",
        "test": [
            "CREATE TABLE t0(c0 BOOL);",
            "INSERT INTO t0 VALUES (0);",
            "SELECT * FROM t0 WHERE 1 AND 0.4; -- expected: {0}, actual: {}"
        ],
        "title": "Incorrect result for query that uses an AND operator on floats",
        "version": "5.5 and 5.6"
    },
    {
        "date": "31/03/2020",
        "dbms": "MySQL",
        "fixed_version": "8.0.21",
        "links": {
            "bugreport": "https://bugs.mysql.com/bug.php?id=99122"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 DOUBLE);",
            "INSERT INTO t0 VALUES(0);",
            "INSERT INTO t1 VALUES('-0');",
            "SELECT * FROM t0, t1 WHERE t0.c0 = t1.c0; -- expected: {0, -0}, actual: {}"
        ],
        "title": "A predicate that compares 0 with -0 yields an incorrect result",
        "version": "8.0.19"
    },
    {
        "date": "31/03/2020",
        "dbms": "MySQL",
        "links": {
            "bugreport": "https://bugs.mysql.com/bug.php?id=99127"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT UNSIGNED);",
            "INSERT INTO t0(c0) VALUES(0);",
            "SELECT * FROM t0 WHERE 0.9 > t0.c0; -- expected: {0}, actual: {}"
        ],
        "title": "Incorrect result when comparing an UNSIGNED INT with a floating-point number",
        "version": "8.0.19"
    },
    {
        "date": "31/03/2020",
        "dbms": "MySQL",
        "links": {
            "bugreport": "https://bugs.mysql.com/bug.php?id=99130"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT, c1 INT UNIQUE);",
            "INSERT INTO t0(c1) VALUES(1);",
            "SELECT * FROM t0 WHERE t0.c1 BETWEEN 0 AND (\"\\n2\"); -- expected: {NULL, 1}, actual: {}"
        ],
        "title": "BETWEEN malfunctions when comparing a string containing a newline",
        "version": "8.0.19"
    },
    {
        "date": "31/03/2020",
        "dbms": "MySQL",
        "links": {
            "bugreport": "https://bugs.mysql.com/bug.php?id=99135"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT UNIQUE);",
            "INSERT INTO t0(c0) VALUES(0);",
            "SELECT * FROM t0 WHERE t0.c0 BETWEEN 18446744073561222871 AND 0; -- expected: {0}, actual: {}?"
        ],
        "title": "BETWEEN malfunctions when comparing large numbers",
        "version": "8.0.19"
    },
    {
        "date": "01/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/15986",
            "fix": "https://github.com/pingcap/tidb/pull/16014"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0(c0) VALUES (0);",
            "SELECT t0.c0 FROM t0 WHERE CHAR(204355900); -- expected: {0}, actual: {}"
        ],
        "title": "Incorrect result for a predicate that uses the CHAR() function"
    },
    {
        "date": "01/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/15987"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 FLOAT);",
            "INSERT INTO t0(c0) VALUES (NULL);",
            "SELECT * FROM t0 WHERE NOT(0 OR t0.c0); -- expected: {}, actual: {NULL}"
        ],
        "title": "OR clause on FLOAT/DOUBLE column unexpectedly evaluates to TRUE"
    },
    {
        "date": "01/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/15988",
            "fix": "https://github.com/pingcap/tidb/pull/16380"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT, c1 TEXT(10), PRIMARY KEY(c0));",
            "CREATE INDEX i0 ON t0(c1(10));",
            "INSERT INTO t0(c0, c1) VALUES (0, NULL);",
            "SELECT * FROM t0 WHERE t0.c1 LIKE '@%' COLLATE 'latin1_bin'; -- expected: {}, actual: {0, NULL}"
        ],
        "title": "LIKE operator malfunctions for COLLATE 'latin1_bin'"
    },
    {
        "date": "01/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/15990",
            "fix": "https://github.com/pingcap/tidb/pull/16135"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 TEXT(10));",
            "INSERT INTO t0(c0) VALUES (1);",
            "CREATE INDEX i0 ON t0(c0(10));",
            "SELECT * FROM t0 WHERE ('a' != t0.c0) AND t0.c0; -- expected: {1}, actual: {}"
        ],
        "title": "Using a column both in a string comparison and as a boolean yields an incorrect result"
    },
    {
        "date": "01/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/15991",
            "fix": "https://github.com/pingcap/tidb/pull/16001"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT, c1 INT, PRIMARY KEY(c1));",
            "CREATE INDEX i0 ON t0(c0);",
            "SELECT /*+ USE_INDEX_MERGE(t0, PRIMARY) */ * FROM t0 WHERE 1 OR t0.c1;"
        ],
        "title": "A USE_INDEX_MERGE hint causes a server panic"
    },
    {
        "date": "01/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/15992",
            "fix": "https://github.com/pingcap/tidb/pull/16376"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT, c1 INT AS (c0));",
            "CREATE INDEX i0 ON t0(c1);",
            "SELECT /*+ USE_INDEX_MERGE(t0, c0_2) */ t0.c0 FROM t0 UNION ALL SELECT 0 FROM t0;"
        ],
        "title": "USE_INDEX_MERGE on table with generated column causes a server crash"
    },
    {
        "date": "01/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/15993",
            "fix": "https://github.com/pingcap/tidb/pull/16005"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "set @@tidb_enable_fast_analyze=1;",
            "CREATE TABLE t0(c0 INT PRIMARY KEY);",
            "ANALYZE TABLE t0 INDEX PRIMARY; -- analyze worker panic"
        ],
        "title": "fast ANALYZE TABLE on INDEX PRIMARY causes an error \"analyze worker panic\""
    },
    {
        "date": "01/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/15994",
            "fix": "https://github.com/pingcap/tidb/pull/16002"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT AS (1), c1 INT PRIMARY KEY);",
            "INSERT INTO t0(c1) VALUES (0);",
            "CREATE INDEX i0 ON t0(c0);",
            "SELECT /*+ USE_INDEX_MERGE(t0, i0, PRIMARY)*/ t0.c0 FROM t0 WHERE t0.c1 OR t0.c0;",
            "SELECT t0.c0 FROM t0 WHERE t0.c1 OR t0.c0; -- expected: {1}, actual: {NULL}"
        ],
        "title": "USE_INDEX_MERGE results in an incorrect result for a generated column"
    },
    {
        "date": "01/04/2020",
        "dbms": "MySQL",
        "links": {
            "bugreport": "https://bugs.mysql.com/bug.php?id=99145"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0(c0) VALUES (0);",
            "SELECT * FROM t0 WHERE 0.9 > t0.c0; -- expected: {0}, actual: {}"
        ],
        "title": "Incorrect result when comparing a floating-point number with an integer"
    },
    {
        "date": "01/04/2020",
        "dbms": "MySQL",
        "links": {
            "bugreport": "https://bugs.mysql.com/bug.php?id=99146"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 FLOAT UNIQUE);",
            "INSERT INTO t0(c0) VALUES (0);",
            "SELECT * FROM t0 WHERE t0.c0 BETWEEN 0 AND '1e500'; -- expected: {0}, actual: {}"
        ],
        "title": "Comparison on FLOAT column and large value malfunctions"
    },
    {
        "date": "01/04/2020",
        "dbms": "MySQL",
        "links": {
            "bugreport": "https://bugs.mysql.com/bug.php?id=99149"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 TEXT);",
            "INSERT INTO t0(c0) VALUES(0);",
            "CREATE INDEX i0 ON t0(c0(1));",
            "SELECT * FROM t0 WHERE t0.c0 NOT BETWEEN '\u05a3a' AND NULL; -- expected: {0}, actual: {}"
        ],
        "title": "BETWEEN query malfunctions for special character and TEXT index"
    },
    {
        "date": "01/04/2020",
        "dbms": "MySQL",
        "links": {
            "bugreport": "https://bugs.mysql.com/bug.php?id=99150"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "closed (not a bug)",
        "test": [
            "CREATE TABLE t0(c0 FLOAT UNIQUE);",
            "INSERT INTO t0(c0) VALUES (296088496), (0), (2080822651);",
            "SELECT * FROM t0 WHERE t0.c0 NOT IN (622120376, -1.421821436E9, 296088496); -- expected: {0, 296089000, 2080820000}, actual: {0, 296089000}"
        ],
        "title": "The IN operator malfunctions for floating-poing numbers"
    },
    {
        "date": "02/04/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/46914",
            "fix": "https://github.com/cockroachdb/cockroach/pull/50815"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "SELECT * FROM t0 GROUP BY t0.c0 HAVING MIN((CASE WHEN false THEN NULL END):::FLOAT) IS NOT NAN; -- internal error: lookup for ComparisonExpr ((@2)[float] != ('NaN')[string])[bool]'s CmpOp failed"
        ],
        "title": "Internal error: lookup for ComparisonExpr ((@2)[float] != ('NaN')[string])[bool]'s CmpOp failed"
    },
    {
        "date": "02/04/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/46915"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "SELECT COUNT(CASE WHEN false THEN ARRAY[NULL] END) FROM t0; -- at or near \"unknown\": syntax error"
        ],
        "title": "Unexpected syntax error for expression involving ARRAY[NULL]"
    },
    {
        "date": "02/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/16017"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 INT);",
            "SELECT /*+ INL_MERGE_JOIN(t1) */ * FROM t0 NATURAL JOIN t1 WHERE t0.c0 IS NULL;"
        ],
        "title": "INL_MERGE_JOIN hint results in an error \"Internal : Can't find a proper physical plan for this query\""
    },
    {
        "date": "02/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/16020",
            "fix": "https://github.com/pingcap/tidb/pull/16316"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 CHAR AS (c1) UNIQUE, c1 INT);",
            "INSERT INTO t0(c1) VALUES (0), (1);",
            "SELECT * FROM t0; -- connection running loop panic"
        ],
        "title": "SELECT on table with generated column causes a server panic"
    },
    {
        "date": "02/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/16023",
            "fix": "https://github.com/pingcap/tidb/pull/16444"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 INT);",
            "INSERT INTO t0(c0) VALUES (NULL);",
            "SELECT * FROM t1 RIGHT JOIN t0 ON TRUE WHERE CONCAT_WS(t0.c0=t0.c0, 0, NULL) IS NULL; -- expected: {NULL}, actual: {}"
        ],
        "title": "RIGHT JOIN with CONCAT_WS fails to fetch a row"
    },
    {
        "date": "02/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/16025",
            "fix": "https://github.com/pingcap/tidb/pull/16518"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 NUMERIC PRIMARY KEY);",
            "INSERT IGNORE INTO t0(c0) VALUES (NULL);",
            "SELECT * FROM t0 WHERE c0; -- expected: {}, actual: {0}"
        ],
        "title": "INSERT IGNORE causes an incorrect result for a query on a DECIMAL column"
    },
    {
        "date": "02/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/16027"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0(c0) VALUES (1), (1), (1), (1), (1), (1);",
            "CREATE VIEW v0(c0) AS SELECT NULL FROM t0;",
            "SELECT * FROM t0 LEFT JOIN v0 ON TRUE WHERE v0.c0 IS NULL; -- runtime error: slice bounds out of range [:264] with capacity 256"
        ],
        "title": "LEFT JOIN on a view results in \"runtime error: slice bounds out of range [:264] with capacity 256\""
    },
    {
        "date": "02/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/16028"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 DOUBLE UNSIGNED UNIQUE);",
            "INSERT INTO t0(c0) VALUES (0);",
            "SELECT * FROM t0 WHERE t0.c0 = -1; -- expected: {}, actual: {0}"
        ],
        "title": "Incorrect result when comparing a FLOAT/DOUBLE UNSIGNED with a negative number"
    },
    {
        "date": "02/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/16029",
            "fix": "https://github.com/pingcap/tidb/pull/16405"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 INT);",
            "INSERT INTO t0 VALUES (NULL), (1);",
            "INSERT INTO t1 VALUES (0);",
            "SELECT t0.c0 FROM t0 JOIN t1 ON (t0.c0 REGEXP 1) | t1.c0  WHERE BINARY STRCMP(t1.c0, t0.c0); --  No valid regexp pattern found"
        ],
        "title": "REGEXP predicate unexpectedly results in an error \"No valid regexp pattern found\""
    },
    {
        "date": "03/04/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/46964",
            "fixed": "https://github.com/cockroachdb/cockroach/pull/47281"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 STRING[]);",
            "INSERT INTO t0(c0) VALUES(ARRAY[]);",
            "CREATE STATISTICS s0 ON c0 FROM t0; -- ERROR: unable to encode table key: *tree.DArray"
        ],
        "title": "CREATE STATISTICS on table with ARRAY column"
    },
    {
        "date": "03/04/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/46970"
        },
        "oracle": "TLP (aggregate)",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0 VALUES(-1292691042);",
            "SELECT t0.c0::SMALLINT FROM t0; -- expected: {6558}, actual: {-1292691042}"
        ],
        "title": "CAST to INT2 yields an incorrect/inconsistent result"
    },
    {
        "date": "03/04/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/46973",
            "fix": "https://github.com/cockroachdb/cockroach/pull/47077"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 TIMESTAMP UNIQUE);",
            "SELECT * FROM t0 WHERE (-9223372036854775808)::TIMESTAMP!=t0.c0; -- ERROR: unordered spans (/Table/1208/2/{!NULL-292277026596-12-04T15:30:07.999999001Z} /Table/1208/{2/292277026596-12-04T15:30:08.000001Z-3})"
        ],
        "title": "Comparison with (-9223372036854775808)::TIMESTAMP results in an unexpected error"
    },
    {
        "date": "03/04/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/46981",
            "fix": "https://github.com/cockroachdb/cockroach/pull/47036"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE VIEW v0(c0) AS SELECT COUNT_ROWS() FROM t0;",
            "SELECT * FROM v0 WHERE '' !~ '+'; -- expected: error parsing regexp: missing argument to repetition operator: `+`, actual: {}"
        ],
        "title": "Query with an invalid regular expression unexpectedly does not fail"
    },
    {
        "comment": "could also be found by the qp-where oracle",
        "date": "04/04/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/47029",
            "fix": "https://github.com/cockroachdb/cockroach/pull/47035"
        },
        "oracle": "TLP (aggregate)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SET vectorize=on;",
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 INT);",
            "INSERT INTO t0(c0) VALUES(0);",
            "INSERT INTO t1(c0) VALUES(NULL);",
            "CREATE INDEX ON t1(c0) INTERLEAVE IN PARENT t0(c0);",
            "SELECT * FROM t0 WHERE t0.rowid > 0; -- expected: {}, actual: {0}"
        ],
        "title": "Incorrect result for query on interleaved index when vectorize=on"
    },
    {
        "date": "04/04/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/47030",
            "fix": "https://github.com/cockroachdb/cockroach/pull/47482"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SET experimental_enable_temp_tables = 'on';",
            "CREATE TEMP TABLE t0(c0 INT);",
            "TRUNCATE t0; -- ERROR: unexpected value: <nil>"
        ],
        "title": "TRUNCATE on temporary table results in \"unexpected value: <nil>\""
    },
    {
        "date": "04/04/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/47031"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "SET experimental_enable_temp_tables = 'on';",
            "CREATE TEMP TABLE t0(c0 INT);",
            "CREATE INDEX ON t0(c0) USING HASH WITH BUCKET_COUNT=1;",
            "EXPERIMENTAL SCRUB table t0; -- ERROR: check-constraint: cannot access temporary tables of other sessions"
        ],
        "title": "SCRUB on a temporary table that has a hash-sharded index results in an error"
    },
    {
        "date": "04/04/2020",
        "dbms": "MySQL",
        "links": {
            "bugreport": "https://bugs.mysql.com/bug.php?id=99182"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "closed (not a bug)",
        "test": [
            "CREATE TABLE t0(c0 DECIMAL UNIQUE);",
            "INSERT INTO t0(c0) VALUES(0);",
            "SELECT * FROM t0 WHERE '' BETWEEN t0.c0 AND t0.c0; -- expected: {0}, actual: {}"
        ],
        "title": "BETWEEN computes incorrect result when comparing DECIMAL with a string"
    },
    {
        "date": "04/04/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/47037",
            "fix": "https://github.com/cockroachdb/cockroach/pull/47090"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "set experimental_enable_hash_sharded_indexes = 'on';",
            "CREATE TABLE t0();",
            "CREATE INDEX ON t0(c0) USING HASH WITH BUCKET_COUNT = 1;"
        ],
        "title": "Internal error for an invalid CREATE INDEX statement"
    },
    {
        "date": "04/04/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/47041",
            "fix": "https://github.com/cockroachdb/cockroach/pull/47159"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "set experimental_enable_hash_sharded_indexes = 'on';",
            "CREATE TABLE t0(c0 INT);",
            "CREATE INDEX ON t0(c0) USING HASH WITH BUCKET_COUNT = 1;",
            "SELECT 1 FROM t0 WHERE 0 < rowid GROUP BY crdb_internal_c0_shard_1, c0 ORDER BY crdb_internal_c0_shard_1; -- ERROR: internal error: no output column equivalent to 1"
        ],
        "title": "SELECT statement on table with a hash-sharded index results in an internal error"
    },
    {
        "date": "07/04/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/47114"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            ""
        ],
        "title": "Disconnecting from server results in crash with \"unexpected leftover bytes\""
    },
    {
        "date": "07/04/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/47115",
            "fix": "https://github.com/cockroachdb/cockroach/pull/48052"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SET SESSION VECTORIZE=on;",
            "CREATE TABLE t0 (c0 DECIMAL PRIMARY KEY, c1 INT UNIQUE);",
            "INSERT INTO t0(c0) VALUES (1819487610);",
            "SELECT t0.c0 FROM t0 ORDER by t0.c1; -- expected: {1819487610}, actual: {1.81948761E+9}"
        ],
        "title": "ORDER BY unexpectedly causes a value to be represented in E notation when VECTORIZE=on"
    },
    {
        "date": "07/04/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/47116"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 FLOAT PRIMARY KEY);",
            "CREATE INDEX ON t0(c0) INTERLEAVE IN PARENT t0(c0);",
            "INSERT INTO t0 VALUES(0);",
            "EXPERIMENTAL SCRUB table t0; -- server exits"
        ],
        "title": "SCRUB on a table with FLOAT PRIMARY KEY and INTERLEAVE IN PARENT index causes server to exit"
    },
    {
        "date": "07/04/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/47122"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 INT AS (0) STORED);",
            "INSERT INTO t1(rowid) VALUES (1), (2);",
            "CREATE UNIQUE INDEX ON t1(c0) INTERLEAVE IN PARENT t0(c0);",
            "CREATE INDEX ON t0(c0); -- invalid interleave backreference table=t1 index=2: index-id \"2\" does not exist"
        ],
        "title": "CREATE INDEX results in \"invalid interleave backreference\" and prevents database from being dropped"
    },
    {
        "date": "07/04/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/47131",
            "fix": "https://github.com/cockroachdb/cockroach/pull/47174"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SET vectorize=on;",
            "CREATE TABLE t0(c0 INT2 UNIQUE);",
            "INSERT INTO t0 VALUES(1);",
            "SELECT * FROM t0 WHERE (t0.c0 + t0.c0::INT4) = 0; -- unexpected error from the vectorized runtime: interface conversion: coldata.column is []int32, not []int64"
        ],
        "title": "Column that is used both as an INT2 and INT4 results in an internal error"
    },
    {
        "date": "07/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/489",
            "fix1": "https://github.com/cwida/duckdb/commit/b838c589e26c47c342dd29b890438f5fb9dce4d4",
            "fix2": "https://github.com/cwida/duckdb/commit/ef2286faef94a75d1ed02de0e86b804610da281e"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0(c0) VALUES (0);",
            "SELECT * FROM t0 WHERE NOT(NULL OR TRUE); -- expected: {}, actual: {1}"
        ],
        "title": "A predicate NOT(NULL OR TRUE) unexpectedly evaluates to TRUE"
    },
    {
        "date": "07/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/490",
            "fix": "https://github.com/cwida/duckdb/commit/f18ef427cfbe75f76abc40a00937dc1bea675012"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0(c0) VALUES (NULL);",
            "SELECT * FROM t0 WHERE c0 = c0; -- expected: {}, actual: {NULL}"
        ],
        "title": "A comparison column=column unexpectedly evaluates to TRUE for column=NULL"
    },
    {
        "date": "08/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/493",
            "fix": "https://github.com/cwida/duckdb/commit/403219728c302ad1eba1cf9e30934b85539a8945"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SELECT '' SIMILAR TO ''; -- Error: Unknown error -1"
        ],
        "title": "SIMILAR TO results in an \"Unknown error -1\""
    },
    {
        "date": "08/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/495",
            "fix": "https://github.com/cwida/duckdb/commit/7156b358369203ab45fc55eac8605e475c7fdce4"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 NUMERIC UNIQUE);",
            "INSERT INTO t0(c0) VALUES (1163404482), (0), (488566);",
            "SELECT * FROM t0 WHERE 0.1 < c0; -- expected: {}, actual: {1163404482.0, 488566.0}"
        ],
        "title": "Comparison on UNIQUE NUMERIC column causes a query to omit a row in the result set"
    },
    {
        "date": "08/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/496",
            "fix": "https://github.com/cwida/duckdb/commit/f11d74a04e5326bde44058b0724ab33ac33547f8"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 BOOLEAN, c1 INT);",
            "CREATE INDEX i0 ON t0(c1, c0);",
            "INSERT INTO t0(c1) VALUES (0); -- terminate called after throwing an instance of 'duckdb::InvalidTypeException'"
        ],
        "title": "INSERT causes an abort with \"terminate called after throwing an instance of 'duckdb::InvalidTypeException'\""
    },
    {
        "date": "08/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/497",
            "fix": "https://github.com/cwida/duckdb/commit/a90e05ae7d4995ff094c3f0551c4564006f095f2"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 BOOL);",
            "CREATE TABLE t1(c0 BOOL);",
            "INSERT INTO t1(c0) VALUES (0);",
            "INSERT INTO t0(c0) VALUES (0);",
            "SELECT t0.c0 FROM t0, t1 WHERE t1.c0 < t0.c0; -- Error: Not implemented: Unimplemented type for sort"
        ],
        "title": "Comparison of two boolean columns in different tables results in an error \"Not implemented: Unimplemented type for sort\""
    },
    {
        "date": "09/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/500",
            "fix": "https://github.com/cwida/duckdb/commit/57c3f002e6017a11964c598b377f849cc7722438"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 VARCHAR, c1 DOUBLE);",
            "CREATE TABLE t1(c0 DOUBLE, PRIMARY KEY(c0));",
            "INSERT INTO t0(c0) VALUES (0), (0), (0), (0);",
            "INSERT INTO t0(c0) VALUES (NULL), (NULL);",
            "INSERT INTO t1(c0) VALUES (0), (1);",
            "",
            "SELECT t0.c0 FROM t0, t1; -- A fatal error has been detected by the Java Runtime Environment"
        ],
        "title": "SELECT causes JDBC driver to crash"
    },
    {
        "date": "10/04/2020",
        "dbms": "CockroachDB",
        "links": {
            "bugreport": "https://github.com/cockroachdb/cockroach/issues/47327",
            "fix": "https://github.com/cockroachdb/cockroach/pull/47483"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 DECIMAL UNIQUE);",
            "INSERT INTO t0(c0) VALUES(0);",
            "SELECT t0.c0 FROM t0 WHERE t0.c0 BETWEEN t0.c0 AND INTERVAL '-1'::DECIMAL; -- expected: {}, actual: {0}"
        ],
        "title": "BETWEEN expression with an INTERVAL and DECIMAL cast results in an incorrect result"
    },
    {
        "date": "10/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/503",
            "fix": "https://github.com/cwida/duckdb/commit/1014b562dcd8228e7bdb3f984323034d3f0ae3ca"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 INT);",
            "SELECT * FROM t0 RIGHT JOIN t1 ON t0.c0!=t1.c0; -- Error: Unhandled type for empty NL join"
        ],
        "title": "RIGHT JOIN with a predicate that compares two integer columns results in an \"Unhandled type\" error"
    },
    {
        "date": "10/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/504",
            "fix": "https://github.com/cwida/duckdb/commit/3a536f71d9ef1ee9feab8cb0870e425c0cdae9d6"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 BOOLEAN, c1 INT, PRIMARY KEY(c0, c1));",
            "INSERT INTO t0(c1, c0) VALUES (0, 0); -- Error: Not implemented: Cannot create data from this type"
        ],
        "title": "INSERT results in an error \"Not implemented: Cannot create data from this type\""
    },
    {
        "date": "10/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/505",
            "fix": "https://github.com/cwida/duckdb/commit/1014b562dcd8228e7bdb3f984323034d3f0ae3ca"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c1 BOOLEAN);",
            "INSERT INTO t0(c0) VALUES (1);",
            "SELECT * FROM t0 RIGHT JOIN t1 on true; -- expected: {}, actual: {1|false}"
        ],
        "title": "A RIGHT JOIN unexpectedly fetches rows"
    },
    {
        "date": "10/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/506",
            "fix": "https://github.com/cwida/duckdb/commit/801101000f874aac259bb8f5af30983a03475fba"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 INT);",
            "SELECT * FROM t1 JOIN t0 ON t1.c0 < t1.c0 - t0.c0 WHERE t0.c0 <= t1.c0; -- Error: INTERNAL: Failed to bind column reference \"c0\" [5.0] (bindings: [6.0])"
        ],
        "title": "Query results in an error \"INTERNAL: Failed to bind column reference \"c0\" [5.0] (bindings: [6.0])\""
    },
    {
        "date": "10/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/507",
            "fix": "https://github.com/cwida/duckdb/commit/a56a90108d8e0e012abbbd0b97bfc224555c6a11"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0();"
        ],
        "title": "Creating an empty table results in a crash"
    },
    {
        "date": "10/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/508",
            "fix": "https://github.com/cwida/duckdb/commit/c40e4ca4b08c65213d74f6f4349d46cf5c25f430"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 INT);",
            "INSERT INTO t0(c0) VALUES (0);",
            "INSERT INTO t1(c0) VALUES (NULL);",
            "SELECT * FROM t1 LEFT JOIN t0 ON t0.c0=t1.c0; -- Segmentation fault"
        ],
        "title": "LEFT JOIN on column with NULL value results in a segmentation fault"
    },
    {
        "date": "10/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/510",
            "fix": "https://github.com/cwida/duckdb/commit/0ba277225e9748b805dd9bf0270da75ec8db286b"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0(c0) VALUES (-10);",
            "SELECT * FROM t0 WHERE t0.c0 NOT SIMILAR TO 0; -- expected: {-10}, actual: {}"
        ],
        "title": "SIMILAR TO results in an incorrect result"
    },
    {
        "date": "11/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/513",
            "fix": "https://github.com/cwida/duckdb/commit/215e40cd5cdb7eee68797df4982219c63f04e2a9"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 INT);",
            "INSERT INTO t1(c0) VALUES (0);",
            "INSERT INTO t0(c0) VALUES (0);",
            "SELECT * FROM t0 LEFT JOIN t1 ON t0.c0 <= t1.c0; -- Not implemented: Unimplemented type for nested loop join!"
        ],
        "title": "LEFT JOIN with comparison on integer columns results in \"Not implemented: Unimplemented type for nested loop join!\""
    },
    {
        "date": "11/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/514",
            "fix": "https://github.com/cwida/duckdb/commit/0d29535fe6aefdf2fbe8a7de0775c253f8038a1a"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE UNIQUE INDEX i0 ON t0(c0);",
            "INSERT INTO t0(c0) VALUES (1);",
            "INSERT INTO t0(c0) VALUES (1); -- Failed to commit: Constraint: PRIMARY KEY or UNIQUE constraint violated: duplicated key",
            "SELECT * FROM t0 WHERE t0.c0 = 1; -- expected: {1}, actual: {}"
        ],
        "title": "Incorrect result after an INSERT violates a UNIQUE constraint"
    },
    {
        "date": "11/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/515",
            "fix": "https://github.com/cwida/duckdb/commit/7e1234d8f414f1e1de4e15a57939594036d74f37"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 INT8, c1 DOUBLE);",
            "INSERT INTO t1(c0) VALUES (0);",
            "INSERT INTO t1(c1, c0) VALUES (1, 1);",
            "INSERT INTO t0 VALUES (0);",
            "SELECT * FROM t1 JOIN t0 ON t1.c1 WHERE NOT (t1.c0<<-1); -- expected: {1|1|0}, actual: {}"
        ],
        "title": "Query with a negative shift predicate yields an incorrect result"
    },
    {
        "date": "11/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/516",
            "fix": "https://github.com/cwida/duckdb/commit/331cce4a0c88ee1b477d5859de7211c455664349"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 BOOL UNIQUE);",
            "INSERT INTO t0(c0) VALUES (0);",
            "SELECT * FROM t0 WHERE t0.c0 = true; -- Error: Invalid type: Invalid Type [BOOL]: Invalid type for index"
        ],
        "title": "Query with comparison on boolean column results in \"Invalid type: Invalid Type [BOOL]: Invalid type for index\""
    },
    {
        "date": "11/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/517",
            "fix": "https://github.com/cwida/duckdb/commit/d88e21d926e732096081ee8afda03d70310bee2d"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 INT);",
            "INSERT INTO t0(c0) VALUES (0);",
            "INSERT INTO t1(c0) VALUES (0);",
            "SELECT * FROM t1, t0 WHERE NOT ((t1.c0 AND t0.c0) < 0); -- expected: {0|0}, actual: {}"
        ],
        "title": "Query with an AND predicate, NOT and comparison yields an incorrect result"
    },
    {
        "date": "11/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/518",
            "fix": "https://github.com/cwida/duckdb/commit/230785f2e6dceac410cfd894db214d21e356b127"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 INT);",
            "INSERT INTO t0(c0) VALUES (0);",
            "INSERT INTO t1(c0) VALUES (0), (0), (1), (-1);",
            "SELECT * FROM t0, t1 WHERE LN(t1.c0) < t0.c0; -- does not terminate"
        ],
        "title": "Query using the LN() function does not terminate"
    },
    {
        "additional_testcase": "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c1 INT);\nINSERT INTO t1(c1) VALUES (0);\nINSERT INTO t0(c0) VALUES (0);\nSELECT t1.c1 FROM t0, t1;\nSELECT t1.c1 FROM t0, t1 WHERE ((ROUND(0.1, 1000))=((t1.c1 < t0.c0))) UNION ALL\nSELECT t1.c1 FROM t0, t1 WHERE (NOT ((ROUND(0.1, 1000))=((t1.c1 < t0.c0)))) UNION ALL\nSELECT t1.c1 FROM t0, t1 WHERE ((((ROUND(0.1, 1000))=((t1.c1 < t0.c0)))) IS NULL);\n",
        "date": "11/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/521",
            "fix": "https://github.com/cwida/duckdb/commit/e399d40eb76f2fbe97c9e139551171862ab7848d"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SELECT ROUND(0.1, 1000); -- -nan"
        ],
        "title": "ROUND() evaluates to -nan"
    },
    {
        "additional_testcase": "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c1 INT);\nINSERT INTO t1(c1) VALUES (0);\nINSERT INTO t0(c0) VALUES (0);\nSELECT t1.c1 FROM t0, t1;\nSELECT t1.c1 FROM t0, t1 WHERE (1e100::real*0=((t1.c1 < t0.c0))) UNION ALL\nSELECT t1.c1 FROM t0, t1 WHERE (NOT (1e100::real*0=((t1.c1 < t0.c0)))) UNION ALL\nSELECT t1.c1 FROM t0, t1 WHERE (((1e100::real*0=((t1.c1 < t0.c0)))) IS NULL);",
        "date": "11/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/522",
            "fix": "https://github.com/cwida/duckdb/pull/541"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SELECT 1e100::real*0; -- -nan"
        ],
        "title": "Casting a large number to REAL and multiplying it with zero results in -nan"
    },
    {
        "additional_testcase": "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c1 INT);\nINSERT INTO t1(c1) VALUES (0);\nINSERT INTO t0(c0) VALUES (0);\nSELECT t1.c1 FROM t0, t1;\nSELECT t1.c1 FROM t0, t1 WHERE (SIN(1e1000)=((t1.c1 < t0.c0))) UNION ALL\nSELECT t1.c1 FROM t0, t1 WHERE (NOT (SIN(1e1000)=((t1.c1 < t0.c0)))) UNION ALL\nSELECT t1.c1 FROM t0, t1 WHERE (((SIN(1e1000)=((t1.c1 < t0.c0)))) IS NULL);",
        "date": "11/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/523",
            "fix": "https://github.com/cwida/duckdb/pull/541"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SELECT SIN(1e1000); -- -nan"
        ],
        "title": "The trigonometric functions can result in -nan"
    },
    {
        "date": "12/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/525",
            "fix": "https://github.com/cwida/duckdb/commit/0e5a3c47eb28c8b6b9797c0c7f64e8ed5c322cb6"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 FLOAT);",
            "INSERT INTO t0(c0) VALUES (1), (0);",
            "INSERT INTO t1(c0) VALUES (1);",
            "SELECT t1.c0 FROM t1 JOIN t0 ON t1.c0 IN (t0.c0) WHERE t1.c0<=t0.c0; -- expected: {1.0}, actual: {4.67454452791745e-310}"
        ],
        "title": "Incorrect result for a JOIN predicate t1.c0 IN (t0.c0) and WHERE predicate t1.c0<=t0.c0"
    },
    {
        "date": "12/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/526",
            "fix": "https://github.com/cwida/duckdb/commit/a5a88b41f8346a582d6cecb80a12e7287d300bf1"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 REAL);",
            "CREATE TABLE t1(c0 INT2);",
            "CREATE TABLE t2(c0 INT);",
            "INSERT INTO t0 VALUES (-1);",
            "INSERT INTO t1 VALUES (0);",
            "INSERT INTO t2 VALUES (0), (0);",
            "SELECT * FROM t1, t2, t0 WHERE CONCAT(t1.c0) OR t0.c0; -- Segmentation fault"
        ],
        "title": "Query that uses the CONCAT() function and OR expression crashes"
    },
    {
        "date": "12/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/527"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "closed (duplicate)",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 INT);",
            "INSERT INTO t0 VALUES (0);",
            "INSERT INTO t1 VALUES (1), (1);",
            "SELECT t0.c0 FROM t0 JOIN t1 ON t0.c0=(t1.c0 IS NULL) WHERE t0.c0 NOT IN (t1.c0); -- expected: {0, 0}, actual: {1, 1}"
        ],
        "title": "Query with JOIN and WHERE condition unexpectedly fetches a value not present in the table"
    },
    {
        "date": "12/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/528",
            "fix": "https://github.com/cwida/duckdb/commit/1035a091f6feba4cc1c37bea5dda3d3ccfcacd17"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 VARCHAR);",
            "INSERT INTO t0(c0) VALUES (0.1);",
            "SELECT * FROM t0 WHERE REGEXP_MATCHES(t0.c0, '1'); -- expected: {0.1}, actual: {}"
        ],
        "title": "Incorrect result for query that uses REGEXP_MATCHES()"
    },
    {
        "date": "12/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/531",
            "fix": "https://github.com/cwida/duckdb/commit/409b26b96fd9daeb9117ec620f9046f6f657b8eb"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 DATE);",
            "INSERT INTO t0 VALUES (-10000000);",
            "SELECT c0 FROM t0; -- double free or corruption (out)"
        ],
        "title": "SELECT on DATE column with a large negative value results in a \"double free or corruption\""
    },
    {
        "date": "12/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/533",
            "fix": "https://github.com/cwida/duckdb/commit/7905e332b02cd069c238c0ea878afdf4cf8c0419"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 REAL);",
            "INSERT INTO t0(c0) VALUES (10000000000);",
            "SELECT t0.c0 ::INT FROM t0; -- Error: Conversion: Invalid TypeId -1"
        ],
        "title": "Overflow when casting from REAL to INT results in \"Invalid TypeId -1\""
    },
    {
        "date": "12/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/534",
            "fix": "https://github.com/cwida/duckdb/commit/1866e91805ddcc6ac0e0236d44209325334524e4"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 VARCHAR, c1 DOUBLE UNIQUE);",
            "INSERT INTO t0(c0) VALUES (NULL);",
            "UPDATE t0 SET c0=0;",
            "INSERT INTO t0(c0, c1) VALUES (0, 0);",
            "SELECT * FROM t0 WHERE 1 > c1; -- Segmentation fault"
        ],
        "title": "UPDATE causes subsequent query to segfault"
    },
    {
        "date": "12/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/535",
            "fix": "https://github.com/cwida/duckdb/commit/03eafe5d77900714f56f0c6e3d6fb3f0204926cf"
        },
        "oracle": "TLP (HAVING)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 NUMERIC);",
            "INSERT INTO t0(c0) VALUES (-515965088);",
            "INSERT INTO t0(c0) VALUES (1), (-5.15965088E8);",
            "CREATE INDEX i0 ON t0(c0);",
            "SELECT t0.c0 FROM t0 GROUP BY t0.c0, REVERSE(t0.c0); -- non-deterministic result"
        ],
        "title": "GROUP BY clause results in non-deterministic result"
    },
    {
        "date": "12/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/536",
            "fix": "https://github.com/cwida/duckdb/commit/7548d0244bd24cd5da20ec1fdb8f722b39367016"
        },
        "oracle": "TLP (HAVING)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 VARCHAR);",
            "INSERT INTO t1 VALUES (0.9201898334673894), (0);",
            "INSERT INTO t0 VALUES (0);",
            "SELECT * FROM t0, t1 GROUP BY t0.c0, t1.c0 HAVING t1.c0!=MAX(t1.c0) UNION ALL SELECT * FROM t0, t1 GROUP BY t0.c0, t1.c0 HAVING NOT t1.c0>MAX(t1.c0); -- nondeterministic"
        ],
        "title": "Nondeterministic clause when using an UNION query and HAVING clause"
    },
    {
        "date": "12/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/537",
            "fix": "https://github.com/cwida/duckdb/commit/504eb1a3e14c5db4ef46fa8c7dff09702e32d9d4"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE VIEW v0 AS SELECT 0, 1 FROM t0 ORDER BY t0.c0;",
            "SELECT t0.c0 FROM t0, v0; -- Conversion: Invalid TypeId <int>"
        ],
        "title": "Fetching from table and view results in a crash"
    },
    {
        "date": "12/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/538",
            "fix": "https://github.com/cwida/duckdb/commit/faf41956b6363882ef217b81e0c0db9fb7f39970"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 BIGINT);",
            "INSERT INTO t0(c0) VALUES (-1);",
            "INSERT INTO t0(c0) VALUES (0);",
            "SELECT * FROM t0 WHERE t0.c0 AND (t0.c0<<64);-- expected: {}, actual: {-1}"
        ],
        "title": "Incorrect result for predicate with shift on a BIGINT column"
    },
    {
        "date": "13/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/539",
            "fix": "https://github.com/cwida/duckdb/pull/550/commits/7d5ea9f7eb3b249b57f3e42afca6eeac885ae151"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE(c0 VARCHAR);",
            "INSERT INTO t0 VALUES('?'); -- terminate called after throwing an instance of 'std::logic_error'"
        ],
        "title": "[JDBC] Special character causes the JVM to terminate with \"basic_string::_M_construct null not valid\""
    },
    {
        "date": "13/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/540",
            "fix": "https://github.com/cwida/duckdb/commit/7945aa5c9e591b715cf16d8ef0dc4c9612f08219"
        },
        "oracle": "TLP (aggregate)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 VARCHAR);",
            "INSERT INTO t0 VALUES ('aaaaaaaaaaaa');",
            "SELECT MAX(agg0) FROM (SELECT MAX(t0.c0) AS agg0 FROM t0) as s0; -- nondeterministic result or crash"
        ],
        "title": "Nested MAX() results in nondeterministic result or double free"
    },
    {
        "date": "13/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/543",
            "fix": "https://github.com/cwida/duckdb/pull/558/commits/fda8813bb208886a310d927f35566a2f74862aeb"
        },
        "oracle": "TLP (aggregate)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c1 BIGINT);",
            "INSERT INTO t0(c1) VALUES (2);",
            "INSERT INTO t0(c1) VALUES (9223372036854775807);",
            "SELECT SUM(t0.c1) FROM t0; -- expected: {9223372036854776000}, actual: {-9223372036854775807}"
        ],
        "title": "Unexpected result for SUM() upon overflow"
    },
    {
        "date": "13/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/544",
            "fix": "https://github.com/cwida/duckdb/commit/72491b0046cd45cd0702fc60d5f42d4234f82d54"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0(c0) VALUES (0);",
            "CREATE VIEW v0(c0) AS SELECT 1 FROM t0;",
            "SELECT * FROM v0 ORDER BY 'a'; --  Assertion `types.size() > 0' failed (original test case crashed)"
        ],
        "title": "SELECT on view with text constant in ORDER BY crashes"
    },
    {
        "date": "13/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/547",
            "fix": "https://github.com/cwida/duckdb/commit/09565d0bf0df4968defedc23dc00dacbd5afbd8e"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0 VALUES (0);",
            "SELECT * FROM t0 WHERE t0.c0 SIMILAR TO '.'; -- Assertion `strlen(dataptr) == length' failed"
        ],
        "title": "Query with SIMILAR TO results in \"Assertion `strlen(dataptr) == length' failed\""
    },
    {
        "date": "13/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/549",
            "fix": "https://github.com/cwida/duckdb/pull/558/commits/13c37227d777be60e5653830d12c894944bcd549"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0 VALUES (NULL), (0), (1);",
            "SELECT * FROM t0 WHERE CASE WHEN c0 THEN 0 ELSE CASE '0.1' WHEN c0 THEN '' END END; -- Assertion `other.auxiliary->type == VectorBufferType::STRING_BUFFER' failed."
        ],
        "title": "Nested CASE expression results in Assertion `other.auxiliary->type == VectorBufferType::STRING_BUFFER' failed"
    },
    {
        "date": "14/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/552"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 INT);",
            "SELECT * FROM t0 RIGHT JOIN t1 ON 0 WHERE t0.c0 OR t1.c0 BETWEEN t0.c0 AND 1; -- Assertion `filter->expressions.size() == 1' failed."
        ],
        "title": "RIGHT JOIN results in Assertion `filter->expressions.size() == 1' failed"
    },
    {
        "date": "15/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/4"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "severity": "P1",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 INT);",
            "INSERT INTO t0(c0) VALUES (NULL);",
            "SELECT * FROM t1 RIGHT JOIN t0 ON true WHERE (ELT(1^t0.c0, 0, NULL, 0)) IS NULL; -- expected: {NULL, NULL}, actual: {}"
        ],
        "title": "RIGHT JOIN with ELT() predicate returns an incorrect result"
    },
    {
        "date": "15/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/5"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "severity": "P1",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 INT);",
            "INSERT INTO t0 VALUES (0);",
            "INSERT INTO t1 VALUES (0);",
            "SELECT * FROM t1 NATURAL LEFT JOIN t0 WHERE NOT(t0.c0<=>t1.c0); -- expected: {}, actual: {0}"
        ],
        "title": "NATURAL LEFT JOIN results in incorrect result for <=> operator"
    },
    {
        "date": "15/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/6"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "severity": "P1",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0 VALUES (100000);",
            "SELECT * FROM t0 WHERE NOT SPACE(t0.c0); -- expected: {100000}, actual: {}"
        ],
        "title": "Incorrect result when using SPACE() in a predicate"
    },
    {
        "date": "15/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/7"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "severity": "P1",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 CHAR);",
            "CREATE TABLE t1(c0 CHAR UNIQUE);",
            "INSERT INTO t1(c0) VALUES ('');",
            "SELECT t0.c0 FROM t0 RIGHT JOIN t1 ON true WHERE t1.c0; -- expected: {}, actual: {NULL}"
        ],
        "title": "Incorrect result when using the empty string as a predicate in a RIGHT JOIN"
    },
    {
        "date": "15/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/8"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "severity": "P1",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE VIEW v0(c0, c1) AS SELECT t0.c0, 1 FROM t0;",
            "INSERT INTO t0 VALUES (0);",
            "SELECT v0.c0 FROM v0, t0 WHERE v0.c1; -- expected: {0}, actual: {}"
        ],
        "title": "Incorrect result when fetching from a view"
    },
    {
        "date": "15/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/9"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "P1",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT) PARTITION BY HASH(c0) PARTITIONS 3;",
            "SELECT * FROM t0 WHERE t0.c0=9223372036854775808;"
        ],
        "title": "Server panic for predicate t0.c0=9223372036854775808 when using partitions"
    },
    {
        "date": "15/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/10"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "severity": "P1",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT, c1 DECIMAL UNIQUE);",
            "CREATE TABLE t1(c0 INT);",
            "INSERT INTO t0(c1) VALUES (0), (1);",
            "INSERT INTO t1(c0) VALUES (0);",
            "ALTER TABLE t0 MODIFY c1 INT;",
            "SELECT t1.c0 FROM t1, t0 WHERE t0.c1; -- expected: {0}, actual: {0, 0}"
        ],
        "title": "Incorrect result or run-time error after changing column type"
    },
    {
        "date": "15/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/16419",
            "fix": "https://github.com/pingcap/tidb/pull/16430"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 INT);",
            "SELECT * FROM t1 NATURAL LEFT JOIN t0 WHERE NOT t1.c0;"
        ],
        "title": "NATURAL LEFT JOIN with a NOT predicate results in a server panic"
    },
    {
        "date": "15/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/16440"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "closed (duplicate)",
        "test": [
            "CREATE TABLE t1(c0 INT);",
            "INSERT INTO t1(c0) VALUES (NULL);",
            "SELECT t1.c0 FROM t1 WHERE NOT t1.c0; -- expected: {}, actual: {NULL}"
        ],
        "title": "A NOT NULL predicate unexpectedly evaluates to TRUE"
    },
    {
        "date": "15/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/13"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "severity": "P1",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 DOUBLE);",
            "INSERT INTO t0(c0) VALUES (0);",
            "SELECT CAST(t0.c0 AS DATETIME) FROM t0; -- expected: {0000-00-00 00:00:00}, actual: {NULL}"
        ],
        "title": "Incorrect result for CAST to DATETIME"
    },
    {
        "date": "15/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/14"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "P1",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 NUMERIC PRIMARY KEY);",
            "CREATE TABLE t1(c0 INT) PARTITION BY HASH(NOT c0) PARTITIONS 2;",
            "SELECT * FROM t1 NATURAL LEFT JOIN t0; -- ERROR 2013 (HY000): Lost connection to MySQL server during query"
        ],
        "title": "Server panic for NATURAL LEFT JOIN on partitioned table"
    },
    {
        "date": "15/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/15"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "P1",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT DEFAULT 1);",
            "SELECT t0.c0, t0.c0 FROM t0 ORDER BY DEFAULT(t0.c0); -- Column 'c0' in field list is ambiguous"
        ],
        "title": "Using the DEFAULT() function results in an ambiguous column error"
    },
    {
        "date": "15/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/16"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "P2",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT) PARTITION BY HASH((CASE WHEN 0 THEN 0 ELSE c0 END )) PARTITIONS 1; -- ERROR 1105 (HY000): UnknownType: *ast.WhenClause"
        ],
        "title": "Internal error message when using CASE in partitioned table"
    },
    {
        "date": "15/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/18"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "P2",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT) PARTITION BY HASH((c0<CURRENT_USER())) PARTITIONS 1;",
            "INSERT INTO t0 VALUES (0); -- Missing session variable when eval builtin"
        ],
        "title": "Inserting into a partitioned table results in an \"Missing session variable when eval builtin\" error"
    },
    {
        "date": "15/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/19"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "severity": "P1",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 INT);",
            "INSERT INTO t0 VALUES (0);",
            "INSERT INTO t1 VALUES (0);",
            "SELECT * FROM t1 LEFT JOIN t0 ON t0.c0 = t1.c0 WHERE (CASE t0.c0 WHEN 0 THEN t1.c0 ELSE 1 END); -- expected: {}, actual: {0|NULL}"
        ],
        "title": "Incorrect result for LEFT JOIN and CASE operator"
    },
    {
        "date": "15/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/560",
            "fix": "https://github.com/cwida/duckdb/commit/db0e6131397d4a09cd2c997fb86a9974b6c356e3"
        },
        "oracle": "TLP (aggregate)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0 (c0 INT);",
            "INSERT INTO t0 VALUES (0);",
            "SELECT SUM(-1) FROM t0; -- expected: {-1}, actual: {1.8446744073709552e+19}"
        ],
        "title": "Incorrect result for SUM() and negative number"
    },
    {
        "date": "15/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/562",
            "fix": "https://github.com/cwida/duckdb/commit/ae863586dc73d4113ad508a04a8b2aa892038eec"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "SELECT * FROM t0 GROUP BY -4.40304405E8 ORDER BY (CASE 1 WHEN 0 THEN 0 ELSE -440304405 END); -- Assertion `!entry.first->Equals(&expr)' failed."
        ],
        "title": "SELECT with CASE expression causes an assertion failure \"Assertion `!entry.first->Equals(&expr)' failed\""
    },
    {
        "date": "16/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/567",
            "fix": "https://github.com/cwida/duckdb/commit/2927f7835bdee40695b8cf946890cca86c42623a"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SELECT REVERSE('S\u0308a\ufe0d'); --  Assertion `strcmp(dataptr, normalized) == 0' failed."
        ],
        "title": "REVERSE() on special character results in \"Assertion `strcmp(dataptr, normalized) == 0' failed.\""
    },
    {
        "date": "19/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/571",
            "fix": "https://github.com/cwida/duckdb/commit/e913dacbdfc00fa6686a5c470e3deeb1a5893ee0"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0 VALUES (-1);",
            "SELECT t0.c0 FROM t0 WHERE NOT (0 BETWEEN 0 AND t0.c0::BOOL); -- expected: {}, actual: {-1}"
        ],
        "title": "Incorrect result for BETWEEN query that casts column to boolean"
    },
    {
        "date": "19/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/572",
            "fix": "https://github.com/cwida/duckdb/pull/573"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 VARCHAR);",
            "SELECT * FROM t0 WHERE PREFIX(t0.c0, ''); -- Error: std::bad_alloc"
        ],
        "title": "Query using PREFIX() results in an error std::bad_alloc"
    },
    {
        "date": "19/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/43"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "P1",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 DOUBLE);",
            "INSERT INTO t0 VALUES (1e30);",
            "UPDATE t0 SET c0=0 WHERE t0.c0 LIKE 0; -- Data Too Long, field len 22, data len 31"
        ],
        "title": "Unexpected error \"Data Too Long\" when using a WHERE clause in an UPDATE"
    },
    {
        "date": "20/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/45"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "severity": "P1",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INTEGER);",
            "CREATE TABLE t1(c0 INTEGER);",
            "INSERT INTO t1 VALUES (0);",
            "INSERT INTO t0 VALUES (0);",
            "SELECT * FROM t1 LEFT JOIN t0 ON t0.c0=t1.c0 WHERE NOT NULLIF(t1.c0, t0.c0); --expected: {}, actual: {0, NULL}"
        ],
        "title": "Incorrect result for LEFT JOIN AND NULLIF"
    },
    {
        "date": "22/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/47"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "severity": "P2",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT, c1 INT);",
            "CREATE INDEX i0 ON t0(c0, c1);",
            "INSERT INTO t0 VALUES (0, 0);",
            "SELECT /*+ USE_INDEX(t0, i0, i0)*/t0.c0 FROM t0 WHERE t0.c1; -- expected: {}, actual: {0}"
        ],
        "title": "Using an index twice in an index hint results in an incorrect result"
    },
    {
        "date": "22/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/48"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "severity": "P2",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 DOUBLE UNIQUE);",
            "INSERT INTO t0(c0) VALUES (NULL);",
            "SELECT t0.c0 FROM t0 WHERE NOT (t0.c0 AND 1); -- expected: {}, actual: {NULL}"
        ],
        "title": "UNIQUE constraint on DECIMAL/floating-point columns causes incorrect result for NULL in AND"
    },
    {
        "date": "22/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/49"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "severity": "P1",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c1 BOOL UNIQUE);",
            "INSERT INTO t0(c1) VALUES (-128);",
            "SELECT t0.c1 FROM t0 WHERE t0.c1=-129; -- expected: {}, actual: {-128}"
        ],
        "title": "UNIQUE constraint on boolean column results in an incorrect result in a comparison"
    },
    {
        "date": "22/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/50"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "severity": "P1",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT AS (0) VIRTUAL, c1 INT);",
            "CREATE TABLE t1(c0 INT);",
            "INSERT INTO t1(c0) VALUES (0);",
            "SELECT /*+ INL_HASH_JOIN(t1, t0)*/t1.c0 FROM t1 NATURAL LEFT JOIN t0 WHERE NOT t1.c0; -- expected: {0}, actual: {}"
        ],
        "title": "INL_HASH_JOIN hint causes an incorrect result for a table with a generated column"
    },
    {
        "date": "22/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/52"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "P2",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 BINARY AS (CAST(0 AS BINARY))); -- ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your TiDB version for the right syntax to use line 1 column 30 near \"binary)\""
        ],
        "title": "CREATE TABLE with generated column unexpectedly causes a syntax error"
    },
    {
        "date": "22/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/53"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "P2",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 TEXT AS ('\\')); -- ERROR 1064 (42000): You have an error in your SQL syntax"
        ],
        "title": "CREATE TABLE with generated column and escaped backslash causes a syntax error"
    },
    {
        "date": "22/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/54"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "P1",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT UNIQUE, c1 INT AS (c0) VIRTUAL NOT NULL);",
            "INSERT INTO t0(c0) VALUES (1);",
            "INSERT INTO t0(c0) VALUES (1) ON DUPLICATE KEY UPDATE c0=0;"
        ],
        "title": "INSERT INTO with ON DUPLICATE clause results in an unexpected \"Miss column\" error"
    },
    {
        "date": "22/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/55"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "P1",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT AS ('a') UNIQUE, c1 INT);",
            "INSERT IGNORE INTO t0(c1) VALUES (0);",
            "DELETE FROM t0;",
            "INSERT IGNORE INTO t0(c1) VALUES (0) ON DUPLICATE KEY UPDATE c1=t0.c0; -- Error: key not exist"
        ],
        "title": "INSERT INTO with ON DUPLICATE clause results in an unexpected \"key not exist\" error"
    },
    {
        "date": "22/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/56"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "severity": "P1",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INTEGER AS (NULL) NOT NULL, c1 INT);",
            "CREATE INDEX i0 ON t0(c0, c1);",
            "INSERT IGNORE INTO t0(c1) VALUES (0);",
            "SELECT * FROM t0 WHERE t0.c0 IS NULL; -- expected: {NULL|0}, actual: {}"
        ],
        "title": "INSERT IGNORE allows NULL value in a NOT NULL generated column"
    },
    {
        "date": "22/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/57"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "P1",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 FLOAT);",
            "INSERT INTO t0 VALUES (1e100);",
            "SELECT t0.c0 FROM t0; -- +Inf"
        ],
        "title": "Inf value in FLOAT column causes JDBC driver error"
    },
    {
        "date": "22/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/58"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "P1",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT, c1 INT AS ('a') UNIQUE);",
            "INSERT IGNORE INTO t0(c0) VALUES (0);",
            "DELETE FROM t0;",
            "SELECT * FROM t0 ORDER BY t0.c1; -- inconsistent index c1 handle count 1 isn't equal to value count 0"
        ],
        "title": "SELECT with ORDER BY results in an \"inconsistent index\" error"
    },
    {
        "date": "23/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/62"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "severity": "P1",
        "status": "verified",
        "test": [
            "CREATE TABLE t0(c0 INT AS (c1) UNIQUE, c1 TEXT);",
            "INSERT INTO t0(c1) VALUES (0.5);",
            "SELECT t0.c0 FROM t0 WHERE t0.c1 + 0.5; -- expected: {1}, actual: {0} "
        ],
        "title": "Value in generated column depends on a WHERE clause"
    },
    {
        "date": "23/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/pingcap/tidb/issues/16779",
            "fix": "https://github.com/pingcap/tidb/pull/16866"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE TABLE t1(c0 INT);",
            "SELECT * FROM t1 LEFT JOIN t0 ON TRUE WHERE BINARY EXPORT_SET(0, 0, 0 COLLATE 'binary', t0.c0, 0 COLLATE 'binary'); -- server panic"
        ],
        "title": "A predicate with COLLATE 'binary' results in a server panic \"invalid memory address or nil pointer dereference\""
    },
    {
        "date": "23/04/2020",
        "dbms": "TiDB",
        "links": {
            "bugreport": "https://github.com/tidb-challenge-program/bug-hunting-issue/issues/63"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "severity": "P1",
        "status": "verified",
        "test": [
            "CREATE VIEW v0(c0) AS SELECT '\\\\';",
            "SELECT * FROM v0; -- ERROR 1105 (HY000): line 1 column 10"
        ],
        "title": "Fetching from a view with an escaped backslash results in an unexpected syntax error"
    },
    {
        "date": "24/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/579",
            "fix": "https://github.com/cwida/duckdb/commit/f77519c6fb26fc1df1f503f182525b7af68c59fb"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 VARCHAR, c1 VARCHAR);",
            "INSERT INTO t0(c0) VALUES(0), ('');",
            "UPDATE t0 SET c1 = 1;",
            "SELECT t0.c1 FROM t0 WHERE '' = t0.c0; -- expected: {1}, actual: {''}"
        ],
        "title": "Updated value in column is not visible in a SELECT"
    },
    {
        "date": "24/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/580",
            "fix": "https://github.com/cwida/duckdb/commit/184f51539e3df106c148f5816dccfb1927e85c5d"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SELECT SUBSTRING(0, 3, 0); -- segmentation fault"
        ],
        "title": "SUBSTRING with an invalid start position causes a segmentation fault"
    },
    {
        "date": "24/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/581",
            "fix": "https://github.com/cwida/duckdb/commit/0cb8b09273b37ee9ab0ccfaa677926a0e970c51b"
        },
        "oracle": "TLP (DISTINCT)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 BOOLEAN);",
            "INSERT INTO t0 VALUES (NULL), (false);",
            "SELECT DISTINCT t0.c0 FROM t0; -- expected: {NULL, false}, actual: {NULL, NULL}"
        ],
        "title": "DISTINCT malfunctions for BOOLEAN"
    },
    {
        "date": "25/04/2020",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=45f4bf4eb4",
            "fix": "https://www.sqlite.org/src/info/ac31edd3eeafcef4"
        },
        "oracle": "TLP (DISTINCT)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE VIEW v0(c0) AS SELECT CAST(t0.c0 AS INTEGER) FROM t0;",
            "INSERT INTO t0(c0) VALUES (0);",
            "SELECT * FROM t0 LEFT JOIN v0 ON v0.c0 >= '0' WHERE TRUE UNION SELECT 0,0 WHERE 0; -- expected: {0|0}, actual:{0|NULL}"
        ],
        "title": "UNION operator malfunctions in LEFT JOIN on view"
    },
    {
        "date": "25/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/583",
            "fix": "https://github.com/cwida/duckdb/commit/bc96c1ef70867fc402906739b5133c1674f054cf"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 VARCHAR);",
            "INSERT INTO t0(c0) VALUES (0);",
            "UPDATE t0 SET c0=0;",
            "UPDATE t0 SET c0=true;",
            "SELECT * FROM t0 WHERE t0.c0 = true; -- expected: {true}, actual: {}"
        ],
        "title": "Comparing a string with a boolean yields an incorrect result after UPDATE"
    },
    {
        "date": "25/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/584",
            "fix": "https://github.com/cwida/duckdb/commit/e8ec15172fab1dd5c0547f4259ed3dc8ce31f8e9"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INTEGER);",
            "INSERT INTO t0(c0) VALUES (-2);",
            "SELECT t0.c0 FROM t0 WHERE -1 BETWEEN t0.c0::VARCHAR AND 1; -- expected: {-2}, actual: {}"
        ],
        "title": "A select with BETWEEN and VARCHAR cast results in an incorrect result"
    },
    {
        "date": "25/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/585",
            "fix": "https://github.com/cwida/duckdb/commit/dc352a3729f57252a1f6bfa18077fed9c4598a54"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 VARCHAR);",
            "INSERT INTO t0(c0) VALUES (''), (0);",
            "SELECT * FROM t0 WHERE t0.c0 = ''; -- expected: {''}, actual: {}"
        ],
        "title": "Predicate checking for an empty string yields an incorrect result"
    },
    {
        "date": "25/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/586",
            "fix": "https://github.com/cwida/duckdb/commit/77f3151ecfa85dfa894f3a23feb2271a4cac1ddc"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SELECT '' COLLATE NOACCENT.NOCASE='\ua7b1';"
        ],
        "title": "NOACCENT.NOCASE comparison with a special character results in a segmentation fault"
    },
    {
        "date": "25/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/587",
            "fix": "https://github.com/cwida/duckdb/commit/a750473a7e4979a5237471268a752e46dee36e24"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SELECT DATE '-10000-01-01'; -- double free or corruption"
        ],
        "title": "A negative DATE results in a \"double free or corruption\" crash"
    },
    {
        "date": "25/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/588",
            "fix": "https://github.com/cwida/duckdb/commit/8a7cf974f7372a66e837b9cfa5d5c3929e1f625f"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0 VALUES (1), (0), (1);",
            "SELECT t0.rowid FROM t0 WHERE t0.rowid ORDER BY CASE ((t0.c0) ::BOOL) WHEN 1 THEN t0.rowid END; -- expected: {0, 2}, actual: {140671047175328, 2}"
        ],
        "title": "Query with complex ORDER BY causes an incorrect rowid value"
    },
    {
        "date": "25/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/589",
            "fix": "https://github.com/cwida/duckdb/commit/0bfdbf39638c8b623056698850389349ec463ccc"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "CREATE INDEX i0 ON t0(rowid, c0); -- INTERNAL: Failed to bind column reference \"c0\" [0.1] (bindings: [0.0])"
        ],
        "title": "Creating an index on rowid results in an internal error \"Failed to bind column reference\""
    },
    {
        "date": "25/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/590",
            "fix": "https://github.com/cwida/duckdb/commit/63f420535e327a874a46b77dc75c4518c606439b"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 VARCHAR);",
            "INSERT INTO t0(c0) VALUES (DATE '2000-01-02');",
            "SELECT * FROM t0 WHERE DATE '2000-01-01' < t0.c0; -- expected: {2000-01-02}, actual: {}"
        ],
        "title": "Comparison with a DATE yields an incorrect result"
    },
    {
        "date": "25/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/591"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "closed (duplicate)",
        "test": [
            "SELECT - 41756167 + '1969-12-11 032657' ::DATE; -- double free or corruption"
        ],
        "title": "Subtracting a large integer from a DATE results in a \"double free or corruption\""
    },
    {
        "date": "26/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/592",
            "fix": "https://github.com/cwida/duckdb/commit/96d5ae2e3a4b3aa52eab3878b78c5bdb8f6946b9"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 VARCHAR);",
            "INSERT INTO t0 VALUES (0);",
            "SELECT * FROM t0 WHERE c0 LIKE '' AND c0 < true; -- Assertion `tableFilter[0].comparison_type == ExpressionType::COMPARE_GREATERTHAN || tableFilter[0].comparison_type == ExpressionType::COMPARE_GREATERTHANOREQUALTO' failed."
        ],
        "title": "Expression with LIKE and comparison causes an assertion failure"
    },
    {
        "date": "27/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/596",
            "fix": "https://github.com/cwida/duckdb/commit/2e03516e04ae94c33bff66201cb4290c1dc86662"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 DOUBLE);",
            "INSERT INTO t0(c0) VALUES(1E200), (0);",
            "SELECT STDDEV_POP(c0) FROM t0; -- unexpected: does not fetch a row"
        ],
        "title": "STDDEV_POP unexpectedly does not fetch any rows"
    },
    {
        "date": "28/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/599",
            "fix": "https://github.com/cwida/duckdb/commit/29e801a7a8c1d219f5633b35dca5c88ced20abdd"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT, c1 VARCHAR);",
            "INSERT INTO t0 VALUES (0, 0), (NULL, 0);",
            "UPDATE t0 SET c1 = c0; -- SEGV on unknown address 0x000000000000"
        ],
        "title": "UPDATE results in crash or assertion failure"
    },
    {
        "date": "29/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/602",
            "fix": "https://github.com/cwida/duckdb/pull/601/commits/ef292aa079f4a1c6b477d9eb052220d0d1f30c46"
        },
        "oracle": "TLP (GROUP BY)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 VARCHAR COLLATE NOCASE);",
            "INSERT INTO t0(c0) VALUES ('a'), ('A');",
            "SELECT t0.c0 FROM t0 GROUP BY t0.c0; -- expected: {'a'} or {'A'}, actual: {'a', 'A'}"
        ],
        "title": "GROUP BY does not take COLLATE into account"
    },
    {
        "date": "29/04/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/603",
            "fix": "https://github.com/cwida/duckdb/commit/67368aa3793590fe503269118c1312b73097be40"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 DATE, c1 VARCHAR);",
            "INSERT INTO t0(c0) VALUES (NULL), ('2000-01-01');",
            "SELECT * FROM t0 WHERE 'a' BETWEEN c0 AND c1 COLLATE NOACCENT.NOCASE; -- segfault"
        ],
        "title": "BETWEEN with COLLATE NOACCENT.NOCASE expression results in a segfault/ASan failure"
    },
    {
        "date": "01/05/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/609",
            "fix": "https://github.com/cwida/duckdb/commit/7cf32b2983e6b579e4e3ec17cc62673a13eae9ee"
        },
        "oracle": "TLP (aggregate)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "INSERT INTO t0 VALUES (-1);",
            "SELECT MIN(CAST(c0 AS BIGINT) << 63) FROM t0; -- expected: {-9223372036854775808}, actual: {NULL}"
        ],
        "title": "Incorrect result for MIN() on expression involving rowid"
    },
    {
        "date": "01/05/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/610",
            "fix": "https://github.com/cwida/duckdb/pull/611/commits/fa0e59bef20c9ed8fd64eaca59405b1f2254903b"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SELECT RPAD('a', 100000000000000000, 0); -- Error: std::bad_alloc"
        ],
        "title": "Large argument to RPAD results in std::bad_alloc"
    },
    {
        "date": "04/05/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/618",
            "fix": "https://github.com/cwida/duckdb/commit/1a1990c786bfd5b3a327e97d8c8028319b2ebef8"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 DATE);",
            "INSERT INTO t0 VALUES (DATE '2000-01-01');",
            "ALTER TABLE t0 ALTER COLUMN c0 SET DATA TYPE INT;",
            "INSERT INTO t0 VALUES (DEFAULT); -- TransactionContext: Transaction conflict: adding entries to a table that has been altered!"
        ],
        "title": "Failed ALTER COLUMN results in a \"Transaction conflict\" error that cannot be aborted"
    },
    {
        "date": "04/05/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/619",
            "fix": "https://github.com/cwida/duckdb/commit/6ef7f2f0202d9d6a8556de022dbe3c9d02851eb5"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT UNIQUE, c1 DATE);",
            "ALTER TABLE t0 ALTER c1 TYPE INT;",
            "INSERT INTO t0(c0) VALUES(-1);",
            "SELECT * FROM t0 WHERE c0 < 0; -- Segmentation fault"
        ],
        "title": "Query on altered table results in a segmentation fault"
    },
    {
        "date": "05/05/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/622",
            "fix": "https://github.com/cwida/duckdb/commit/289b2eaa836d22d7994154a912f8b786be48984b"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 TIMESTAMP);",
            "INSERT INTO t0 VALUES(NULL);",
            "DELETE FROM t0;",
            "ALTER TABLE t0 ALTER c0 TYPE DATE;",
            "INSERT INTO t0 VALUES(NULL);",
            "UPDATE t0 SET c0 = '1969-12-18'; -- Error: Could not find node in column segment tree!"
        ],
        "title": "UPDATE on altered table results in an error \"Could not find node in column segment tree\""
    },
    {
        "date": "05/05/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/624",
            "fix": "https://github.com/cwida/duckdb/commit/b6a065d6ebbab25ae8e023cf1105c5237f26de46"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT, c1 VARCHAR);",
            "INSERT INTO t0(c1) VALUES(NULL);",
            "ALTER TABLE t0 ALTER c1 TYPE TIMESTAMP;"
        ],
        "title": "ALTER TABLE results in an assertion failure \"Assertion `expr.return_type == vector.type' failed\""
    },
    {
        "date": "05/05/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/625",
            "fix": "https://github.com/cwida/duckdb/commit/b6665e723c5f3d9cbd7b0018ce8c242260ac6dc3"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT, c INT UNIQUE);",
            "ALTER TABLE t0 DROP c0; -- Assertion `unique.index < base.columns.size()' failed."
        ],
        "title": "DROP column results in an assertion failure unique.index < base.columns.size()."
    },
    {
        "date": "05/05/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/628",
            "fix": "https://github.com/cwida/duckdb/commit/5624a825ce7de0844b22356a76c1894bd90f9093"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT, c1 INT UNIQUE);",
            "ALTER TABLE t0 DROP c1; -- Assertion `unique.index < base.columns.size()' failed."
        ],
        "title": "DROP column results in an assertion failure unique.index < base.columns.size() 2"
    },
    {
        "date": "05/05/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/629",
            "fix": "https://github.com/cwida/duckdb/commit/ea6cd8245fd192cd181bdd05fe5ecce5d9a48aa8"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "ALTER TABLE t0 ALTER c0 TYPE VARCHAR USING ''; -- Assertion `types.size() > 0' failed."
        ],
        "title": "ALTER TYPE with USING results in an assertion failure \"types.size() > 0\""
    },
    {
        "date": "06/05/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/633",
            "fix": "https://github.com/cwida/duckdb/commit/e05902abc4358bcbaacf41c4075290a0bf6432ee"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 BOOL);",
            "INSERT INTO t0(c0) VALUES (NULL);",
            "SELECT * FROM t0 WHERE LEFT(t0.c0, -1); -- Segmentation fault"
        ],
        "title": "Query using LEFT() results in a segmentation fault"
    },
    {
        "date": "07/05/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/637",
            "fix": "https://github.com/cwida/duckdb/pull/690"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 VARCHAR);",
            "CREATE TABLE t1(c0 VARCHAR);",
            "INSERT INTO t0 VALUES('');",
            "INSERT INTO t1 VALUES(0);",
            "CREATE VIEW v0 AS SELECT 0 FROM t0, t1 WHERE t0.c0 = t1.c0;",
            "SELECT * FROM v0 RIGHT JOIN t1 ON 1; -- Assertion `!finalized' failed"
        ],
        "title": "SELECT with RIGHT JOIN causes an assertion failure \"Assertion `!finalized' failed\""
    },
    {
        "date": "12/08/2020",
        "dbms": "H2",
        "links": {
            "bugreport": "https://github.com/h2database/h2database/issues/2804",
            "fix": "https://github.com/h2database/h2database/pull/2805/commits/e07127455669a116b25a099ccc8c898ea8f0700b"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 INT);",
            "SELECT * FROM t0 WHERE NOT NOT - C0; -- General error: \"java.lang.NullPointerException\" [50000-200] HY000/50000"
        ],
        "title": "Query with an expression \"NOT NOT - C0\" causes a NullPointerException"
    },
    {
        "date": "12/08/2020",
        "dbms": "H2",
        "links": {
            "bugreport": "https://github.com/h2database/h2database/issues/2803",
            "fix": "https://github.com/h2database/h2database/pull/2808"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE T0(c0 BOOL);",
            "INSERT INTO T0(c0) VALUES (true);",
            "SELECT * FROM t0 WHERE NOT (c0 != 2 AND c0); -- expected: {}, actual: {TRUE}"
        ],
        "title": "Incorrect result for query and NOT (c0 != -1 AND c0) predicate"
    },
    {
        "date": "12/08/2020",
        "dbms": "H2",
        "links": {
            "bugreport": "https://github.com/h2database/h2database/issues/2807"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "closed (duplicate)",
        "test": [
            "CREATE TABLE T0(c0 VARCHAR);",
            "INSERT INTO T0(C0) VALUES ('f');",
            "SELECT * FROM T0 WHERE NOT(C0 AND C0); -- expected: {'f'}, actual: {}"
        ],
        "title": "Expression NOT(c0 AND c0) unexpectedly evaluates to FALSE"
    },
    {
        "date": "14/08/2020",
        "dbms": "H2",
        "links": {
            "bugreport": "https://github.com/h2database/h2database/issues/2812"
        },
        "oracle": "TLP (WHERE)",
        "reporter": "Manuel Rigger",
        "status": "open",
        "test": [
            "CREATE TABLE T0(c0 VARCHAR UNIQUE);",
            "INSERT INTO T0(C0) VALUES (-1), (-2);",
            "SELECT * FROM T0 WHERE c0 >= -1; -- expected: {-1, -2}, actual: {-2}"
        ],
        "title": "Unexpected result for query that compares an integer with a string"
    },
    {
        "date": "14/08/2020",
        "dbms": "H2",
        "links": {
            "bugreport": "https://github.com/h2database/h2database/issues/2813",
            "fix": "https://github.com/h2database/h2database/pull/2814/commits/47996fd10483512806f83d81281294c15865d0f3"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE T0(c0 INT);",
            "CREATE TABLE T1(c0 BOOL);",
            "INSERT INTO T0 VALUES (0);",
            "SELECT * FROM T0, T1 WHERE (CASE T1.c0 WHEN T1.c0 THEN T1.c0 END); -- Column \"T1.C0\" must be in the GROUP BY list"
        ],
        "title": "Query with CASE operator unexpectedly results in \"Column must be in the GROUP BY list\" error"
    },
    {
        "date": "15/08/2020",
        "dbms": "H2",
        "links": {
            "bugreport": "https://github.com/h2database/h2database/issues/2816",
            "fix": "https://github.com/h2database/h2database/pull/2817/commits/909d130d662fd3be8845d6b105a936aa19c87c51"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c1 INT);",
            "CREATE VIEW v0(c0) AS SELECT * FROM t0 WHERE false BETWEEN (t0.C1 IS NULL) AND true;",
            "SELECT * FROM v0; -- View \"PUBLIC.V0\" is invalid: \"Syntax error in SQL statement [...]"
        ],
        "title": "Query on view that uses the BETWEEN operator results in an unexpected syntax error"
    },
    {
        "date": "18/08/2020",
        "dbms": "H2",
        "links": {
            "bugreport": "https://github.com/h2database/h2database/issues/2825",
            "fix": "https://github.com/h2database/h2database/pull/2827/commits/938ae0ded2a0f3b72dca4d9f7fae57f8e12206a3"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE T0(c0 DOUBLE);",
            "INSERT INTO T0(c0) VALUES (0);",
            "SELECT * FROM T0 WHERE c0 % 0.1; -- General error: \"java.lang.ClassCastException: class org.h2.value.ValueDecfloat cannot be cast to class org.h2.value.ValueNumeric (org.h2.value.ValueDecfloat and org.h2.value.ValueNumeric are in unnamed module of loader 'app')\";"
        ],
        "title": "Query with % operator results in a ClassCastException"
    },
    {
        "date": "18/08/2020",
        "dbms": "H2",
        "links": {
            "bugreport": "https://github.com/h2database/h2database/issues/2826",
            "fix": "https://github.com/h2database/h2database/pull/2827/commits/8361cc902df325960ac9afaa70096cbbe1b4cf63"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0(c0 BOOL AS (NOT c1), c1 BOOL AS (c0)); -- General error: \"java.lang.NullPointerException\""
        ],
        "title": "Table with a generated column cycle results in a NullPointerException"
    },
    {
        "date": "18/08/2020",
        "dbms": "H2",
        "links": {
            "bugreport": "https://github.com/h2database/h2database/issues/2828",
            "fix": "https://github.com/h2database/h2database/pull/2830/commits/24c4240ff685f9d8b4f2ee33c40a9184f734e6df"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE T0(c0 BINARY);",
            "CREATE VIEW V0(c0) AS SELECT T0.C0 FROM T0 WHERE (CASE NULL WHEN (NOT T0.C0) THEN 1 END);",
            "SELECT * FROM V0;"
        ],
        "title": "Query on view with BINARY column results in an unexpected syntax error"
    },
    {
        "date": "19/08/2020",
        "dbms": "H2",
        "links": {
            "bugreport": "https://github.com/h2database/h2database/issues/2834"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "open",
        "test": [
            "CREATE TABLE T0(c0 BOOL, PRIMARY KEY(c0));",
            "MERGE INTO T0(C0) VALUES (TRUE);",
            "MERGE INTO T0(C0) VALUES (2); -- Timeout trying to lock table {0};"
        ],
        "title": "MERGE INTO fails with an error \"Timeout trying to lock table\""
    },
    {
        "date": "19/08/2020",
        "dbms": "H2",
        "links": {
            "bugreport": "https://github.com/h2database/h2database/issues/2831",
            "fix": "https://github.com/h2database/h2database/pull/2836/commits/61514ae8309115bf69a34d60b6be92fd443eaab2"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SELECT CAST(1 AS YEAR); -- Syntax error in SQL statement"
        ],
        "title": "Restore YEAR data type for MySQL compatibility mode"
    },
    {
        "date": "19/08/2020",
        "dbms": "H2",
        "links": {
            "bugreport": "https://github.com/h2database/h2database/issues/2835",
            "fix": "https://github.com/h2database/h2database/pull/2836/commits/49e3559ad79204b321f726db13a925d541e49985"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SELECT CEIL('a'); -- NullPointerException"
        ],
        "title": "Calling math functions with a string argument results in a NullPointerException"
    },
    {
        "date": "19/08/2020",
        "dbms": "H2",
        "links": {
            "bugreport": "https://github.com/h2database/h2database/issues/2833",
            "fix": "https://github.com/h2database/h2database/pull/2836/commits/4b2441e0629b8fea2bafca453128b7f7194625b8"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE T0(c0 INT AS (1), c1 INT);",
            "MERGE INTO T0(C0) KEY(C1) VALUES (1); -- Syntax error in SQL statement \"UPDATE \"\"PUBLIC\"\".\"\"T0\"\" SET  WHERE[*] \"\"C1\"\"=?\""
        ],
        "title": "MERGE INTO causes an unexpected syntax error"
    },
    {
        "date": "19/08/2020",
        "dbms": "H2",
        "links": {
            "bugreport": "https://github.com/h2database/h2database/issues/2837",
            "fix": "https://github.com/h2database/h2database/pull/2840/commits/21c86dd18621adbfdc534c6f77ed73f54ef26e68"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SELECT ROUND(1, 10000000);"
        ],
        "title": "ROUND() function runs very long"
    },
    {
        "date": "19/08/2020",
        "dbms": "H2",
        "links": {
            "bugreport": "https://github.com/h2database/h2database/issues/2838",
            "fix": "https://github.com/h2database/h2database/pull/2840/commits/23ca1f8d587e39cbc9e2173f9c558f3a29c9beb6"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SELECT INSERT(NULL, 0, 0, NULL); -- NullPointerException"
        ],
        "title": "INSERT() with NULL arguments for the original string and string to be added results in NPE"
    },
    {
        "date": "19/08/2020",
        "dbms": "H2",
        "links": {
            "bugreport": "https://github.com/h2database/h2database/issues/2839",
            "fix": "https://github.com/h2database/h2database/pull/2840/commits/40d925d33cfacc74d4f407aa947ca4e1dc43cbce"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE T0(c0 INT);",
            "CREATE VIEW v0(c0) AS SELECT * FROM T0 WHERE POSITION((C0 > 0), 0);",
            "SELECT * FROM V0; -- Syntax error in SQL statement"
        ],
        "title": "Querying a view that uses the POSITION() function results in an unexpected syntax error"
    },
    {
        "date": "20/08/2020",
        "dbms": "H2",
        "links": {
            "bugreport": "https://github.com/h2database/h2database/issues/2841",
            "fix": "https://github.com/h2database/h2database/pull/2844"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SELECT STRINGDECODE(X'5c38'); -- StringIndexOutOfBoundsException"
        ],
        "title": "Call to STRINGDECODE results in StringIndexOutOfBoundsException"
    },
    {
        "date": "20/08/2020",
        "dbms": "H2",
        "links": {
            "bugreport": "https://github.com/h2database/h2database/issues/2842",
            "fix": "https://github.com/h2database/h2database/pull/2844"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE T0(c0 VARCHAR);",
            "CREATE VIEW v0(c0) AS SELECT RTRIM(c0) FROM T0;",
            "SELECT * FROM V0; -- Syntax error in SQL statement"
        ],
        "title": "Querying view that uses LTRIM/RTRIM results in a syntax error"
    },
    {
        "date": "25/08/2020",
        "dbms": "H2",
        "links": {
            "bugreport": "https://github.com/h2database/h2database/issues/2832",
            "fix": "https://github.com/h2database/h2database/pull/2850"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE T0(c0 BINARY(1500000000));",
            "INSERT INTO T0(c0) VALUES (0);",
            "DELETE FROM T0; -- General error: \"java.lang.NegativeArraySizeException: -1294959092\""
        ],
        "title": "CREATE TABLE with a BINARY column and large size specification results in a NegativeArraySizeException"
    },
    {
        "date": "24/08/2020",
        "dbms": "SQLite",
        "links": {
            "bugreports": "https://www.sqlite.org/src/tktview?name=f3ff147288",
            "fix": "https://www.sqlite.org/src/info/4236103379df0b3d"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SELECT (1 IN (2 IS TRUE)); -- expected: {1}, actual: {0}"
        ],
        "title": "Incorrect result for IN expression with right-hand IS TRUE sub-expression"
    },
    {
        "date": "27/08/2020",
        "dbms": "SQLite",
        "links": {
            "bugreport": "https://www.sqlite.org/src/tktview?name=be31cf009c",
            "fix": "https://www.sqlite.org/docsrc/info/153857859d220dbd"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed (in documentation)",
        "test": [
            "SELECT 1 % '1E1'; -- expected: {1.0}, actual: {0.0}"
        ],
        "title": "Unexpected result for % and '1E1'"
    },
    {
        "date": "24/09/2020",
        "dbms": "DuckDB",
        "links": {
            "bugreport": "https://github.com/cwida/duckdb/issues/956"
        },
        "oracle": "crash",
        "reporter": "Manuel Rigger",
        "status": "open",
        "test": [
            "CREATE TABLE t0(c0 VARCHAR UNIQUE);",
            "INSERT INTO t0 VALUES('19691214 051350'), (1), ('19700118'), (0), ('1969-1214 102704'), ('1969-12-14'), ('1969-12-14 114142'), ('1969-12-30 040325'), ('1969-12-18 044750'), ('1969-12-14 100915');",
            "SELECT * FROM t0 WHERE '19691' > c0;"
        ],
        "title": "Buffer overflow in duckdb::ART::IteratorNext"
    }
]
